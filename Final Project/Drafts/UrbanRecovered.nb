(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1305084,      24923]
NotebookOptionsPosition[   1296154,      24773]
NotebookOutlinePosition[   1296549,      24790]
CellTagsIndexPosition[   1296506,      24787]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Impact of Urban Design on Quality of Life", "Title",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101323714347*^9}},ExpressionUUID->"112c77e2-f45b-4372-906b-\
a938d28da3f8"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Intro", "Subtitle"]], "Section",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101340757436*^9}},ExpressionUUID->"2f1f3b8e-3200-48b9-b773-\
a77a1c396b17"],

Cell[TextData[StyleBox["Most of the population around the globe is now \
concentrated in cities. There are around 2 dozens urban areas with \
populations exceeding 10 million people, but we still fail to quantify the \
influence of various aspects of urban design on the quality of life.\nThis \
work is a stepping stone in that direction.", "Text"]], "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711015405664473`*^9}},ExpressionUUID->"c6307c66-135d-4af1-918e-\
b52e229fb589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["What is quality of life?", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017087241497`*^9}},ExpressionUUID->"ac13fabb-576a-4a4b-8847-\
2bb61f653aef"],

Cell["\<\
This is a very non-trivial question and we are not going to answer it in this \
work. Instead we will define a very simple approximation of quality of life \
as average sentiment across Tweets related to that specific city.\
\>", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
  3.771102550634573*^9}},ExpressionUUID->"d7112578-2f96-4683-9976-\
1d246abd738b"],

Cell[CellGroupData[{

Cell["Environment", "Section",
 CellChangeTimes->{{3.771713279816607*^9, 
  3.771713281790873*^9}},ExpressionUUID->"627737e6-2c67-4101-ba9d-\
4750ebb8b851"],

Cell[CellGroupData[{

Cell["Utility Functions", "Subsection",
 CellChangeTimes->{{3.771712604201354*^9, 
  3.771712608129142*^9}},ExpressionUUID->"15f0bbef-4baf-4ee2-8702-\
3e0092151fcb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AssociationKeyRename", "[", 
     RowBox[{"a_", ",", " ", 
      RowBox[{"old_", " ", "\[Rule]", " ", "new_"}]}], "]"}], " ", "/;", " ", 
    
    RowBox[{"KeyExistsQ", "[", 
     RowBox[{"a", ",", " ", "old"}], "]"}]}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"KeyDrop", "[", "old", "]"}], " ", "@", " ", 
    RowBox[{"Append", "[", 
     RowBox[{"a", ",", " ", 
      RowBox[{"new", " ", "\[Rule]", " ", 
       RowBox[{"a", "[", "old", "]"}]}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationFromPair", "[", "strAndNum_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
    "\[Rule]", " ", 
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationsFromPair", "[", 
    RowBox[{"keys_List", ",", " ", "vals_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", " ", "\[Rule]", " ", "#2"}], ")"}], " ", "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"keys", ",", " ", "vals"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RangeMakeAround", "[", 
    RowBox[{"num_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"num", " ", "-", " ", "delta"}], ",", " ", 
     RowBox[{"num", " ", "+", " ", "delta"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Integer", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Rational", "]"}], " ", ":=", " ", 
   RowBox[{"N", "[", "number", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Real", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_List", "]"}], " ", ":=", " ", 
   RowBox[{"number", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Quantity", "]"}], " ", ":=", " ", 
   RowBox[{"QuantityMagnitude", "[", "number", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_", "]"}], " ", ":=", " ", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{
    "numbers_List", ",", " ", "numberNewSmallest_", ",", " ", 
     "numberNewLargest_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", " ", "*", " ", 
         RowBox[{"(", 
          RowBox[{"numberNewLargest", " ", "-", " ", "numberNewSmallest"}], 
          ")"}]}], " ", "+", " ", "numberNewSmallest"}], ")"}], " ", "&"}], 
     ",", " ", 
     RowBox[{"Rescale", "[", "numbers", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RescaleIntoInterval", "[", "numbers_List", "]"}], " ", ":=", " ", 
    RowBox[{"RescaleIntoInterval", "[", 
     RowBox[{"numbers", ",", " ", "0.5", ",", " ", "0.95"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsFindInImage", "[", 
    RowBox[{"imgPixels_List", ",", " ", "colors_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Position", "[", 
          RowBox[{"imgPixels", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], ",",
        " ", "colors"}], "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "redVals_List", ",", " ", "greenVals_List", ",", " ", "blueVals_List"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{"redVals", ",", " ", "greenVals", ",", " ", "blueVals", ",", " ", 
      RowBox[{"{", " ", "255", " ", "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "red_Integer", ",", " ", "green_Integer", ",", " ", "blue_Integer", ",", 
     " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"red", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"green", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"blue", ",", " ", "delta"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey", ",", " ", "grey", ",", " ", "grey", ",", " ", "delta"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorMake", "[", 
    RowBox[{"r_", ",", "g_", ",", "b_"}], "]"}], " ", ":=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"r", "/", "255"}], ",", " ", 
     RowBox[{"g", "/", "255"}], ",", " ", 
     RowBox[{"b", "/", "255"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ColorMake", "[", "parts_List", "]"}], " ", ":=", " ", 
    RowBox[{"ColorMake", "[", 
     RowBox[{
      RowBox[{"parts", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{"parts", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{
      "parts", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EqualizeImages", "[", "imgs_List", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"smallestW", ",", " ", "smallestH", ",", " ", "sizes"}], "}"}], 
     ",", "\n", "\t", 
     RowBox[{
      RowBox[{"sizes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageDimensions", ",", " ", "imgs"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"smallestW", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"smallestH", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ImageCrop", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"smallestW", ",", " ", "smallestH"}], "}"}]}], "]"}], " ",
          "&"}], ",", " ", "imgs"}], "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapReconstructFromImages", "[", "imgs_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cntSide", ",", " ", "imgsTable"}], "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"cntSide", " ", "=", " ", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Length", "[", "imgs", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgsTable", " ", "=", " ", 
       RowBox[{"ArrayReshape", "[", 
        RowBox[{"imgs", ",", " ", 
         RowBox[{"{", 
          RowBox[{"cntSide", ",", "cntSide"}], "}"}]}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"ImageAssemble", "[", "imgsTable", "]"}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
   3.771102595812048*^9}, 3.771102630105879*^9, {3.771102663030601*^9, 
   3.771102675942957*^9}, {3.771102819347427*^9, 3.771102841217803*^9}, {
   3.7711492274460793`*^9, 3.771149259526984*^9}, {3.7711494968232927`*^9, 
   3.771149500439412*^9}, 3.7711495391273327`*^9, {3.77125210524156*^9, 
   3.7712521814760447`*^9}, {3.771252249246994*^9, 3.771252279427402*^9}, {
   3.7712523472315397`*^9, 3.771252349510272*^9}, {3.7713308537177467`*^9, 
   3.771330854042081*^9}, {3.771351310412696*^9, 3.771351311048148*^9}, {
   3.771352532684317*^9, 3.771352549949391*^9}, {3.771356337886156*^9, 
   3.771356338115733*^9}, {3.7714467936655684`*^9, 3.7714468327252817`*^9}, {
   3.7714477080950613`*^9, 3.771447709078145*^9}, {3.771447785236917*^9, 
   3.771447786651771*^9}, {3.771447949999405*^9, 3.7714479501103563`*^9}, {
   3.771453850679749*^9, 3.771453858089093*^9}, {3.7714943916639833`*^9, 
   3.771494395261273*^9}, {3.771603230447397*^9, 3.771603276204214*^9}, {
   3.77162270325916*^9, 3.771622703769059*^9}, {3.7716720354592876`*^9, 
   3.7716720953478203`*^9}, {3.771672415887467*^9, 3.771672441238475*^9}, {
   3.771672951222991*^9, 3.771672957381604*^9}, {3.7716730265330887`*^9, 
   3.771673027357678*^9}, {3.771673226849732*^9, 3.771673231141677*^9}, {
   3.771673519358794*^9, 3.7716736310995073`*^9}, {3.771691685199237*^9, 
   3.771691693779365*^9}, {3.771691831795059*^9, 3.771691867469315*^9}, {
   3.771691971381495*^9, 3.77169197881502*^9}, {3.771692016649796*^9, 
   3.771692046537582*^9}, {3.771692397520424*^9, 3.7716923999690723`*^9}, {
   3.771692660468504*^9, 3.771692762738967*^9}, {3.7716928504906797`*^9, 
   3.7716928766927843`*^9}, {3.771693062356737*^9, 3.771693078588234*^9}, {
   3.771693618478825*^9, 3.771693675965167*^9}, {3.771693772415101*^9, 
   3.771693808300001*^9}, {3.7716938646087313`*^9, 3.7716938728069553`*^9}, {
   3.7716939585609303`*^9, 3.771693982168026*^9}, {3.771695280962672*^9, 
   3.771695307549501*^9}, {3.771710127577561*^9, 3.771710130111709*^9}, {
   3.771711669963105*^9, 3.771711677464121*^9}, 
   3.771712581117927*^9},ExpressionUUID->"701bc516-4588-4409-bd02-\
62356ee10634"]
}, Closed]],

Cell[CellGroupData[{

Cell["General Constants", "Subsection",
 CellChangeTimes->{{3.771712641920773*^9, 
  3.7717126676907597`*^9}},ExpressionUUID->"c7b8b850-ca31-4d36-a026-\
92bed76431d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "SetDirectory", "[", 
   "\"\</Users/ashvardanian/CodeMine/WolframSummer19/\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathTweets", " ", "=", " ", "\"\<Data/Tweets\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathFeatures", " ", "=", " ", "\"\<Data/Features\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathMaps", " ", "=", " ", "\"\<Data/Maps\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "constantPathSatellites", " ", "=", " ", "\"\<Data/Satellites\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityDiameterKM", " ", "=", " ", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityGridSize", " ", "=", " ", "5"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantShareTraining", " ", "=", " ", "0.9"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantColorsPerPurpose", " ", "=", " ", 
   RowBox[{"Association", "[", 
    RowBox[{"{", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Street\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"254", ",", "254", ",", "254"}], "}"}], "}"}]}], ",", " ", 
      "\n", "\t", 
      RowBox[{"\"\<Highway\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"232", ",", "208", ",", "174"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"227", ",", "160", ",", "54"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"242", ",", "196", ",", "99"}], "}"}]}], "}"}]}], ",", "\n",
       "\t", 
      RowBox[{"\"\<Water\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"158", ",", "197", ",", "226"}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Park\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"201", ",", "224", ",", "185"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"196", ",", "211", ",", "192"}], "}"}]}], 
        RowBox[{"(*", 
         RowBox[{"walking", " ", "trails"}], "*)"}], "}"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<Train\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"148", ",", "148", ",", "148"}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Interesting\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"251", ",", "248", ",", "228"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"240", ",", "236", ",", "228"}], "}"}]}], 
        RowBox[{"(*", "sports", "*)"}], "}"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<Building\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"232", ",", "226", ",", "212"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"235", ",", "233", ",", "231"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"192", ",", "186", ",", "175"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"207", ",", "200", ",", "188"}], "}"}]}], "}"}]}], ",", 
      "\n", "\t", 
      RowBox[{"\"\<Annotations\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"69", ",", "69", ",", "69"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"117", ",", "117", ",", "117"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"63", ",", "63", ",", "63"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"88", ",", "88", ",", "88"}], "}"}]}], "}"}]}]}], "\n", 
     "}"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
   3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102789628256*^9}, {
   3.7711028769656677`*^9, 3.77110295393472*^9}, {3.771165070091775*^9, 
   3.7711650854638367`*^9}, 3.771165246245709*^9, {3.771198271950489*^9, 
   3.771198276482582*^9}, {3.771254152194386*^9, 3.771254159439356*^9}, {
   3.771255141608494*^9, 3.771255185697196*^9}, {3.7712555473089733`*^9, 
   3.771255547533888*^9}, {3.771255652408498*^9, 3.771255664396275*^9}, {
   3.771255707871517*^9, 3.7712557437705793`*^9}, {3.7713263576960297`*^9, 
   3.771326502260768*^9}, {3.771620294508806*^9, 3.7716203042475853`*^9}, {
   3.771622750063384*^9, 3.771622769400876*^9}, {3.7716233651292887`*^9, 
   3.7716234318215*^9}, {3.771670567290987*^9, 3.7716705676824827`*^9}, {
   3.771670646327095*^9, 3.77167064676192*^9}, {3.7716952524589643`*^9, 
   3.7716952557287903`*^9}, {3.771695648533807*^9, 3.7716956553990297`*^9}, {
   3.771696254457182*^9, 3.771696265487063*^9}, {3.771709397551697*^9, 
   3.7717094414883327`*^9}, 
   3.771712671575593*^9},ExpressionUUID->"acdb5163-89af-4011-8610-\
a985ea22ddfc"]
}, Closed]],

Cell[CellGroupData[{

Cell["City Lists", "Subsection",
 CellChangeTimes->{{3.771712714962381*^9, 
  3.77171272190005*^9}},ExpressionUUID->"04bf9ceb-4ddc-4f18-bf62-\
54860b3d9d2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\n", 
   RowBox[{
    RowBox[{"Ordered", " ", "list", " ", "of", " ", 
     RowBox[{"cities", ":", " ", "https", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{"www", ".", "timeout", ".", "com"}], "/", "things"}], "-", "to",
      "-", 
     RowBox[{"do", "/", "best"}], "-", "cities", "-", "in", "-", "the", "-", 
     RowBox[{
     "world", " ", "\n", "Other", " ", "lists", " ", "can", " ", "be", " ", 
      "found", " ", "in", " ", 
      RowBox[{"\"\<CitiesLists.nb\>\"", "."}]}]}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"CityRowParse", "[", "cityRow_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Interpreter", "[", "\"\<City\>\"", "]"}], "[", 
        RowBox[{"StringJoin", "[", 
         RowBox[{
          RowBox[{
          "cityRow", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
          ",", " ", "\"\<, \>\"", ",", " ", 
          RowBox[{
          "cityRow", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}],
          "]"}], "]"}], ",", " ", 
       RowBox[{
       "cityRow", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      " ", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"citiesWRanks", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"CityRowParse", ",", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{
         "Import", "[", "\"\<Data/Inputs/CitiesMercer2019.csv\>\"", "]"}], 
         ",", " ", "1"}], "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"citiesPopular", " ", "=", " ", 
     RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"citiesPositivness", " ", "=", " ", 
     RowBox[{"RescaleIntoInterval", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"N", "[", 
           RowBox[{"1", "/", "#"}], "]"}], ")"}], " ", "&"}], ",", " ", 
        RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityName", "[", "city_", "]"}], " ", ":=", " ", 
     RowBox[{"EntityValue", "[", 
      RowBox[{"city", ",", " ", "\"\<Name\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityBoundsAround", "[", "cityCenter_", "]"}], " ", ":=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"GeoBoundingBox", "[", 
       RowBox[{"cityCenter", ",", " ", 
        RowBox[{"Quantity", "[", 
         RowBox[{"constantCityDiameterKM", ",", " ", "\"\<Kilometers\>\""}], 
         "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityBounds", "[", "city_", "]"}], " ", ":=", " ", 
     RowBox[{"CityBoundsAround", "[", 
      RowBox[{"GeoCenter", "[", "city", "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory_String", ",", " ", "city_String"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"{", 
       RowBox[{
       "directory", ",", " ", "\"\</\>\"", ",", " ", "city", ",", " ", 
        "\"\<.mx\>\""}], "}"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory_String", ",", " ", "city_"}], "]"}], " ", ":=", " ", 
     
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory", ",", " ", 
       RowBox[{"CityName", "[", "city", "]"}]}], "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
   3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102789628256*^9}, {
   3.7711028769656677`*^9, 3.77110295393472*^9}, {3.771165070091775*^9, 
   3.7711650854638367`*^9}, 3.771165246245709*^9, {3.771198271950489*^9, 
   3.771198276482582*^9}, {3.771254152194386*^9, 3.771254159439356*^9}, {
   3.771255141608494*^9, 3.771255185697196*^9}, {3.7712555473089733`*^9, 
   3.771255547533888*^9}, {3.771255652408498*^9, 3.771255664396275*^9}, {
   3.771255707871517*^9, 3.7712557437705793`*^9}, {3.7713263576960297`*^9, 
   3.771326502260768*^9}, {3.771620294508806*^9, 3.7716203042475853`*^9}, {
   3.771622750063384*^9, 3.771622769400876*^9}, {3.7716233651292887`*^9, 
   3.7716234318215*^9}, {3.771670567290987*^9, 3.7716705676824827`*^9}, {
   3.771670646327095*^9, 3.77167064676192*^9}, {3.7716952524589643`*^9, 
   3.7716952557287903`*^9}, {3.771695648533807*^9, 3.7716956553990297`*^9}, {
   3.771696254457182*^9, 3.771696265487063*^9}, {3.771709397551697*^9, 
   3.7717094414883327`*^9}, 3.771712671575593*^9, {3.771712948031887*^9, 
   3.7717129487907352`*^9}},ExpressionUUID->"ec5fa737-edff-4f2b-bcf0-\
57aa61e8bf78"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Crawling", "Section",
 CellChangeTimes->{{3.771712752087246*^9, 3.771712759386382*^9}, {
  3.7717131448835773`*^9, 
  3.771713147912314*^9}},ExpressionUUID->"63985375-fa23-4d09-a7dc-\
b6747739c560"],

Cell[CellGroupData[{

Cell["Twitter", "Subsection",
 CellChangeTimes->{
  3.771713150936057*^9},ExpressionUUID->"fa1920ae-8e54-45ec-83bd-\
bd9f5d5988ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"tw", "[", 
     RowBox[{"\"\<TweetSearch\>\"", ",", " ", 
      RowBox[{"\"\<Query\>\"", "\[Rule]", 
       RowBox[{"CityName", "[", "city", "]"}]}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractTweets", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{
  3.771103114668171*^9, {3.771103336765457*^9, 3.771103338095792*^9}, {
   3.771103900064671*^9, 3.771103953970173*^9}, {3.771104192105047*^9, 
   3.771104206425777*^9}, {3.771104623555089*^9, 3.771104634861293*^9}, {
   3.771104668974058*^9, 3.771104690035036*^9}, {3.7711047224932117`*^9, 
   3.771104799500358*^9}, {3.771104931900667*^9, 3.771104987366683*^9}, {
   3.771105022012245*^9, 3.771105218274828*^9}, 3.771105264350816*^9, {
   3.771150962719131*^9, 3.771150964531691*^9}, {3.771151012996887*^9, 
   3.7711510150931873`*^9}, {3.7711511401199427`*^9, 3.771151202612028*^9}, 
   3.771162598734274*^9, 3.77119823213085*^9, {3.7711984660326853`*^9, 
   3.771198471548006*^9}, {3.771255195206545*^9, 3.771255221452676*^9}, {
   3.77133068176521*^9, 3.771330710916729*^9}, {3.771330744590096*^9, 
   3.771330840917815*^9}, {3.771364487765592*^9, 3.771364489560156*^9}, {
   3.771448657237996*^9, 3.771448658832782*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"]
}, Closed]],

Cell[CellGroupData[{

Cell["Maps", "Subsection",
 CellChangeTimes->{{3.7717127706024*^9, 3.7717127876152363`*^9}, 
   3.771713160783309*^9},ExpressionUUID->"ee1bdf2d-8e5c-4019-8ee5-\
eb9655578edf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapsGrid", "[", 
    RowBox[{"city_", ",", " ", "cityCenter_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "gridLats", ",", " ", "gridLons", ",", " ", 
       "cityParts", ",", " ", "MakeCell"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"CityBoundsAround", "[", "cityCenter", "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLats", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLons", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"MakeCell", "[", 
        RowBox[{"i_Integer", ",", " ", "j_Integer"}], "]"}], " ", ":=", " ", 
       RowBox[{"GeoRange", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLats", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLats", "\[LeftDoubleBracket]", 
            RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLons", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLons", "\[LeftDoubleBracket]", 
            RowBox[{"j", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}]}], 
        "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"MakeCell", "[", 
           RowBox[{"i", ",", " ", "j"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "constantCityGridSize"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "constantCityGridSize"}], "}"}]}], "]"}], 
        "]"}]}], ";", "\n", "\t", "cityParts"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityParts", ",", " ", "cityCenter", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", "coords_", "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", 
            RowBox[{"GeoRange", "\[Rule]", "coordsAsList"}], "]"}], "]"}]}]}],
         "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageForCell", ",", " ", "cityParts"}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractMaps", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771255003628858*^9, 3.771255019385186*^9}, {
   3.771255054782916*^9, 3.7712550927175417`*^9}, {3.771255236405387*^9, 
   3.771255264912755*^9}, 3.771255515444641*^9, 3.771255703381096*^9, {
   3.771255752389967*^9, 3.771255777900586*^9}, {3.771255850554541*^9, 
   3.771255853952383*^9}, {3.771329317484642*^9, 3.771329333383959*^9}, {
   3.771329577085322*^9, 3.771329588111939*^9}, 3.7713311687251*^9, {
   3.771585825750794*^9, 3.771585835461856*^9}, {3.7715858909152803`*^9, 
   3.771585900586632*^9}, 3.771585932346272*^9, {3.7715860171344767`*^9, 
   3.7715860713139353`*^9}, {3.771586365243346*^9, 3.771586405924994*^9}, {
   3.771603548460307*^9, 3.771603652291589*^9}, {3.771603725684588*^9, 
   3.771603728770176*^9}, {3.771604534741798*^9, 3.7716046078725767`*^9}, {
   3.771605072996415*^9, 3.771605073369802*^9}, {3.7716051056407633`*^9, 
   3.771605106401538*^9}, {3.771623340038671*^9, 3.7716233434193363`*^9}, {
   3.771623510161605*^9, 3.771623529899592*^9}, {3.771673674224918*^9, 
   3.7716736753418007`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"]
}, Closed]],

Cell[CellGroupData[{

Cell["Satellites", "Subsection",
 CellChangeTimes->{{3.771712791498201*^9, 3.7717127960468273`*^9}, 
   3.771713163753415*^9},ExpressionUUID->"9f81765d-48a1-412b-8f34-\
7c63eeb70cd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityCenter", ",", " ", "cityParts", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", 
        RowBox[{"coords_", ",", " ", "rotation_Real"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", "\n", "                ", 
            RowBox[{
             RowBox[{"GeoRange", " ", "\[Rule]", " ", "coordsAsList"}], ",", 
             " ", "\n", "                ", 
             RowBox[{"GeoProjection", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<ObliqueMercator\>\"", ",", " ", 
                RowBox[{"\"\<Centering\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{"cityCenter", ",", " ", "rotation"}], "}"}]}]}], 
               "}"}]}], ",", "\n", "                ", 
             RowBox[{"GeoBackground", " ", "\[Rule]", " ", 
              RowBox[{"GeoStyling", "[", "\"\<StreetMap\>\"", "]"}]}], ",", 
             " ", "\n", "                ", 
             RowBox[{
             "GeoServer", " ", "\[Rule]", " ", 
              "\"\<http://mt0.google.com/vt/lyrs=s,h&x=`2`&y=`3`&z=`1`\>\""}]}\
], "]"}], "]"}]}]}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Join", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "30.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "45.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "90.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}]}], "\n", "\t", "]"}], "]"}]}]}], "\n", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractSatellites", "[", "city", "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.7716037334248238`*^9, 3.771603763020352*^9}, {
   3.771603881125678*^9, 3.771603882562314*^9}, {3.771604351561441*^9, 
   3.771604362272173*^9}, {3.771604462858472*^9, 3.771604465769896*^9}, {
   3.771605111366535*^9, 3.7716051235802097`*^9}, {3.771618696238031*^9, 
   3.771618737002274*^9}, {3.7716190984180727`*^9, 3.771619167787113*^9}, {
   3.771619230094412*^9, 3.7716193140816317`*^9}, {3.7716194420009613`*^9, 
   3.7716194491737347`*^9}, 3.771619497044444*^9, {3.771619699793701*^9, 
   3.771619711850318*^9}, {3.7716203262336597`*^9, 3.771620356834854*^9}, {
   3.771673684187669*^9, 3.771673685879765*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"]
}, Closed]],

Cell[CellGroupData[{

Cell["Features Extraction", "Subsection",
 CellChangeTimes->{{3.771712806183819*^9, 
  3.77171284384868*^9}},ExpressionUUID->"1b2b8bb4-d2fd-410a-8140-\
48381fbfbec1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractListFeatures", "[", 
    RowBox[{"object_", ",", " ", "props_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"{", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Normal", "[", 
           RowBox[{"object", "[", "#", "]"}], "]"}]}], "}"}], ")"}], " ", 
       "&"}], ",", " ", "props"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCityStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "props", "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\"\<Elevation\>\"", ",", 
         "\"\<MagneticFieldStrength\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", 
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"city", ",", " ", "props"}], "]"}]}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCountryStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "props", ",", " ", "country", ",", " ", "\n", "\t\t", 
       "countryPopulation", ",", " ", "countryArea", ",", " ", "\n", "\t\t", 
       "propsToNormalizeWPopulation", ",", " ", "propsToNormalizeWArea", ",", 
       "\n", "\t\t", "pairsList"}], "\n", "\t", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"country", " ", "=", " ", 
       RowBox[{"city", "[", "\"\<Country\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryArea", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Area\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryPopulation", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Population\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\n", "\t\t", "\"\<Area\>\"", ",", 
         "\"\<WaterArea\>\"", ",", "\"\<BoundaryLength\>\"", ",", 
         "\"\<CoastlineLength\>\"", ",", "\"\<WaterwayLength\>\"", ",", "\n", 
         "\t\t", "\"\<ContributingFamilyWorkers\>\"", ",", "\n", "\t\t", 
         "\"\<GDPPerPersonEmployed\>\"", ",", "\"\<GiniIndex\>\"", ",", 
         "\"\<InterestRateSpread\>\"", ",", "\"\<PovertyHeadcount\>\"", ",", 
         "\"\<UnemploymentRate\>\"", ",", "\n", "\t\t", "\"\<BookTitles\>\"", 
         ",", "\"\<IlliteracyFraction\>\"", ",", "\n", "\t\t", "\n", "\t\t", 
         "\"\<MaleLifeExpectancy\>\"", ",", "\"\<MaleMedianAge\>\"", ",", 
         "\"\<FemaleLifeExpectancy\>\"", ",", "\"\<FemaleMedianAge\>\"", ",", 
         "\n", "\t\t", "\"\<HospitalBedsPer10000Population\>\""}], "\n", "\t",
         "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWArea", " ", "=", " ", 
       RowBox[{"{", " ", "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWPopulation", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Army\>\"", ",", "\"\<HIVAIDSPopulation\>\"", ",", 
         "\"\<ElectricityTotal\>\"", ",", "\n", "\t\t", 
         "\"\<ChildPopulation\>\"", ",", "\"\<ElderlyPopulation\>\"", ",", 
         "\"\<AnnualMarriages\>\"", ",", "\"\<AnnualDivorces\>\"", ",", "\n", 
         "\t\t", "\"\<NetIncomeFromAbroad\>\"", ",", "\"\<GovernmentDebt\>\"",
          ",", "\"\<GovernmentSurplus\>\"", ",", "\"\<ImportsValue\>\"", ",", 
         "\"\<ExportsValue\>\"", ",", "\n", "\t\t", "\"\<LeisureArrivals\>\"",
          ",", "\"\<NewspaperTitles\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"country", ",", " ", "props"}], "]"}], ",", " ", "\n", 
         "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryArea"}]}], "}"}], ")"}], " ", "&"}], 
           ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWArea"}], "]"}]}], 
          "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryPopulation"}]}], "}"}], ")"}], " ", 
            "&"}], ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWPopulation"}], 
            "]"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Country\>\"", ",", " ", 
                RowBox[{
                "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
                "}"}], "]"}], ",", " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}], ")"}], " ", "&"}], ",", " ", "pairsList"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", "pairsList"}], "]"}], 
       "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromPixels", "[", "city_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "imgQuantized", ",", " ", "pixelsList", ",", " ", "freqOfColors", ",", 
       " ", "imgMerged"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"imgMerged", " ", "=", " ", 
       RowBox[{"MapReconstructFromImages", "[", 
        RowBox[{"ImportMaps", "[", "city", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgQuantized", " ", "=", " ", 
       RowBox[{"RemoveAlphaChannel", "[", 
        RowBox[{"ColorQuantize", "[", 
         RowBox[{"imgMerged", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"ColorMake", ",", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Values", "[", "constantColorsPerPurpose", "]"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "2"}], "}"}]}], "]"}]}], "]"}]}], "]"}],
         "]"}]}], ";", "\n", "\t", 
      RowBox[{"pixelsList", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"ImageData", "[", 
          RowBox[{"imgQuantized", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ",
          "1"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"freqOfColors", " ", "=", " ", 
       RowBox[{"AssociationMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"ColorsFindInImage", "[", 
              RowBox[{"pixelsList", ",", " ", 
               RowBox[{"constantColorsPerPurpose", "[", "#", "]"}]}], "]"}], 
             "]"}], " ", "/", " ", 
            RowBox[{"Length", "[", "pixelsList", "]"}]}], ")"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"Keys", "[", "constantColorsPerPurpose", "]"}]}], "]"}]}], 
      ";", "\n", "\t", "freqOfColors"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromOSM", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "osmData", ",", " ", "osmNodes", ",", " ", 
       "osmWays", ",", " ", "parsedWays", ",", " ", "graphWays"}], "}"}], ",",
      "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"GeoBoundingBox", "[", 
        RowBox[{
         RowBox[{"GeoPosition", "[", "city", "]"}], ",", 
         RowBox[{"Quantity", "[", 
          RowBox[{"0.5", ",", " ", "\"\<Kilometers\>\""}], "]"}]}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"osmData", " ", "=", " ", 
       RowBox[{
        RowBox[{"ResourceFunction", "[", "\"\<OSMImport\>\"", "]"}], "[", 
        "cityBounds", "]"}]}], ";", "\n", "\t", 
      RowBox[{"osmNodes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"#", ",", " ", "\"\<Position\>\""}], "]"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"osmData", "[", "\"\<Nodes\>\"", "]"}]}], "]"}]}], ";", "\n",
       "\t", 
      RowBox[{"osmWays", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"osmNodes", ",", " ", 
            RowBox[{"Lookup", "[", 
             RowBox[{"#", ",", " ", "\"\<Nodes\>\""}], "]"}]}], "]"}], " ", 
          "&"}], ",", " ", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"osmData", "[", "\"\<Ways\>\"", "]"}], ",", " ", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Keys", "[", "#Tags", "]"}], ",", "\"\<highway\>\""}], 
             "]"}], " ", "&"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"parsedWays", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"UndirectedEdge", "@@@", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", "2", ",", "1"}], "]"}]}], " ", "&"}], ",", " ", 
          RowBox[{"Values", "[", "osmWays", "]"}]}], "]"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"graphWays", " ", "=", " ", 
       RowBox[{"Graph", "[", "parsedWays", "]"}]}], ";", "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
         RowBox[{"\"\<MeanNeighborDegree\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"MeanNeighborDegree", "[", "graphWays", "]"}], "]"}]}], 
         ",", "\n", "\t\t", 
         RowBox[{"\"\<DegreeCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"DegreeCentrality", "[", "graphWays", "]"}], "]"}]}], ",", 
         "\n", "\t\t", 
         RowBox[{"\"\<ClosenessCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"ClosenessCentrality", "[", "graphWays", "]"}], "]"}]}]}], 
        "\n", "\t", "}"}], "]"}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
   3.771101738955223*^9}, {3.771102348054689*^9, 3.771102377179801*^9}, {
   3.771151297276696*^9, 3.7711513406172113`*^9}, {3.771165996818695*^9, 
   3.771166090601877*^9}, {3.771166173108506*^9, 3.771166257114065*^9}, {
   3.7711663793332567`*^9, 3.7711664011443663`*^9}, {3.771166487336176*^9, 
   3.771166493613332*^9}, {3.771166547031842*^9, 3.771166548165827*^9}, {
   3.771166600953315*^9, 3.771166683297266*^9}, {3.7711667286702223`*^9, 
   3.771166759409555*^9}, {3.771166813508647*^9, 3.77116686156734*^9}, {
   3.771166913675415*^9, 3.771166915031599*^9}, {3.771167002660701*^9, 
   3.7711670324128647`*^9}, {3.771167084473464*^9, 3.771167085469692*^9}, {
   3.771167137989037*^9, 3.77116714854849*^9}, {3.7711966071075907`*^9, 
   3.771196664810173*^9}, {3.771196768138517*^9, 3.771196768956388*^9}, {
   3.7711972557665977`*^9, 3.771197296014269*^9}, {3.771197339836514*^9, 
   3.7711973411966457`*^9}, {3.771197432374444*^9, 3.771197524940136*^9}, {
   3.7711976763793087`*^9, 3.771197702854021*^9}, {3.771197803674632*^9, 
   3.7711979369634132`*^9}, {3.771197967398962*^9, 3.7711980033990593`*^9}, {
   3.7712540825875387`*^9, 3.7712541780295067`*^9}, {3.771254335770904*^9, 
   3.771254359501605*^9}, 3.771254530905891*^9, {3.771254785393812*^9, 
   3.771254808272388*^9}, {3.771255275230245*^9, 3.7712553239167128`*^9}, 
   3.771255878153738*^9, {3.771329391567483*^9, 3.771329411248989*^9}, {
   3.771329565046358*^9, 3.771329572203886*^9}, {3.771496168448968*^9, 
   3.7714962036277237`*^9}, {3.7714962447300997`*^9, 3.771496245963435*^9}, {
   3.771496311404038*^9, 3.771496321537601*^9}, {3.771496373822885*^9, 
   3.7714965489266853`*^9}, {3.771496600537525*^9, 3.771496657002174*^9}, {
   3.771496740056799*^9, 3.7714967412281446`*^9}, {3.7714967773729877`*^9, 
   3.771496816005433*^9}, {3.7714968682908154`*^9, 3.7714968697917128`*^9}, {
   3.771496918369812*^9, 3.7714969345000267`*^9}, {3.77149704823771*^9, 
   3.771497049699279*^9}, {3.771531573462158*^9, 3.7715316783804092`*^9}, {
   3.7715317921088057`*^9, 3.7715319320398483`*^9}, {3.771532053822135*^9, 
   3.771532068932446*^9}, {3.77160369579909*^9, 3.771603699299447*^9}, {
   3.771622717254788*^9, 3.771622744597303*^9}, {3.771622792645124*^9, 
   3.771622866807831*^9}, {3.771622943162854*^9, 3.771622977854175*^9}, {
   3.771623095313883*^9, 3.7716231559729*^9}, 3.771626854648131*^9, {
   3.7716699227396383`*^9, 3.771670136223054*^9}, {3.771670237325835*^9, 
   3.7716702494329853`*^9}, 3.771671175991432*^9, {3.771672127947584*^9, 
   3.771672150478457*^9}, {3.771672230501935*^9, 3.771672268757731*^9}, {
   3.771672315778051*^9, 3.771672366662242*^9}, {3.771672450181912*^9, 
   3.771672518746067*^9}, {3.7716728138915873`*^9, 3.7716728561259413`*^9}, {
   3.771673120085889*^9, 3.7716731965682497`*^9}, 3.771673311335342*^9, {
   3.7716733760174026`*^9, 3.7716734371914263`*^9}, 3.7716736642268753`*^9, {
   3.771673816967555*^9, 3.7716738200197077`*^9}, 3.7716738956763563`*^9, {
   3.771692271635406*^9, 3.771692289122738*^9}, {3.771692328660396*^9, 
   3.771692350779047*^9}, {3.771692435092806*^9, 3.771692466505422*^9}, {
   3.771692537906076*^9, 3.771692624393091*^9}, {3.771692775661364*^9, 
   3.771692789217929*^9}, {3.771692830199643*^9, 3.771692844244501*^9}, {
   3.7716929864537773`*^9, 3.771692987704947*^9}, {3.771693176982716*^9, 
   3.771693223617131*^9}, 3.771693304109569*^9, {3.771693405997867*^9, 
   3.771693411843594*^9}, {3.7716934485301933`*^9, 3.771693487163294*^9}, {
   3.771693563974257*^9, 3.771693605802772*^9}, {3.771693686709693*^9, 
   3.7716936883943577`*^9}, {3.771693815631466*^9, 3.771693817772654*^9}, {
   3.7716940022647877`*^9, 3.771694008168648*^9}, {3.771695318872908*^9, 
   3.7716953200695953`*^9}, {3.771713377771394*^9, 
   3.771713378574774*^9}},ExpressionUUID->"ce916f56-0286-4291-9303-\
f08a2c807b22"]
}, Closed]],

Cell[CellGroupData[{

Cell["Features Postprocessing", "Subsection",
 CellChangeTimes->{{3.771713394794116*^9, 
  3.7717134031528187`*^9}},ExpressionUUID->"fcac805f-54fc-4ed9-8bb5-\
df26b8e9ddb1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Merge", "[", 
    RowBox[{
     RowBox[{"{", " ", "\n", "\t", 
      RowBox[{
       RowBox[{"ExtractCityStatsFeatures", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractCountryStatsFeatures", "[", "city", "]"}], ",", " ", 
       "\n", "\t", 
       RowBox[{"ExtractMapFeaturesFromPixels", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractMapFeaturesFromOSM", "[", "city", "]"}]}], "\n", "\t", 
      "}"}], ",", " ", "Total"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], ",", " ", 
     RowBox[{"ExtractAllFeatures", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeaturesClean", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"raw", ",", " ", "keys", ",", " ", "vals"}], "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"raw", " ", "=", " ", 
       RowBox[{"ImportAllFeatures", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"keys", " ", "=", " ", 
       RowBox[{"Keys", "[", "raw", "]"}]}], ";", "\n", "\t", 
      RowBox[{"vals", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"NomalizeNumber", "[", "#", "]"}], "]"}], " ", "&"}], ",", 
         " ", 
         RowBox[{"Values", "[", "raw", "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"keys", ",", " ", "vals"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NormalizeFeatures", "[", "rowsPerSample_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rowsPerFeature", ",", " ", "rowsPerFeatureNormalized"}], "}"}],
      ",", "\n", "\t", 
     RowBox[{
      RowBox[{"rowsPerFeature", " ", "=", " ", 
       RowBox[{"Transpose", "[", "rowsPerSample", "]"}]}], ";", "\n", "\t", 
      RowBox[{"rowsPerFeatureNormalized", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"RescaleIntoInterval", ",", " ", "rowsPerFeature"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Transpose", "[", "rowsPerFeatureNormalized", "]"}]}]}], "\n", 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
   3.771101738955223*^9}, {3.771102348054689*^9, 3.771102377179801*^9}, {
   3.771151297276696*^9, 3.7711513406172113`*^9}, {3.771165996818695*^9, 
   3.771166090601877*^9}, {3.771166173108506*^9, 3.771166257114065*^9}, {
   3.7711663793332567`*^9, 3.7711664011443663`*^9}, {3.771166487336176*^9, 
   3.771166493613332*^9}, {3.771166547031842*^9, 3.771166548165827*^9}, {
   3.771166600953315*^9, 3.771166683297266*^9}, {3.7711667286702223`*^9, 
   3.771166759409555*^9}, {3.771166813508647*^9, 3.77116686156734*^9}, {
   3.771166913675415*^9, 3.771166915031599*^9}, {3.771167002660701*^9, 
   3.7711670324128647`*^9}, {3.771167084473464*^9, 3.771167085469692*^9}, {
   3.771167137989037*^9, 3.77116714854849*^9}, {3.7711966071075907`*^9, 
   3.771196664810173*^9}, {3.771196768138517*^9, 3.771196768956388*^9}, {
   3.7711972557665977`*^9, 3.771197296014269*^9}, {3.771197339836514*^9, 
   3.7711973411966457`*^9}, {3.771197432374444*^9, 3.771197524940136*^9}, {
   3.7711976763793087`*^9, 3.771197702854021*^9}, {3.771197803674632*^9, 
   3.7711979369634132`*^9}, {3.771197967398962*^9, 3.7711980033990593`*^9}, {
   3.7712540825875387`*^9, 3.7712541780295067`*^9}, {3.771254335770904*^9, 
   3.771254359501605*^9}, 3.771254530905891*^9, {3.771254785393812*^9, 
   3.771254808272388*^9}, {3.771255275230245*^9, 3.7712553239167128`*^9}, 
   3.771255878153738*^9, {3.771329391567483*^9, 3.771329411248989*^9}, {
   3.771329565046358*^9, 3.771329572203886*^9}, {3.771496168448968*^9, 
   3.7714962036277237`*^9}, {3.7714962447300997`*^9, 3.771496245963435*^9}, {
   3.771496311404038*^9, 3.771496321537601*^9}, {3.771496373822885*^9, 
   3.7714965489266853`*^9}, {3.771496600537525*^9, 3.771496657002174*^9}, {
   3.771496740056799*^9, 3.7714967412281446`*^9}, {3.7714967773729877`*^9, 
   3.771496816005433*^9}, {3.7714968682908154`*^9, 3.7714968697917128`*^9}, {
   3.771496918369812*^9, 3.7714969345000267`*^9}, {3.77149704823771*^9, 
   3.771497049699279*^9}, {3.771531573462158*^9, 3.7715316783804092`*^9}, {
   3.7715317921088057`*^9, 3.7715319320398483`*^9}, {3.771532053822135*^9, 
   3.771532068932446*^9}, {3.77160369579909*^9, 3.771603699299447*^9}, {
   3.771622717254788*^9, 3.771622744597303*^9}, {3.771622792645124*^9, 
   3.771622866807831*^9}, {3.771622943162854*^9, 3.771622977854175*^9}, {
   3.771623095313883*^9, 3.7716231559729*^9}, 3.771626854648131*^9, {
   3.7716699227396383`*^9, 3.771670136223054*^9}, {3.771670237325835*^9, 
   3.7716702494329853`*^9}, 3.771671175991432*^9, {3.771672127947584*^9, 
   3.771672150478457*^9}, {3.771672230501935*^9, 3.771672268757731*^9}, {
   3.771672315778051*^9, 3.771672366662242*^9}, {3.771672450181912*^9, 
   3.771672518746067*^9}, {3.7716728138915873`*^9, 3.7716728561259413`*^9}, {
   3.771673120085889*^9, 3.7716731965682497`*^9}, 3.771673311335342*^9, {
   3.7716733760174026`*^9, 3.7716734371914263`*^9}, 3.7716736642268753`*^9, {
   3.771673816967555*^9, 3.7716738200197077`*^9}, 3.7716738956763563`*^9, {
   3.771692271635406*^9, 3.771692289122738*^9}, {3.771692328660396*^9, 
   3.771692350779047*^9}, {3.771692435092806*^9, 3.771692466505422*^9}, {
   3.771692537906076*^9, 3.771692624393091*^9}, {3.771692775661364*^9, 
   3.771692789217929*^9}, {3.771692830199643*^9, 3.771692844244501*^9}, {
   3.7716929864537773`*^9, 3.771692987704947*^9}, {3.771693176982716*^9, 
   3.771693223617131*^9}, 3.771693304109569*^9, {3.771693405997867*^9, 
   3.771693411843594*^9}, {3.7716934485301933`*^9, 3.771693487163294*^9}, {
   3.771693563974257*^9, 3.771693605802772*^9}, {3.771693686709693*^9, 
   3.7716936883943577`*^9}, {3.771693815631466*^9, 3.771693817772654*^9}, {
   3.7716940022647877`*^9, 3.771694008168648*^9}, {3.771695318872908*^9, 
   3.7716953200695953`*^9}, {3.771713377771394*^9, 
   3.771713382128508*^9}},ExpressionUUID->"035f3fac-5785-4fb6-8252-\
b10aea312ea8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Data Collection Automation", "Subsection",
 CellChangeTimes->{{3.7717128644990253`*^9, 
  3.771712885481298*^9}},ExpressionUUID->"3b7d840d-c9fe-49f1-92fe-\
dd9a50ebd8f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DownloadDataNeeded", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Echo", "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<Processing city \>\"", ",", " ", 
         RowBox[{"CityName", "[", "city", "]"}]}], "]"}], "]"}], ";", "\n", 
      "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportTweets", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportMaps", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], 
          "]"}]}], ",", " ", 
        RowBox[{"ExportSatellites", "[", "city", "]"}], ",", " ", "Nothing"}],
        "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}],
         ",", " ", 
        RowBox[{"ExportAllFeatures", "[", "city", "]"}], ",", " ", 
        "Nothing"}], "]"}], ";"}]}], "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7714486731894703`*^9, 3.771448746390979*^9}, {
   3.771454070202355*^9, 3.7714541042189007`*^9}, {3.771454145635871*^9, 
   3.7714541708185663`*^9}, {3.771531491849868*^9, 3.771531493954137*^9}, {
   3.771620391630314*^9, 3.771620417772552*^9}, {3.771620757115899*^9, 
   3.771620807232101*^9}, 3.771673776030848*^9, {3.771674120726346*^9, 
   3.771674129414414*^9}, {3.771683495381939*^9, 3.771683495665181*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   StyleBox[
    RowBox[{"tw", " ", "=", " ", 
     RowBox[{"ServiceConnect", "[", "\"\<Twitter\>\"", "]"}]}], "Code"], 
   StyleBox[";", "Code"], "\n", 
   RowBox[{"ClearSystemCache", "[", "]"}], ";", "\n", 
   RowBox[{"Map", "[", 
    RowBox[{"DownloadDataNeeded", ",", " ", 
     RowBox[{"Drop", "[", 
      RowBox[{"citiesPopular", ",", " ", "70"}], "]"}]}], "]"}], ";"}], 
  "*)"}]], "Code",
 CellChangeTimes->{{3.7714541818692417`*^9, 3.7714541855013533`*^9}, {
  3.771495717530364*^9, 3.7714957234432993`*^9}, {3.771585795840542*^9, 
  3.771585798253406*^9}, {3.7716709064736547`*^9, 3.771670909272904*^9}, {
  3.771674109863604*^9, 3.7716741413335667`*^9}, {3.771690331972289*^9, 
  3.771690337584732*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What can be predicted with Twitter?", "Section",
 CellChangeTimes->{{3.7717129018593807`*^9, 3.771712925728685*^9}, {
  3.771713296165682*^9, 
  3.771713308642982*^9}},ExpressionUUID->"1720891f-8e04-46f0-8ae9-\
4c3257b2a22a"],

Cell[CellGroupData[{

Cell["Estimating Sentiment", "Subsection",
 CellChangeTimes->{{3.771712584921867*^9, 3.771712591179371*^9}, {
  3.771713240508605*^9, 
  3.771713267417141*^9}},ExpressionUUID->"cd86ce5d-5f3d-4938-a2ae-\
9d0f8a94ab58"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentimentWL", "[", "sentence_String", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "probs", ",", " ", "pPos", ",", " ", "pNeu", ",", " ", "pNeg", ",", " ",
        "resultPositivness", ",", " ", "resultCertainity"}], "}"}], ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"probs", " ", "=", " ", 
       RowBox[{"Classify", "[", 
        RowBox[{
        "\"\<Sentiment\>\"", ",", " ", "sentence", ",", " ", 
         "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"pPos", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Positive\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeu", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Neutral\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeg", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Negative\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultPositivness", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"pPos", " ", "+", " ", 
         RowBox[{"pNeu", " ", "*", " ", "0.5"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultCertainity", " ", "=", " ", 
       RowBox[{"Max", "[", "probs", "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"{", 
       RowBox[{"resultPositivness", ",", "resultCertainity"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences_", ",", " ", "func_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"{", 
        RowBox[{"#", ",", " ", 
         RowBox[{"func", "[", "#", "]"}]}], "}"}], ")"}], " ", "&"}], ",", 
     " ", "sentences"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", "sentences_", "]"}], " ", ":=", " ", 
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences", ",", " ", "EstimateSentimentWL"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateQualityOfLifeWSentiment", "[", "data_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sentences", ",", " ", "tweetsWSentiments", ",", " ", 
       "sentimentsWCertainity", ",", " ", "meanPositivness", ",", " ", 
       "meanCertainty"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"sentences", " ", "=", " ", 
       RowBox[{"data", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", " ", "\"\<Text\>\""}], 
        "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
      RowBox[{"tweetsWSentiments", " ", "=", " ", 
       RowBox[{"EstimateSentiments", "[", "sentences", "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"sentimentsWCertainity", " ", "=", " ", 
       RowBox[{"tweetsWSentiments", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"meanPositivness", " ", "=", " ", 
       RowBox[{"MeanAround", "[", 
        RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"meanCertainty", " ", "=", " ", 
       RowBox[{"MeanAround", "[", 
        RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{"meanPositivness", ",", " ", "meanCertainty"}], "}"}]}]}], 
    "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
   3.771102595812048*^9}, 3.771102630105879*^9, {3.771102663030601*^9, 
   3.771102675942957*^9}, {3.771102819347427*^9, 3.771102841217803*^9}, {
   3.7711492274460793`*^9, 3.771149259526984*^9}, {3.7711494968232927`*^9, 
   3.771149500439412*^9}, 3.7711495391273327`*^9, {3.77125210524156*^9, 
   3.7712521814760447`*^9}, {3.771252249246994*^9, 3.771252279427402*^9}, {
   3.7712523472315397`*^9, 3.771252349510272*^9}, {3.7713308537177467`*^9, 
   3.771330854042081*^9}, {3.771351310412696*^9, 3.771351311048148*^9}, {
   3.771352532684317*^9, 3.771352549949391*^9}, {3.771356337886156*^9, 
   3.771356338115733*^9}, {3.7714467936655684`*^9, 3.7714468327252817`*^9}, {
   3.7714477080950613`*^9, 3.771447709078145*^9}, {3.771447785236917*^9, 
   3.771447786651771*^9}, {3.771447949999405*^9, 3.7714479501103563`*^9}, {
   3.771453850679749*^9, 3.771453858089093*^9}, {3.7714943916639833`*^9, 
   3.771494395261273*^9}, {3.771603230447397*^9, 3.771603276204214*^9}, {
   3.77162270325916*^9, 3.771622703769059*^9}, {3.7716720354592876`*^9, 
   3.7716720953478203`*^9}, {3.771672415887467*^9, 3.771672441238475*^9}, {
   3.771672951222991*^9, 3.771672957381604*^9}, {3.7716730265330887`*^9, 
   3.771673027357678*^9}, {3.771673226849732*^9, 3.771673231141677*^9}, {
   3.771673519358794*^9, 3.7716736310995073`*^9}, {3.771691685199237*^9, 
   3.771691693779365*^9}, {3.771691831795059*^9, 3.771691867469315*^9}, {
   3.771691971381495*^9, 3.77169197881502*^9}, {3.771692016649796*^9, 
   3.771692046537582*^9}, {3.771692397520424*^9, 3.7716923999690723`*^9}, {
   3.771692660468504*^9, 3.771692762738967*^9}, {3.7716928504906797`*^9, 
   3.7716928766927843`*^9}, {3.771693062356737*^9, 3.771693078588234*^9}, {
   3.771693618478825*^9, 3.771693675965167*^9}, {3.771693772415101*^9, 
   3.771693808300001*^9}, {3.7716938646087313`*^9, 3.7716938728069553`*^9}, {
   3.7716939585609303`*^9, 3.771693982168026*^9}, {3.771695280962672*^9, 
   3.771695307549501*^9}, {3.771710127577561*^9, 3.771710130111709*^9}, {
   3.771711669963105*^9, 3.771711677464121*^9}, 
   3.771712581117927*^9},ExpressionUUID->"20961709-7c7a-45d4-a981-\
9ac2574c6877"],

Cell["\<\
Once we collect the data from Twitter, we want to see how the \
\>", "Text",
 CellChangeTimes->{{3.771250972015732*^9, 3.771250985754189*^9}, {
  3.771251369189413*^9, 
  3.7712513838841467`*^9}},ExpressionUUID->"13349771-2cbd-4640-86e0-\
2a496adaad4a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tweetsPerCity", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ImportTweets", ",", " ", "citiesPopular"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesEstimates", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"EstimateQualityOfLifeWSentiment", ",", " ", "tweetsPerCity"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesCertainties", " ", "=", " ", 
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "[", "\"\<Value\>\"", "]"}], ")"}], " ", "&"}], ",", " ", 
      RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.77149406487798*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesColors", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.2", ",", " ", "0.2", ",", " ", "0.8", ",", " ", "#"}], 
       "]"}], " ", "&"}], ",", " ", "citiesCertainties"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesPositivnessFromTweets", " ", "=", " ", 
   RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\n", 
 RowBox[{"BarChart", "[", 
  RowBox[{"citiesPositivnessFromTweets", ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Map", "[", 
     RowBox[{"CityName", ",", " ", "citiesPopular"}], "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "citiesColors"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.771494079411756*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], PointBox[{{0., -1.5}, {0., 100.5}}]}, {{}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[Opacity[0.]], 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7176754314465787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 0.5}, {0.7094780254912796, 1.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8279510201653612], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 1.5}, {0.6212207674326337, 2.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5858226737572596], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 2.5}, {0.6756641062959441, 3.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7814289899911246], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 3.5}, {0.6271725928863408, 4.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7481383163139589], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 4.5}, {0.6601309524686282, 5.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7692042146215119], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 5.5}, {0.6075730642972501, 6.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7327042772441816], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 6.5}, {0.596770622020753, 7.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8404387158825382], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 7.5}, {0.5771232505198457, 8.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8312557630917399], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 8.5}, {0.6228594834244057, 9.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6260961199901336], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 9.5}, {0.6152352433003037, 10.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5652934326911856], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 10.5}, {0.6421578707973884, 11.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7555854739895107], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 11.5}, {0.6081083005439462, 12.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.672642655021958], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 12.5}, {0.6119525994424226, 13.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6118940931807957], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 13.5}, {0.6258592853246716, 14.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6486521858581383], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 14.5}, {0.6144830048531488, 15.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7684505417702913], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 15.5}, {0.6556192762962432, 16.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8153390503569053], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 16.5}, {0.6560237091036722, 17.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7274560316754648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 17.5}, {0.5904025661158773, 18.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7728082876660456], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 18.5}, {0.6179754290700187, 19.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6742572811121245], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 19.5}, {0.6187137861652968, 20.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5921630768565032], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 20.5}, {0.6692109538724832, 21.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7374151666926428], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 21.5}, {0.645390985328293, 22.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6195342056686642], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 22.5}, {0.5886012686753667, 23.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6725989818973247], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 23.5}, {0.5448160664477556, 24.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7913772216245962], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 24.5}, {0.6354121176869114, 25.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6401448961760818], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 25.5}, {0.6394968932809129, 26.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7184410608116257], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 26.5}, {0.579597980593741, 27.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7542241346663416], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 27.5}, {0.5989295024826079, 28.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7460133050581996], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 28.5}, {0.6619629406513258, 29.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7531623047682412], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 29.5}, {0.5827312202237238, 30.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6692408355294145], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 30.5}, {0.6118390321474525, 31.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742632421619231], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 31.5}, {0.591228890984654, 32.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7929508183457274], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 32.5}, {0.6893609002730704, 33.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7949320958109738], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 33.5}, {0.6194426043074048, 34.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7469149591329476], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 34.5}, {0.6807395187456539, 35.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6836051160749707], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 35.5}, {0.6203486508741834, 36.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8477249347423831], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 36.5}, {0.6064128564217263, 37.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7407656316527769], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 37.5}, {0.6513873815366721, 38.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7352908639700706], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 38.5}, {0.6430268477412946, 39.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7063532001478714], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 39.5}, {0.5822887528259318, 40.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740515442818265], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 40.5}, {0.7181963600080368, 41.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7004134452611186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 41.5}, {0.5933273561474978, 42.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742482340274929], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 42.5}, {0.6411733052568453, 43.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7477321635209921], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 43.5}, {0.6455747219833612, 44.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7364030307446516], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 44.5}, {0.6427329190005487, 45.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7711372358933629], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 45.5}, {0.7078756726789222, 46.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7767654036241787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 46.5}, {0.6686434667623472, 47.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.64904303211438], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 47.5}, {0.6033673765841746, 48.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.700770727279793], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 48.5}, {0.6410998023559015, 49.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6190907426891815], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 49.5}, {0.6178391396997895, 50.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6943890910053617], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 50.5}, {0.6042482536796245, 51.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740609838770277], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 51.5}, {0.6169263018799168, 52.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7581725625908038], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 52.5}, {0.6314432779959939, 53.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8469636685406186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 53.5}, {0.7693070541839633, 54.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 54.5}, {0.6494507487080535, 55.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6925963047038273], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 55.5}, {0.6915183102232182, 56.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7195621589716865], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 56.5}, {0.668408747790416, 57.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7617675690591228], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 57.5}, {0.6122542954549197, 58.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7876596909353499], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 58.5}, {0.7291236152289445, 59.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7049546378372464], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 59.5}, {0.6037592118143658, 60.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8008400976864876], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 60.5}, {0.665425377890306, 61.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5955252519404673], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 61.5}, {0.5918609488721753, 62.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.785407626612701], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 62.5}, {0.6590054983662713, 63.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7569534814195289], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 63.5}, {0.5732692378453028, 64.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7755731169205828], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 64.5}, {0.7226632958240885, 65.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7455556063723131], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 65.5}, {0.6442027645871149, 66.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6825007689146033], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 66.5}, {0.7552147912593619, 67.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7498187964692874], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 67.5}, {0.6731402126966803, 68.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7989882431141833], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 68.5}, {0.6688696022390684, 69.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7704104618124417], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 69.5}, {0.6099620245815766, 70.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7456155941250098], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 70.5}, {0.7208262198633335, 71.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6472504473406332], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 71.5}, {0.7308789359809917, 72.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6324738586128064], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 72.5}, {0.7473671856270511, 73.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7299857772669577], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 73.5}, {0.6341843233597266, 74.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6015452509722727], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 74.5}, {0.7126700149778475, 75.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6595532891969377], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 75.5}, {0.6672353553106399, 76.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6351817346421648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 76.5}, {0.7139325409556403, 77.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7017515750446992], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 77.5}, {0.6299217123238716, 78.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7515518834107192], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 78.5}, {0.5876020259044288, 79.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7215243102595766], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 79.5}, {0.6122906910805411, 80.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.734098908056747], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 80.5}, {0.6190112425319902, 81.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.759992249665873], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 81.5}, {0.6606208248101461, 82.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8731319695294444], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 82.5}, {0.722870721151543, 83.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7625087537129647], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 83.5}, {0.6755916260057354, 84.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7206750226099803], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 84.5}, {0.6643699915041464, 85.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.95], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 85.5}, {0.5237996092979674, 86.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8117160663836445], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 86.5}, {0.6221696104079373, 87.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7320533133145954], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 87.5}, {0.6200590250592407, 88.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.776464122562469], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 88.5}, {0.6357645924191135, 89.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6182973242042902], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 89.5}, {0.6143173468333734, 90.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7292569783728212], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 90.5}, {0.65166268538485, 91.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6713750940951166], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 91.5}, {0.6729218411962753, 92.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6349591384084473], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 92.5}, {0.616087851021887, 93.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7289144007390973], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 93.5}, {0.6880512175065494, 94.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5487575926839616], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 94.5}, {0.7254583695530306, 95.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6312680449376111], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 95.5}, {0.5697888833456759, 96.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.653432779770862], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 96.5}, {0.6158174798109485, 97.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6876826203094999], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 97.5}, {0.6150705800784589, 98.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.715921450091501], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 98.5}, {0.6161860342693534, 99.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6448723365833492], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 99.5}, {0.6575215137668566, 100.5},
        RoundingRadius->0]}}, {}, {}}, {}, {}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], LineBox[{{0., -1.5}, {0., 102.54}}], 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], LineBox[{{0., 0.5}, Offset[{-6., 0.}, {0., 0.5}]}],
           LineBox[{{0., 100.5}, 
            Offset[{-6., 0.}, {0., 
             100.5}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}]}, {}}}, 
         StyleBox[
          {Thickness[Tiny], 
           InsetBox["\<\"Vienna\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zurich\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Munich\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Auckland\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vancouver\"\>", Offset[{-2, 0}, {0., 5.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"D\[UDoubleDot]sseldorf\"\>", 
            Offset[{-2, 0}, {0., 6.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Frankfurt\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Geneva\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Copenhagen\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Basel\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Sydney\"\>", Offset[{-2, 0}, {0., 11.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Amsterdam\"\>", Offset[{-2, 0}, {0., 12.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Berlin\"\>", Offset[{-2, 0}, {0., 13.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bern\"\>", Offset[{-2, 0}, {0., 14.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wellington\"\>", Offset[{-2, 0}, {0., 15.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Toronto\"\>", Offset[{-2, 0}, {0., 16.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Melbourne\"\>", Offset[{-2, 0}, {0., 17.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Luxemburg\"\>", Offset[{-2, 0}, {0., 18.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ottawa\"\>", Offset[{-2, 0}, {0., 19.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Hamburg\"\>", Offset[{-2, 0}, {0., 20.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Perth\"\>", Offset[{-2, 0}, {0., 21.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montreal\"\>", Offset[{-2, 0}, {0., 22.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stockholm\"\>", Offset[{-2, 0}, {0., 23.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Nuremberg\"\>", Offset[{-2, 0}, {0., 24.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Singapore\"\>", Offset[{-2, 0}, {0., 25.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Oslo\"\>", Offset[{-2, 0}, {0., 26.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brussels\"\>", Offset[{-2, 0}, {0., 27.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stuttgart\"\>", Offset[{-2, 0}, {0., 28.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Adelaide\"\>", Offset[{-2, 0}, {0., 29.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"San Francisco\"\>", Offset[{-2, 0}, {0., 30.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Canberra\"\>", Offset[{-2, 0}, {0., 31.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Helsinki\"\>", Offset[{-2, 0}, {0., 32.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Calgary\"\>", Offset[{-2, 0}, {0., 33.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dublin\"\>", Offset[{-2, 0}, {0., 34.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Boston\"\>", Offset[{-2, 0}, {0., 35.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Honolulu\"\>", Offset[{-2, 0}, {0., 36.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brisbane\"\>", Offset[{-2, 0}, {0., 37.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lisbon\"\>", Offset[{-2, 0}, {0., 38.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Paris\"\>", Offset[{-2, 0}, {0., 39.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lyon\"\>", Offset[{-2, 0}, {0., 40.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"London\"\>", Offset[{-2, 0}, {0., 41.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Milan\"\>", Offset[{-2, 0}, {0., 42.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Barcelona\"\>", Offset[{-2, 0}, {0., 43.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seattle\"\>", Offset[{-2, 0}, {0., 44.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"New York City\"\>", Offset[{-2, 0}, {0., 45.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Edinburgh\"\>", Offset[{-2, 0}, {0., 46.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Chicago\"\>", Offset[{-2, 0}, {0., 47.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Washington\"\>", Offset[{-2, 0}, {0., 48.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Madrid\"\>", Offset[{-2, 0}, {0., 49.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tokyo\"\>", Offset[{-2, 0}, {0., 50.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Kobe\"\>", Offset[{-2, 0}, {0., 51.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Birmingham\"\>", Offset[{-2, 0}, {0., 52.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Glasgow\"\>", Offset[{-2, 0}, {0., 53.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Philadelphia\"\>", Offset[{-2, 0}, {0., 54.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Yokohama\"\>", Offset[{-2, 0}, {0., 55.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Rome\"\>", Offset[{-2, 0}, {0., 56.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Aberdeen\"\>", Offset[{-2, 0}, {0., 57.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Osaka\"\>", Offset[{-2, 0}, {0., 58.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Pittsburgh\"\>", Offset[{-2, 0}, {0., 59.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Leipzig\"\>", Offset[{-2, 0}, {0., 60.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Minneapolis\"\>", Offset[{-2, 0}, {0., 61.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Nagoya\"\>", Offset[{-2, 0}, {0., 62.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dallas\"\>", Offset[{-2, 0}, {0., 63.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Belfast\"\>", Offset[{-2, 0}, {0., 64.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Atlanta\"\>", Offset[{-2, 0}, {0., 65.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Houston\"\>", Offset[{-2, 0}, {0., 66.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Los Angeles\"\>", Offset[{-2, 0}, {0., 67.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Miami\"\>", Offset[{-2, 0}, {0., 68.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Prague\"\>", Offset[{-2, 0}, {0., 69.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Saint Louis\"\>", Offset[{-2, 0}, {0., 70.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Hong Kong\"\>", Offset[{-2, 0}, {0., 71.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Point\[Hyphen]a\[Hyphen]Pitre\"\>", 
            Offset[{-2, 0}, {0., 72.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Detroit\"\>", Offset[{-2, 0}, {0., 73.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ljubljana\"\>", Offset[{-2, 0}, {0., 74.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dubai\"\>", Offset[{-2, 0}, {0., 75.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Budapest\"\>", Offset[{-2, 0}, {0., 76.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seoul\"\>", Offset[{-2, 0}, {0., 77.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Abu Dhabi\"\>", Offset[{-2, 0}, {0., 78.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montevideo\"\>", Offset[{-2, 0}, {0., 79.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bratislava\"\>", Offset[{-2, 0}, {0., 80.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vilnius\"\>", Offset[{-2, 0}, {0., 81.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Warsaw\"\>", Offset[{-2, 0}, {0., 82.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Port Louis\"\>", Offset[{-2, 0}, {0., 83.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Taipei City\"\>", Offset[{-2, 0}, {0., 84.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Kuala Lumpur\"\>", Offset[{-2, 0}, {0., 85.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Lemesos\"\>", Offset[{-2, 0}, {0., 86.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tallinn\"\>", Offset[{-2, 0}, {0., 87.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Durban\"\>", Offset[{-2, 0}, {0., 88.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Athens\"\>", Offset[{-2, 0}, {0., 89.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Riga\"\>", Offset[{-2, 0}, {0., 90.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Buenos Aires\"\>", Offset[{-2, 0}, {0., 91.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"San Juan\"\>", Offset[{-2, 0}, {0., 92.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Santiago\"\>", Offset[{-2, 0}, {0., 93.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Busan\"\>", Offset[{-2, 0}, {0., 94.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Cape Town\"\>", Offset[{-2, 0}, {0., 95.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Johannesburg\"\>", Offset[{-2, 0}, {0., 96.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Panama\"\>", Offset[{-2, 0}, {0., 97.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zagreb\"\>", Offset[{-2, 0}, {0., 98.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Victoria\"\>", Offset[{-2, 0}, {0., 99.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wroc\[LSlash]aw\"\>", Offset[{-2, 0}, {0., 100.}], {1, 0},
             Automatic, {1, 0}]}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6931560262371375, 1.}, {0.7094780254912796, 1.}}], 
        LineBox[{{0.7094780254912796, 1.}, {0.7258000247454217, 1.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607094289536996, 2.}, {0.6212207674326335, 2.}}], 
        LineBox[{{0.6212207674326335, 2.}, {0.6353472453282714, 2.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6626990001926303, 3.}, {0.6756641062959439, 3.}}], 
        LineBox[{{0.6756641062959439, 3.}, {0.6886292123992575, 3.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.611925978309487, 4.}, {0.6271725928863408, 4.}}], 
        LineBox[{{0.6271725928863408, 4.}, {0.6424192074631945, 4.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6460870639090937, 5.}, {0.6601309524686281, 5.}}], 
        LineBox[{{0.6601309524686281, 5.}, {0.6741748410281625, 5.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962777591805315, 6.}, {0.6075730642972506, 6.}}], 
        LineBox[{{0.6075730642972506, 6.}, {0.6188683694139696, 6.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5823675022695207, 7.}, {0.5967706220207534, 7.}}], 
        LineBox[{{0.5967706220207534, 7.}, {0.611173741771986, 7.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5663558216809923, 8.}, {0.577123250519846, 8.}}], 
        LineBox[{{0.577123250519846, 8.}, {0.5878906793586998, 8.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.609306240623761, 9.}, {0.6228594834244063, 9.}}], 
        LineBox[{{0.6228594834244063, 9.}, {0.6364127262250516, 9.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.602589516913655, 10.}, {0.6152352433003045, 10.}}], 
        LineBox[{{0.6152352433003045, 10.}, {0.6278809696869541, 10.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6243519348133741, 11.}, {0.642157870797389, 11.}}], 
        LineBox[{{0.642157870797389, 11.}, {0.6599638067814038, 11.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962786054454714, 12.}, {0.6081083005439467, 12.}}], 
        LineBox[{{0.6081083005439467, 12.}, {0.619937995642422, 12.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5973894087981311, 13.}, {0.6119525994424233, 13.}}], 
        LineBox[{{0.6119525994424233, 13.}, {0.6265157900867155, 13.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6107708292821119, 14.}, {0.6258592853246725, 14.}}], 
        LineBox[{{0.6258592853246725, 14.}, {0.6409477413672331, 14.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6003538775350705, 15.}, {0.6144830048531489, 15.}}], 
        LineBox[{{0.6144830048531489, 15.}, {0.6286121321712272, 15.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6383251182735634, 16.}, {0.6556192762962425, 16.}}], 
        LineBox[{{0.6556192762962425, 16.}, {0.6729134343189216, 16.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6402367918194223, 17.}, {0.6560237091036711, 17.}}], 
        LineBox[{{0.6560237091036711, 17.}, {0.67181062638792, 17.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5792577349766397, 18.}, {0.5904025661158769, 18.}}], 
        LineBox[{{0.5904025661158769, 18.}, {0.6015473972551142, 18.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6029986181541211, 19.}, {0.6179754290700181, 19.}}], 
        LineBox[{{0.6179754290700181, 19.}, {0.6329522399859151, 19.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607561314375463, 20.}, {0.6187137861652978, 20.}}], 
        LineBox[{{0.6187137861652978, 20.}, {0.6298662579551326, 20.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6525039814250775, 21.}, {0.6692109538724829, 21.}}], 
        LineBox[{{0.6692109538724829, 21.}, {0.6859179263198882, 21.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6323408491114471, 22.}, {0.6453909853282944, 22.}}], 
        LineBox[{{0.6453909853282944, 22.}, {0.6584411215451418, 22.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5732056294699852, 23.}, {0.5886012686753652, 23.}}], 
        LineBox[{{0.5886012686753652, 23.}, {0.6039969078807452, 23.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5329560968633658, 24.}, {0.5448160664477548, 24.}}], 
        LineBox[{{0.5448160664477548, 24.}, {0.5566760360321439, 24.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6151323036093927, 25.}, {0.6354121176869114, 25.}}], 
        LineBox[{{0.6354121176869114, 25.}, {0.6556919317644301, 25.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6270185786480234, 26.}, {0.6394968932809135, 26.}}], 
        LineBox[{{0.6394968932809135, 26.}, {0.6519752079138037, 26.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5609547623451583, 27.}, {0.5795979805937392, 27.}}], 
        LineBox[{{0.5795979805937392, 27.}, {0.5982411988423202, 27.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5870883811481669, 28.}, {0.5989295024826085, 28.}}], 
        LineBox[{{0.5989295024826085, 28.}, {0.61077062381705, 28.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6438315328996005, 29.}, {0.6619629406513248, 29.}}], 
        LineBox[{{0.6619629406513248, 29.}, {0.680094348403049, 29.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.572425284795667, 30.}, {0.5827312202237245, 30.}}], 
        LineBox[{{0.5827312202237245, 30.}, {0.5930371556517819, 30.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997928165660724, 31.}, {0.6118390321474507, 31.}}], 
        LineBox[{{0.6118390321474507, 31.}, {0.623885247728829, 31.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5791223061268234, 32.}, {0.5912288909846524, 32.}}], 
        LineBox[{{0.5912288909846524, 32.}, {0.6033354758424849, 32.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6732903202081246, 33.}, {0.6893609002730727, 33.}}], 
        LineBox[{{0.6893609002730727, 33.}, {0.7054314803380208, 33.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6043150315818124, 34.}, {0.6194426043074017, 34.}}], 
        LineBox[{{0.6194426043074017, 34.}, {0.634570177032991, 34.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6648449502564873, 35.}, {0.6807395187456535, 35.}}], 
        LineBox[{{0.6807395187456535, 35.}, {0.6966340872348198, 35.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6079208557048972, 36.}, {0.6203486508741847, 36.}}], 
        LineBox[{{0.6203486508741847, 36.}, {0.6327764460434722, 36.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5922896194692697, 37.}, {0.606412856421727, 37.}}], 
        LineBox[{{0.606412856421727, 37.}, {0.6205360933741844, 37.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6377319288732863, 38.}, {0.6513873815366722, 38.}}], 
        LineBox[{{0.6513873815366722, 38.}, {0.665042834200058, 38.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6293688606094037, 39.}, {0.6430268477412966, 39.}}], 
        LineBox[{{0.6430268477412966, 39.}, {0.6566848348731895, 39.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5714504588434224, 40.}, {0.5822887528259315, 40.}}], 
        LineBox[{{0.5822887528259315, 40.}, {0.5931270468084406, 40.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7010851947862093, 41.}, {0.7181963600080365, 41.}}], 
        LineBox[{{0.7181963600080365, 41.}, {0.7353075252298638, 41.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5815781739533534, 42.}, {0.5933273561474977, 42.}}], 
        LineBox[{{0.5933273561474977, 42.}, {0.6050765383416419, 42.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6271108959506861, 43.}, {0.6411733052568422, 43.}}], 
        LineBox[{{0.6411733052568422, 43.}, {0.6552357145629983, 43.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6299308561489241, 44.}, {0.6455747219833583, 44.}}], 
        LineBox[{{0.6455747219833583, 44.}, {0.6612185878177925, 44.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6292783323557103, 45.}, {0.6427329190005509, 45.}}], 
        LineBox[{{0.6427329190005509, 45.}, {0.6561875056453914, 45.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6927886940793755, 46.}, {0.7078756726789237, 46.}}], 
        LineBox[{{0.7078756726789237, 46.}, {0.7229626512784719, 46.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.651774791587421, 47.}, {0.6686434667623473, 47.}}], 
        LineBox[{{0.6686434667623473, 47.}, {0.6855121419372736, 47.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5933338838894073, 48.}, {0.603367376584174, 48.}}], 
        LineBox[{{0.603367376584174, 48.}, {0.6134008692789408, 48.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6284559513894123, 49.}, {0.6410998023559031, 49.}}], 
        LineBox[{{0.6410998023559031, 49.}, {0.6537436533223939, 49.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6048896989249286, 50.}, {0.6178391396997895, 50.}}], 
        LineBox[{{0.6178391396997895, 50.}, {0.6307885804746505, 50.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5896378073164854, 51.}, {0.6042482536796214, 51.}}], 
        LineBox[{{0.6042482536796214, 51.}, {0.6188587000427574, 51.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997231691138012, 52.}, {0.6169263018799143, 52.}}], 
        LineBox[{{0.6169263018799143, 52.}, {0.6341294346460273, 52.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.617183207082185, 53.}, {0.6314432779959915, 53.}}], 
        LineBox[{{0.6314432779959915, 53.}, {0.6457033489097981, 53.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7522961627444431, 54.}, {0.7693070541839617, 54.}}], 
        LineBox[{{0.7693070541839617, 54.}, {0.7863179456234803, 54.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6394597468001137, 55.}, {0.6494507487080554, 55.}}], 
        LineBox[{{0.6494507487080554, 55.}, {0.6594417506159971, 55.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.673977709853304, 56.}, {0.6915183102232163, 56.}}], 
        LineBox[{{0.6915183102232163, 56.}, {0.7090589105931286, 56.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6531908043624526, 57.}, {0.6684087477904157, 57.}}], 
        LineBox[{{0.6684087477904157, 57.}, {0.6836266912183788, 57.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997613166035691, 58.}, {0.6122542954549175, 58.}}], 
        LineBox[{{0.6122542954549175, 58.}, {0.6247472743062659, 58.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.714377631184874, 59.}, {0.7291236152289429, 59.}}], 
        LineBox[{{0.7291236152289429, 59.}, {0.7438695992730118, 59.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5925146944734934, 60.}, {0.6037592118143635, 60.}}], 
        LineBox[{{0.6037592118143635, 60.}, {0.6150037291552337, 60.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6497570523106688, 61.}, {0.6654253778903083, 61.}}], 
        LineBox[{{0.6654253778903083, 61.}, {0.6810937034699478, 61.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5816489707111003, 62.}, {0.5918609488721742, 62.}}], 
        LineBox[{{0.5918609488721742, 62.}, {0.6020729270332481, 62.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6422076264530645, 63.}, {0.6590054983662696, 63.}}], 
        LineBox[{{0.6590054983662696, 63.}, {0.6758033702794748, 63.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5560470449513986, 63.99999999999999}, {0.5732692378453024,
          63.99999999999999}}], 
        LineBox[{{0.5732692378453024, 63.99999999999999}, {0.5904914307391991,
          63.99999999999999}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7065082158336509, 65.}, {0.7226632958240913, 65.}}], 
        LineBox[{{0.7226632958240913, 65.}, {0.7388183758145317, 65.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6286383699081171, 66.}, {0.6442027645871207, 66.}}], 
        LineBox[{{0.6442027645871207, 66.}, {0.6597671592661243, 66.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7413000728510326, 67.}, {0.7552147912593625, 67.}}], 
        LineBox[{{0.7552147912593625, 67.}, {0.7691295096676924, 67.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6551862255091407, 68.}, {0.6731402126966799, 68.}}], 
        LineBox[{{0.6731402126966799, 68.}, {0.691094199884219, 68.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6463920133120951, 69.}, {0.6688696022390701, 69.}}], 
        LineBox[{{0.6688696022390701, 69.}, {0.6913471911660451, 69.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5968182929156427, 70.}, {0.6099620245815771, 70.}}], 
        LineBox[{{0.6099620245815771, 70.}, {0.6231057562475115, 70.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7046769634126235, 71.}, {0.7208262198633406, 71.}}], 
        LineBox[{{0.7208262198633406, 71.}, {0.7369754763140577, 71.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6977079224091227, 72.}, {0.7308789359809964, 72.}}], 
        LineBox[{{0.7308789359809964, 72.}, {0.7640499495528701, 72.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7333973890230396, 73.}, {0.7473671856270556, 73.}}], 
        LineBox[{{0.7473671856270556, 73.}, {0.7613369822310716, 73.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6218319786978981, 74.}, {0.6341843233597331, 74.}}], 
        LineBox[{{0.6341843233597331, 74.}, {0.6465366680215681, 74.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6985158103175308, 75.}, {0.7126700149778458, 75.}}], 
        LineBox[{{0.7126700149778458, 75.}, {0.7268242196381607, 75.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6526980686446393, 76.}, {0.6672353553106376, 76.}}], 
        LineBox[{{0.6672353553106376, 76.}, {0.6817726419766359, 76.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.697828385657786, 77.}, {0.7139325409556392, 77.}}], 
        LineBox[{{0.7139325409556392, 77.}, {0.7300366962534923, 77.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6161548514941018, 78.}, {0.6299217123238776, 78.}}], 
        LineBox[{{0.6299217123238776, 78.}, {0.6436885731536535, 78.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5769676913913457, 79.}, {0.587602025904431, 79.}}], 
        LineBox[{{0.587602025904431, 79.}, {0.5982363604175163, 79.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6000718332992534, 80.}, {0.6122906910805455, 80.}}], 
        LineBox[{{0.6122906910805455, 80.}, {0.6245095488618375, 80.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6072573886117851, 81.}, {0.6190112425319967, 81.}}], 
        LineBox[{{0.6190112425319967, 81.}, {0.6307650964522082, 81.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6417502598538931, 82.}, {0.6606208248101524, 82.}}], 
        LineBox[{{0.6606208248101524, 82.}, {0.6794913897664117, 82.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7063442694693549, 83.}, {0.722870721151537, 83.}}], 
        LineBox[{{0.722870721151537, 83.}, {0.7393971728337192, 83.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6588306323458539, 84.}, {0.6755916260057404, 84.}}], 
        LineBox[{{0.6755916260057404, 84.}, {0.6923526196656269, 84.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6500478008457975, 85.}, {0.6643699915041452, 85.}}], 
        LineBox[{{0.6643699915041452, 85.}, {0.6786921821624929, 85.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5202163656607297, 86.}, {0.5237996092979671, 86.}}], 
        LineBox[{{0.5237996092979671, 86.}, {0.5273828529352045, 86.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6067654704210526, 87.}, {0.6221696104079371, 87.}}], 
        LineBox[{{0.6221696104079371, 87.}, {0.6375737503948216, 87.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6011939060913676, 88.}, {0.6200590250592342, 88.}}], 
        LineBox[{{0.6200590250592342, 88.}, {0.6389241440271007, 88.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6204098559094007, 89.}, {0.6357645924191075, 89.}}], 
        LineBox[{{0.6357645924191075, 89.}, {0.6511193289288144, 89.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6015694747329121, 90.}, {0.6143173468333742, 90.}}], 
        LineBox[{{0.6143173468333742, 90.}, {0.6270652189338364, 90.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6387277043256177, 91.}, {0.6516626853848493, 91.}}], 
        LineBox[{{0.6516626853848493, 91.}, {0.6645976664440809, 91.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6604144565054071, 92.}, {0.6729218411962705, 92.}}], 
        LineBox[{{0.6729218411962705, 92.}, {0.685429225887134, 92.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6045387278791168, 93.}, {0.6160878510218879, 93.}}], 
        LineBox[{{0.6160878510218879, 93.}, {0.627636974164659, 93.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6684423853504313, 94.}, {0.6880512175065547, 94.}}], 
        LineBox[{{0.6880512175065547, 94.}, {0.7076600496626781, 94.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7128052088890229, 95.}, {0.7254583695530243, 95.}}], 
        LineBox[{{0.7254583695530243, 95.}, {0.7381115302170258, 95.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5590620488308247, 96.}, {0.5697888833456801, 96.}}], 
        LineBox[{{0.5697888833456801, 96.}, {0.5805157178605356, 96.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6051117211993216, 97.}, {0.6158174798109428, 97.}}], 
        LineBox[{{0.6158174798109428, 97.}, {0.6265232384225641, 97.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6024952581233975, 98.}, {0.6150705800784522, 98.}}], 
        LineBox[{{0.6150705800784522, 98.}, {0.6276459020335068, 98.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6004694940719304, 99.}, {0.6161860342693473, 99.}}], 
        LineBox[{{0.6161860342693473, 99.}, {0.6319025744667641, 99.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6456382017611304, 100.}, {0.6575215137668522, 100.}}], 
        LineBox[{{0.6575215137668522, 100.}, {0.669404825772574, 100.}}]}},
      Antialiasing->False]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -1.5},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{597.9642859438488, Automatic},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.7714538701095057`*^9, 3.771494004367584*^9, {3.7714940668059607`*^9, 
   3.7714940808827353`*^9}, 3.771494470980624*^9, 3.771670999214221*^9, 
   3.771690382504343*^9, 3.771703748413437*^9, 3.771709022107864*^9},
 CellLabel->"Out[67]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzU3Xe4ZVWVLvzt2ZVRshjIORpau+/t2337tt1qowiSU5GDiIBQJElV5CCo
iDmDbcCAiAoqUEBRREUkVY5kJAmmtrVV1jd+Y62xzz4F3X2/779vP8+aZ5+1
V5jzne8IM425w0EnHP6e9x90wvsOOWiDbY87aNrh7zvk+A3+5Zjj4lT/Zb3e
yB693sv23qDne9PrVTL62UsyfOb/+sQ/+DPSvPDCCxPzRL/585//XNf0TujO
xc+DczNe4rr/23PjX+Lcym1G/nf+eXnzk5/8pLnwwgubiy66qJk7d25ec8st
tzTf/OY38/uDDz7YXHLJJc0FF1zQ3HDDDW0OX9HcdNNNzQc/+MHmIx/5SF7i
86Mf/ai57rrrmoULFzbnn39+86EPfShvO/fcc5s777yzd1zeO6n5y1/+0vzg
Bz/I+z/+8Y83Tz31VN7vlbfffnu/y/Q111zT/PznP8//jute+x//8R/Nt771
rXzsZz7zmebXv/513nrZZZc1999/f36/7bbbskSydu+99/aO7+79/e9/33zl
K1/Je13/hz/8IZ/nOcuXLx88u+6N5xVYf98hJ6ennnpqZgtIZ511VvOb3/wm
b7/nnnvyER6vdAsWLGhOO+20ZsmSJcd1t7vs5JNPbubNm5dgAeCPf/xjXgq0
p59+unn/+9/ffOlLX8r/58yZ0zzzzDN1uzfMmDGjWbp0afONb3yj+dSnPpVY
Oq8OfvWrXzVPPvlk84tf/CIL8O1vf7v593//97p99uzZzdlnn52XfuELX2i+
/OUvJ14//elP85aHHnqo+cAHPpA4OudVQ2///ve/nzXq9o997GPNVVddlTyN
Gss3//jHP87Hewxs4BS3v2IYwQnNHXfckVSrzxlnnNE88MADI93Pjz76aHPm
mWcmqFWvV1xxxXHdz0BTXT6AO+mkk5qHH364GAMvr42SdqI0IUt55ZVX5i3P
P/98c+KJJza//OUv64Wf//zns5bgdeyxx+YTo3rqhZ/4xCeamTNn5t3xoqy9
4FHd/b3vfa/59Kc/PSgNpgfl6m5UuPvuu/OnKGQWNkRx+N1QrNJ0dbsCYtde
e+2gzD7qICheD8ETr42Kzp9l6dJLL60sIPTll1+eP+GKGgqYxnWILVq0KOv8
hz/8YScnE7JAVWYyA55HHnmkXnjrrbfmC4Hp0quvvrr505/+dGz+PDEp8eEP
fzgZ5BMUyCc8++yzvXrE17/+9UTy8ccfT1mYNm0aWtUjYHHOOedk0XyIDej+
7d/+bfAInHdObjzuk5/8pMyugB1OkpL6EO3g6zB2AFFKHzwJxhV29NFXv/rV
AXbeFyqylOqyZcuSTVFlvbrFy6jAwu6UU07B6Zag41Kw6YaoIBAfN4QZoQgl
mXfSA+4MnnYFHt985zvfSVA++tGPpoRE0Xp1P8Ccmz9/ft5PQZx++ulyMLj/
t7/9bRbAdccddxztOla7TWjuuuuuhMOHJps+fTqCFFp0BOmSOx+QB2+q6ChD
inyoZZIUt9TdwaCURQ/2wZGgdt2tDkshPfbYY3l3KIECzgNJ0wknnMD0FFU/
+9nPNt/97nfzLoUnQfGCeic1RFUFcfCv+dnPfgaHYaqCnS3zoZvYrTg/4Bka
w8GH1kflgHsFnv3ud7/L7GGMOr744ouZl3oI8tBktAk1CsUwJVX25557LquG
6AL1c5/7nFvqboLmDg/G0OOPP14NH9dVLLTkim5UmsjDwO4TroMOOqi58cYb
O/Een6T3OHoFoYh+v3sVtcumqQ2m0nPjXL0KfiDGcH8D38GthFTtKAQaUFlR
iA6o/93VI/NEJbkqij2uO01U6BFWLRTBCd1pGpfyiiyCuK5GRED4KUpTVyvY
1772NV6KKprQYYAEixcvzv+O7y5l4ki230J31YMxG53kMHRTIYYneOAOf6NY
vbqF6fZSWQxqdRLVDD7/3z3F/9nlH/XDpqQ7Mkk6wpas9//mW2camSD/rfvf
nIPO/1/PrSx9GcBepj5eNhZLSpBMhK4ILKX9FMjrr78+/1u3O0fZ0mfD58IN
IUdjziHKzTffPOYcrwuvhs9hKrd0+BwZo3GGz2EShg2fozgI3vC5L37xi+lY
rHiOhho+x83DneFz1Ai0hs/xRDBhxXOQHT5HMxV+w++le/23svRlLnkZpduh
/88d+t7KaPpv3e4cU9UZlMG58JhTXQ+f46jQk8PnNF26tsPgnJx0zuOYczT0
8Dml6FymwTlqbcXrINqZrDHnQmuMOac2qPnhczRy1/IanFOT3ee/PMcWr3iO
jqlzq42FljtUSq4aglwjxmH4nEewJ8PnCIC20PA5+rlrhNartul+UvL66RUv
ca7/X2QJ6lWzdU7pC/U6RwYK9TqntlfI0sbdT1oNDHeYjs5wj0vR1J5VsjAr
I+xzb/XkoFOkimvqwyNTpx7D6qlHJSIpbA2pZ92xn3SHNI90b24pvST/awaf
NcZmj+Y47LDD2I8ue69OE6lEOHfeeefle1QYd+WJJ55IN62rvPRy5IEM8Lzl
Dzp8hvvuuy99JVzj7R511FGs+ogf4tUf+cjXw6W7PRySxyN/F1/8yI8l+cMj
8e3RaNr/ojc50360LJ6I1lvL6+3bImyUfyZlBXEMKDtZ0ODzkd2owBGOb2/N
1HEuQR/tRJcqjQ9d5DecqIavmuBx0gq8P04FBxfa4SCOMK+RsRkzvt685z03
Nu9739Ioxfvet+jHkvjhyCOXNXvvfW2z+upbRSmk/WbVVbdqttjijc2b3/zm
yLi03+y7774Dyfmn4ZKtl5UgOyr2ve99b4KqQrTDfZe9Qw89tDn88MPjdUdm
RQKdU0hl+vB1+HYUzTHHHJOVq5nGU1OpmkkorRJVUJCvCHTRRbPjtTfG65ZF
0d7//sUfksQPRx21ON65yNHbMtN+FHpxc8gh9zY77PDVKK6037zjHf8a0P4I
tFFcab96TYaLu2H+WT8lSHcO74/fu//++2dRqimk5tTSIYccklZLi0mRiRKv
kduuI0FbGWz03gEHHJC15rnvec970pqCTCtHVlwbkPSKlMcdd2mz007XNe9+
9/wo87vfPedsyaQ4p7J33HFB1NfisCtPh48uZWOeCpAfd0RJpP2QiifCRj3j
iIJL+wH0UyE1fxlmcBWcgGmt+evDbMkseuIAzxRl+bCoyJVXYH4t3UIIKQRK
QGH1TnG3CTBlQt3hA8HlnOLD0UcfzcRHwQPeyN7JJ3+t2WOP6+NYGAXfY495
Z0rihz33XNi8610zm9VW2zrKvNpqLY+3bF71qq2bv/3bN8c5aT+4vtugYk9r
y7dB/tkgjRnlpYK0dygLhlA7EP9UivypYJJMuTC8vjPzOuJYB3hwaomuMjqv
7aaiialrNQuqzYw84WIUn884Y1az++7XKVEUcc89o4iRZBHnN7vt9vPmn//5
X6M40n7zj//45QDgG9EkvyXOSfvxrLtfuoivyuaArgJWhFjhneokjlo5sqy4
xO6II45IccVzWeRZKYrzuh5mzZqV1aNY0dSOKgrhj0wcfPDBeS3O4y/jSBaC
AnGN7sR+84EPXDaWv2dJkrpzm513XuSIFpG0H78sjEc/GMblhXi8tB94/jkc
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
ftU7i16h4FpHcrWEhqAxyCVYWEfvgZ3wu1010PngwzDCjckh3FHUcIl6K6dO
w3R2C7u10+hd3eAUBXjAS396DgYO7TZt8nk7c6VDyqLdJeM6aITfO+CAG/Sk
BgzS1pmppsqErqkyvPB/DDRt/+bQ3PSUvGRb+34+HRj8NznTzbIILjO9ATwE
hnC6jjDzXSDMTIJD0St4Pl3GnJQviHGYVIG7mRk6Vvx48HhPRQbBKAIOLrAy
Gaee+slE4IADFmeMmzOH4mQdeOAiR5BG2q5q0eQ+7TTrpKSCpT4Uz7CPuVlH
95nwdU+2uu8OS/Tof8evDfPPJoON6chVaW1auZYMV7TTCnKl9Dzjik5Wy48R
CJIQRDjn/MVdz6CmKjpbzfiHMotw8cXC180ORB/m2i0/swvwf+qpS+L5P3fk
nu3WskybZi3LA6nXx3fa/bHHno1G6fOG7wMXaT/7ezp1UtqpiswXqCAFNYVX
NmTZOdliy6mG2gGI3ICpJtPqgalQj6xE7WDgt9ochqGkipCsgtJXY+STn7y1
29HnURv6PHTGYGOjRwOKW01hyXgYfIBVVlmHN8APyKm3xOLtbx/1AU4fLt7o
2i5DuO0shfWyVmSPAVFM/9ceLAwTntamRRXajF9eO1ypWZrIdVSK53uea2rX
LNoZt2fM+GTuom4DNyvpT5JMDsRrSuY558xzRPVJtXrmBh6Luh3/WjU7tEK+
yrd5VxZGVvVxx2pJVS2bIpM0POODmawKTa7MZSRrWnpt5oSRqodL7D5VpvOF
l3/++VdnyNijjmo3rPtAt2HdkUeabXJXyP1dkWWpzhd75t4b9+oVePxxvQJP
PPFsFaU2sWu11/p5utqGDsyqSLSMU8Ujqb4vLGMsu10h83ttXe57LX2h9vTA
1H1UG03t+aopqjE0fCiyjCs8I4vufZ6FElQctntmTWKrldL0CAlhJGtZU7mK
qqLmj1L9bfyShzJ+yTIdQ/yIE098KJe8WnA1qaP3mmuuq+GajdfxXRN28803
Srf3rW99a20/2uL2d4NJl+hYKle5eO0VzQoNaykyuigXX6Q2FqaQams0ZarQ
4sP3oQu663qh+KoXi6JD/dqagghUnDrfa1iypvdqZakLJsL7vaN24OPDeQdz
4fwpp3wiA7ZOnbooF/V9oFvUN3Xq3Gj5/8QRCi7SkWb33e/KppbdC+8OFbM0
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\
\>"],ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],

Cell["\<\
As we can see, there is not much variance between cities, in terms of Tweets \
sentiment.\[LineSeparator]Lets compile multiple rankings together, assuming \
that they have had a more complete model for estimating the quality of life \
and satisfaction.\
\>", "Text",
 CellChangeTimes->{{3.7711983003938007`*^9, 3.771198312367927*^9}, {
  3.771198345411821*^9, 3.771198357701936*^9}, {3.771251296055133*^9, 
  3.77125134665545*^9}},ExpressionUUID->"04da58f6-384a-4c46-83b1-\
c68f03702b2d"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multi-source approach?", "Section",
 CellChangeTimes->{{3.771712976773937*^9, 3.771713011285736*^9}, {
  3.771713345797237*^9, 
  3.771713351892058*^9}},ExpressionUUID->"d1be2ff7-0399-4fec-9761-\
8befa64c33fd"],

Cell[CellGroupData[{

Cell["Linear Regression", "Subsection",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
  3.771101738955223*^9}, {3.771102348054689*^9, 3.771102348771636*^9}, {
  3.771713335827496*^9, 
  3.771713339378332*^9}},ExpressionUUID->"1e314e11-051b-4643-8db0-\
01d456f6b7b3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionRect", "[", 
    RowBox[{"rowsPerSample_", ",", " ", "predictionsVals_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputNormalized", ",", " ", "p", ",", " ", "pLinearLayer", ",", " ", 
       "pWeights"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Predict", "[", 
        RowBox[{
         RowBox[{"rowsPerSample", "\[Rule]", "predictionsVals"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}],
       ";", "\n", "\t", 
      RowBox[{"pLinearLayer", " ", "=", " ", 
       RowBox[{"p", "\[LeftDoubleBracket]", 
        RowBox[{
        "1", ",", " ", "\"\<Model\>\"", ",", " ", "\"\<MeanFunction\>\""}], 
        "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
      RowBox[{"pWeights", " ", "=", " ", 
       RowBox[{"Normal", " ", "@", " ", 
        RowBox[{
         RowBox[{
         "pLinearLayer", "\[LeftDoubleBracket]", "\"\<Arrays\>\"", 
          "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
         "\"\<Weights\>\"", "\[RightDoubleBracket]"}]}]}], ";", "\n", "\t", 
      "pWeights"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionSquare", "[", 
    RowBox[{"rowsPerSample_List", ",", " ", "predictionsVals_List"}], "]"}], 
   " ", ":=", " ", 
   RowBox[{
    RowBox[{"Inverse", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
      "rowsPerSample"}], "]"}], ".", 
    RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
    "predictionsVals"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RunRegression", "[", 
    RowBox[{"weights_List", ",", " ", "rowOfSample_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Total", "[", 
    RowBox[{"Dot", "[", 
     RowBox[{"weights", ",", " ", "rowOfSample"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "rowsPerSample_", ",", " ", "estimatesPerSample_", ",", " ", 
     "featuresNames_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "inputTrain", ",", " ", "inputValidate", ",", " ", "outputTrain", ",", 
       " ", "outputValidate", ",", " ", "outputEstimated", ",", " ", "\n", 
       "\t\t", "modelWights", ",", " ", "error", ",", " ", "chart", ",", " ", 
       "result", ",", " ", "trainingCount"}], "\n", "\t", "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"trainingCount", " ", "=", " ", 
       RowBox[{"Length", "[", "featuresNames", "]"}]}], ";", "\n", "\t", 
      RowBox[{"inputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"inputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"modelWights", " ", "=", " ", 
       RowBox[{"FitRegressionSquare", "[", 
        RowBox[{"inputTrain", ",", " ", "outputTrain"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"outputEstimated", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"RunRegression", "[", 
            RowBox[{"modelWights", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], 
         ",", " ", "inputValidate"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"error", " ", "=", " ", 
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{
          RowBox[{"outputValidate", "-", "outputEstimated"}], ",", " ", "1"}],
          "]"}], " ", "/", " ", 
        RowBox[{"Length", "[", "outputValidate", "]"}]}]}], ";", "\n", "\t", 
      RowBox[{"chart", " ", "=", " ", 
       RowBox[{"BarChart", "[", 
        RowBox[{"modelWights", ",", " ", 
         RowBox[{"ChartLabels", "\[Rule]", "featuresNames"}], ",", " ", 
         RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]}], ";", "\n", "\n",
       "\t", 
      RowBox[{"{", 
       RowBox[{"error", ",", " ", "chart", ",", " ", "modelWights"}], 
       "}"}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7711662130281467`*^9, 3.771166215352922*^9}, {
   3.771197303426878*^9, 3.771197321169957*^9}, 3.7711979403664637`*^9, {
   3.7712530800287*^9, 3.771253141824217*^9}, {3.771254232616996*^9, 
   3.771254234573873*^9}, {3.771254814339655*^9, 3.771254823206771*^9}, 
   3.7712553544971323`*^9, {3.771328798359071*^9, 3.77132888435972*^9}, {
   3.7713291571827993`*^9, 3.771329174673594*^9}, 3.7713293391980677`*^9, 
   3.771331075460321*^9, {3.771331205881012*^9, 3.771331248469551*^9}, {
   3.771331393724903*^9, 3.771331454273843*^9}, {3.771331858875564*^9, 
   3.771331859310504*^9}, {3.771350065960774*^9, 3.771350191065762*^9}, {
   3.77135028904036*^9, 3.77135038946412*^9}, {3.771350481018968*^9, 
   3.7713505263093023`*^9}, {3.771350558816463*^9, 3.771350563948971*^9}, {
   3.7713506446320753`*^9, 3.7713507842900333`*^9}, {3.771350817906404*^9, 
   3.771350846145687*^9}, {3.771350876488069*^9, 3.7713508841268377`*^9}, {
   3.7713509316696663`*^9, 3.7713509342461567`*^9}, {3.771350984109829*^9, 
   3.771350998574337*^9}, {3.771351055424478*^9, 3.7713510624171057`*^9}, {
   3.771351101585807*^9, 3.7713511911911087`*^9}, {3.7713512369373617`*^9, 
   3.771351250335422*^9}, {3.7713513310208883`*^9, 3.77135133335221*^9}, {
   3.771351380363995*^9, 3.7713515293458843`*^9}, {3.771351774107162*^9, 
   3.7713517906407347`*^9}, {3.7713520499554853`*^9, 3.771352315025916*^9}, {
   3.771352349303665*^9, 3.7713523510083237`*^9}, {3.7713560430968847`*^9, 
   3.7713560435384607`*^9}, {3.771356193141917*^9, 3.771356209902203*^9}, {
   3.771356247076288*^9, 3.771356263584107*^9}, {3.7713563852974243`*^9, 
   3.7713564696868773`*^9}, {3.771356591772225*^9, 3.7713566103639402`*^9}, {
   3.7713566444034557`*^9, 3.771356701197536*^9}, {3.7713567502401333`*^9, 
   3.7713567575500526`*^9}, 3.771356823846187*^9, {3.771358873740418*^9, 
   3.7713588807112637`*^9}, {3.7713590285376263`*^9, 3.771359057644163*^9}, {
   3.771359109388794*^9, 3.771359112790992*^9}, {3.7713591431612787`*^9, 
   3.77135922756713*^9}, {3.7713592619363203`*^9, 3.771359292243853*^9}, {
   3.771359372067912*^9, 3.771359374741563*^9}, {3.771360895901122*^9, 
   3.771360899433941*^9}, {3.7713610810330563`*^9, 3.77136111925381*^9}, {
   3.77136401463911*^9, 3.7713640164404716`*^9}, {3.771446660355817*^9, 
   3.771446727670577*^9}, {3.771446873632465*^9, 3.7714469866514874`*^9}, {
   3.771447225288508*^9, 3.771447245418425*^9}, {3.771447572405847*^9, 
   3.7714476354199877`*^9}, {3.7714477162181168`*^9, 3.771447722343709*^9}, {
   3.771448126328205*^9, 3.771448131249926*^9}, {3.7714481648627768`*^9, 
   3.7714481686175623`*^9}, {3.771448253260311*^9, 3.7714482857993307`*^9}, {
   3.77144844007451*^9, 3.771448451243819*^9}, {3.771448558866544*^9, 
   3.771448563297144*^9}, {3.771448764648456*^9, 3.77144876860842*^9}, {
   3.771449067102228*^9, 3.771449080131538*^9}, {3.771494289253888*^9, 
   3.771494327853054*^9}, {3.771494615217038*^9, 3.7714947103326817`*^9}, {
   3.7714948502019863`*^9, 3.771494852978088*^9}, {3.77149494734484*^9, 
   3.7714949614652967`*^9}, {3.771495406943359*^9, 3.7714954693078527`*^9}, 
   3.771495540516691*^9, {3.771495803706192*^9, 3.7714958676028767`*^9}, {
   3.771691861212635*^9, 3.771691862651863*^9}, {3.771694375623562*^9, 
   3.771694390529674*^9}, {3.771713330936715*^9, 
   3.77171333185679*^9}},ExpressionUUID->"d54f38e5-c079-43b6-a6e9-\
599471a76047"],

Cell[BoxData[
 RowBox[{
  RowBox[{"citiesFeatures", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImportAllFeaturesClean", "[", "#", "]"}], " ", "&"}], ",", 
      " ", "citiesPopular"}], "]"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.7713559939252043`*^9}, {3.771358910281856*^9, 3.771358911513682*^9}, {
   3.7714488592558928`*^9, 3.771448865106896*^9}, 3.771690417560025*^9, {
   3.7716917617024937`*^9, 3.771691765072441*^9}, {3.771691812559931*^9, 
   3.771691826176497*^9}, {3.771691943131898*^9, 3.771691964958601*^9}, {
   3.771692100326106*^9, 3.771692166683044*^9}, 3.771694060071576*^9, 
   3.771694175211544*^9, {3.771694365496614*^9, 3.771694371469736*^9}, {
   3.771709660968775*^9, 3.771709665364229*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesFeaturesNamesMaps", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractMapFeaturesFromOSM", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}], ",", " ", 
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractMapFeaturesFromPixels", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesFeaturesNamesStats", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractCityStatsFeatures", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}], ",", " ", 
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractCountryStatsFeatures", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesFeaturesValues", " ", "=", " ", 
   RowBox[{"NormalizeFeatures", "[", 
    RowBox[{"Values", "[", 
     RowBox[{
     "citiesFeatures", "\[LeftDoubleBracket]", "All", 
      "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{"Transform", " ", "units", " ", "into", " ", "raw", " ", 
    RowBox[{"numbers", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"citiesFeaturesNames", " ", "=", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Keys", "[", 
     RowBox[{
     "citiesFeatures", "\[LeftDoubleBracket]", "All", 
      "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7717103678210917`*^9, 3.771710443037757*^9}, {
   3.771710501391046*^9, 3.771710502730191*^9}, 3.7717105485962353`*^9},
 CellLabel->
  "In[162]:=",ExpressionUUID->"b7ccaacb-4cae-4131-83bc-5988196d0d69"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesBlackBoxPredictor", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{"citiesFeaturesValues", "\[Rule]", "citiesPositivness"}], ",", 
     " ", 
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesBlackBoxPredictorOnlyStats", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"citiesFeaturesValues", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", 
        RowBox[{"1", ";;", 
         RowBox[{"Length", "[", "citiesFeaturesNamesStats", "]"}]}]}], 
       "\[RightDoubleBracket]"}], "\[Rule]", "citiesPositivness"}], ",", " ", 
     
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesBlackBoxPredictorOnlyMaps", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"citiesFeaturesValues", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", 
        RowBox[{
         RowBox[{"Length", "[", "citiesFeaturesNamesStats", "]"}], ";;", 
         RowBox[{"Length", "[", "citiesFeaturesNames", "]"}]}]}], 
       "\[RightDoubleBracket]"}], "\[Rule]", "citiesPositivness"}], ",", " ", 
     
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771709837759416*^9, 3.771709859563526*^9}, {
   3.771709939476246*^9, 3.771709960425024*^9}, {3.771710004765254*^9, 
   3.771710008009511*^9}, 3.771710860314969*^9},
 CellLabel->
  "In[165]:=",ExpressionUUID->"e777ef22-5b22-4321-919b-5b5a555a01a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Information", "[", "citiesBlackBoxPredictorOnlyStats", "]"}], ",",
    " ", 
   RowBox[{"Information", "[", "citiesBlackBoxPredictorOnlyMaps", "]"}], ",", 
   " ", 
   RowBox[{"Information", "[", "citiesBlackBoxPredictor", "]"}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.771709970895083*^9, 3.7717099754348392`*^9}, {
  3.771710803644577*^9, 3.771710816724926*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"f41349f5-ce2c-42a4-936d-e2e8197ee805"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0351838373879861041`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.012570744962448999`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0100423474630881061`3.", "\", \"", 
                    "0.0603253273128841055`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0100423474630881061`3.,
                     ", ", 0.0603253273128841055`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1645842756], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1645842756]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10.0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    113608694]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 96761492385744]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.94`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "139.`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.7100521787751641334`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1151312083226296717`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.9403145954204235046`3."}], "\", \"", 
                    RowBox[{"-", "1.4797897621299047621`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.9403145954204235046`3., ", ", -1.4797897621299047621`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"227.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.21`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.101053096436703}, {
                    4.382026634673881, -3.347168466940698}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.101053096436703}}, {{
                    4.382026634673881, -3.347168466940698}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3654003267063843`}, {
                    2.70805020110221, -2.892176371863673}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.7892262295751844`}, {
                    4.382026634673881, -3.041680251205649}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.3608415430798093`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.3608415430798093`, -3.101053096436703}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.7100521787751641`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5460220353071873}, {
                    2.70805020110221, -0.006823992069156737}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.8251833870977938`}, {
                    4.382026634673881, -1.5949209704525344`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.23236815754087894`}, {
                    4.382026634673881, -1.4772637965878193`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.507687448092427, 1.8536549265102482`}, {
                    4.382026634673881, -1.614099391963026}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5179536825105688}, {
                    4.382026634673881, -1.5970123041618192`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, -1.3976859272989224`}, {
                    4.382026634673881, -1.3976859272989224`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.22749084489715532`}, {
                    4.382026634673881, -1.473171528201526}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.2269976645737164}, {
                    4.382026634673881, -1.472744358803974}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.908866494572492}, {
                    4.382026634673881, -1.7100521787751641`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.506941423252892}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.43608124154645056`}, {
                    4.382026634673881, -1.7094155878320896`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.23236815754087894`}}, {{
                    4.382026634673881, -1.4772637965878193`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 5.025130663865953}}, {{
                    4.382026634673881, -1.614099391963026}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.5179536825105688}}, {{
                    4.382026634673881, -1.5970123041618192`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, -1.3976859272989224`}}, {{
                    4.382026634673881, -1.3976859272989224`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.22749084489715532`}}, {{
                    4.382026634673881, -1.473171528201526}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.2269976645737164}}, {{
                    4.382026634673881, -1.472744358803974}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.908866494572492}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.506941423252892}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.43608124154645056`}}, {{
                    4.382026634673881, -1.7094155878320896`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    100., "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 1.8536549265102482`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.101053096436703}, {
                    4.382026634673881, -3.347168466940698}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.101053096436703}}, {{
                    4.382026634673881, -3.347168466940698}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3654003267063843`}, {
                    2.70805020110221, -2.892176371863673}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.7892262295751844`}, {
                    4.382026634673881, -3.041680251205649}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.3608415430798093`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.3608415430798093`, -3.101053096436703}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.7100521787751641`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5460220353071873}, {
                    2.70805020110221, -0.006823992069156737}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.8251833870977938`}, {
                    4.382026634673881, -1.5949209704525344`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.23236815754087894`}, {
                    4.382026634673881, -1.4772637965878193`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.507687448092427, 1.8536549265102482`}, {
                    4.382026634673881, -1.614099391963026}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5179536825105688}, {
                    4.382026634673881, -1.5970123041618192`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, -1.3976859272989224`}, {
                    4.382026634673881, -1.3976859272989224`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.22749084489715532`}, {
                    4.382026634673881, -1.473171528201526}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.2269976645737164}, {
                    4.382026634673881, -1.472744358803974}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.908866494572492}, {
                    4.382026634673881, -1.7100521787751641`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.506941423252892}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.43608124154645056`}, {
                    4.382026634673881, -1.7094155878320896`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.23236815754087894`}}, {{
                    4.382026634673881, -1.4772637965878193`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 5.025130663865953}}, {{
                    4.382026634673881, -1.614099391963026}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.5179536825105688}}, {{
                    4.382026634673881, -1.5970123041618192`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, -1.3976859272989224`}}, {{
                    4.382026634673881, -1.3976859272989224`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.22749084489715532`}}, {{
                    4.382026634673881, -1.473171528201526}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.2269976645737164}}, {{
                    4.382026634673881, -1.472744358803974}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.908866494572492}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.506941423252892}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.43608124154645056`}}, {{
                    4.382026634673881, -1.7094155878320896`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    1., "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    0.1, "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 1.8536549265102482`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "12", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0306796338398592112`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054466664575029168`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0197863009248533776`3.", "\", \"", 
                    "0.0415729667548650483`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0197863009248533776`3.,
                     ", ", 0.0415729667548650483`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[253449436], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[253449436]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["100000."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1448688175]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 248335183228880]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.47`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "332.`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.685693006562167362`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0308471783249350366`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.7473873632120373589`3."}], "\", \"", 
                    RowBox[{"-", "1.6239986499122973651`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.7473873632120373589`3., ", ", -1.6239986499122973651`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"211.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.46`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.095137947985557}, {
                    4.382026634673881, -3.484156237369843}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.095137947985557}}, {{
                    4.382026634673881, -3.484156237369843}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3694993139879386`}, {
                    2.70805020110221, -2.8800728329359875`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6796039099927365`}, {
                    4.382026634673881, -3.3207341388066762`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.5057683645578592`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.5057683645578592`, -3.095137947985557}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5524860657235198}, {
                    4.382026634673881, -1.6856930065621674`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.5524860657235198}}, {{
                    4.382026634673881, -1.6856930065621674`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.8032247750307868}, {
                    2.70805020110221, -0.30174735641625267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.7165401848871025`}, {
                    4.382026634673881, -1.6548458282372323`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.6856930065621674`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.697334282536671, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.095137947985557}, {
                    4.382026634673881, -3.484156237369843}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.095137947985557}}, {{
                    4.382026634673881, -3.484156237369843}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3694993139879386`}, {
                    2.70805020110221, -2.8800728329359875`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6796039099927365`}, {
                    4.382026634673881, -3.3207341388066762`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.5057683645578592`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.5057683645578592`, -3.095137947985557}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5524860657235198}, {
                    4.382026634673881, -1.6856930065621674`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.5524860657235198}}, {{
                    4.382026634673881, -1.6856930065621674`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.8032247750307868}, {
                    2.70805020110221, -0.30174735641625267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.7165401848871025`}, {
                    4.382026634673881, -1.6548458282372323`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.6856930065621674`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.697334282536671, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "51", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0306812260112816378`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054457955914173845`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0197896348284468671`3.", "\", \"", 
                    "0.0415728171941164085`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0197896348284468671`3.,
                     ", ", 0.0415728171941164085`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1757969273], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1757969273]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1000000."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    577543458]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 109229782446033]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.87`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "78.7`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.3532281355538868794`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0177838811744763826`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.3887958979028396378`3."}], "\", \"", 
                    RowBox[{"-", "1.3176603732049341211`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.3887958979028396378`3., ", ", -1.3176603732049341211`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"230.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.41`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.10121641587885}, {
                    4.382026634673881, -3.4841043420272206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.10121641587885}}, {{
                    4.382026634673881, -3.4841043420272206`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3644603677347567`}, {
                    2.70805020110221, -2.89302763919441}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6795063028715607`}, {
                    4.382026634673881, -3.3207141727949288`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.505375893479908}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.505375893479908, -3.10121641587885}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.280697433172254}, {
                    4.382026634673881, -1.3532281355538869`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.280697433172254}}, {{
                    4.382026634673881, -1.3532281355538869`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5503178007874564}, {
                    2.70805020110221, -0.011077065557051569`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.3710120167283633`}, {
                    4.382026634673881, -1.3354442543794105`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.3532281355538869`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.547923591886077, 35.30314682219158}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.10121641587885}, {
                    4.382026634673881, -3.4841043420272206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.10121641587885}}, {{
                    4.382026634673881, -3.4841043420272206`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3644603677347567`}, {
                    2.70805020110221, -2.89302763919441}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6795063028715607`}, {
                    4.382026634673881, -3.3207141727949288`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.505375893479908}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.505375893479908, -3.10121641587885}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.280697433172254}, {
                    4.382026634673881, -1.3532281355538869`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.280697433172254}}, {{
                    4.382026634673881, -1.3532281355538869`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5503178007874564}, {
                    2.70805020110221, -0.011077065557051569`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.3710120167283633`}, {
                    4.382026634673881, -1.3354442543794105`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.3532281355538869`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.547923591886077, 35.30314682219158}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"]}], "]"}]], "Output",
 CellChangeTimes->{3.771709976728957*^9, 3.771710819250382*^9, 
  3.7717117612541*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"045f74da-8973-4350-af6e-02af847fcf00"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LinearModelFit", "[", "]"}]], "Code",
 CellChangeTimes->{{3.771711035486508*^9, 
  3.771711046638187*^9}},ExpressionUUID->"66d4097c-56dc-44d1-9170-\
50ecc5b463c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCovs", " ", "=", " ", 
   RowBox[{"Covariance", "[", "citiesFeaturesValues", "]"}]}], ";"}]], "Code",\

 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQfaXg6wN3yTeODZI9j0C0XnTfCxA98eoPMO1Uqf0f
RFfIiDJ6AOkn1p2aIHrS7Ylgeq+73hIQ/aVAfB2IDt2okuAFpN1m22aD6O8s
J697A2nRgg9g2s0g43A5kN6YrXwERO96bbjtLZAOK14Ipu/YZF8A0SfseK+D
6AR9Z/53QPpZO6cAiM4SUREF0Xe4X4qBaAVTOTkQzXTUDUxHMcbrgugtRgr6
IHrZFl5LEC126qU1iO79d9sJRG8PlnYBmxtzcc57IH1sMec8EB12NHoliG56
fh5MzzlvcRhEO/IFgGkAWOiTCA==
  "],
 CellLabel->
  "In[168]:=",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"Abs", "[", "matCovs", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.771691374454886*^9, 3.771691375723896*^9}, {
  3.77169441948938*^9, 3.771694436092937*^9}, {3.771694877613312*^9, 
  3.771694879872117*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
Fjo7r6vElOuvA0qrRKgZ8Hh2Yl43dByio4OacsXqmzh+E5dPt12fNPHhVxqF
Lip5Q6dFWPdYs3dsPBuXxp/o+36OwpL9UgdCVnNxZ9Sc4eLiKsg4P3BOzqRh
dGRuhct3ISROv3kxhnBfzNOdkltPMVA5c1HdmXCrw6qfp9d6i/D37Rir5G8U
Tr7XqK6R48N/SvmJqleNKL6gsFR5Co3V5xslZj/ng5/uUVK5sQVejocNV6VS
GL3H8/GhR1yUn7i/pnZTDQqP3HbW2EbmK9pdc1atAH4vDmvM0utE7Y+3sWdI
3vdb8e7WIw7h86BBi3v9LKiMudT+6j9+OJqmD5JjP90v9t6QycXSZ3ZHzmox
eCg8anWikcKNhC1jp0nyobN9V9W+tYQzU2c4Xt9Cw/BQy99Nm0jOWOyvlkb6
9+J2a+fzeoR7+k/Kbp3fBs69J9H/iK9dsFC7+4dwn3LSjQXTNgqgaJ0aWepP
421dt/PNaSSXLem5d4zbiZzEHIUikquDolNex01j4Jr7Xa9rnQi8hqlNe0Yw
0L4Z6/HTjPTZVW0t+jgXs8Oktq04S+N1+vhDJ/xJvno0J9+kqAstOl+KX0sS
vlr84n6CK4UP3Ijyug9cnOlaHt+wi8KV0ruc3484OKCqeHuo6guq5pfbvyc6
f6G9WdHGh4fV8vnXny2sB2vzUNIrUxrOg5mXTmwTYMrKB/UT+9pQYani5kZ0
195m3pTDW7hwfnfI8u6/KvQerMg7Qfx36Sq5yox5QlQ/7nvXK9WFZfZjz/dc
pXBifZp6FtEjRuqA3e7cary8KRVvN57GrJwMhdogPi72rotJ9GzGohOfVMNP
0Cg+IultbS8EP2bFhBVHu+A54XrRy1RSn3L8his1QlhfFGrFlLBgS418FTWK
gbLXi9g/NhSe0/vZX2K5SNv+Xnh9MeGw1JdzLi8nOnJVYl6iWxtkUqJX7Ein
sPagbcirfC5aAxvvbwiqwebi4vNus2jEb9jk9pniIyi19krH7FaEHlx89OJS
0kfH4mPy1gnwR99a6k96G15fCAjjTGfAmv9sz/BtCkG6BQ/nhPGA5K9clxsk
T8ZR9zXucmFhKMqbvLgGd/tcKyxLaKyLZWqMd4mwutP9pqc54ZabW54k6zJY
2pqp9FxEfEe07ZjyMj6ECzsvrTNisJzy7PkoScap7b52zhk+jpn7v8/cxWC7
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
818kKnu7DRisUZco7xqkUNnCSdT05GNTwb3rTQo0NuaNWbwwlQ/pJoWIyF/N
CK1+djjpNuEE5fpFS1hC6Cwr3J5OsyBrk7q0oJVGpUdXmhPJ/ZGdWpY7lDiY
mrT4keYIGh5Sc/20NvPRHvwmcWNjE0Luerd8ukgjdWrk368xQgQ8OsJeO4UF
iZR/U7dRpN89l6h5fBdhg6mda+9DDq60hfxUHUXqdfnUs+7EbyXtcp+nkVxV
M/vdL79FhNMSRsnvWyJAu8TQ1+1r2rDuzfUc93Iak84vfv8tQIS6W12PO7az
MTDyqHKFKtFB43z2l0ZSZ1muv0zqiQ/mjZFoIv279k/cnq27KUy38q7yZnOB
b5t0DxLOuat9bXxXIoOYqCztYZLrPsSOy6qKpTEt/fb2UTeFuOm2+3XdChYa
2rxZM2UZHDJq/bVkHwVsdzaY+J2LA4zqTIE5jUWyjZ7y+wXoNVyW1uLcjmfR
D4Zv+DPY7xkh49ZFY7rjq275F0JovI6xLYgifWWYwzU/LcRFiYXmZr+7MDXq
L7Na8r9zZ/QrrjMFdX+DqfveczEjp124pYjGqZ/mt3c6iaC5yLny63Q2XF3D
3UNSGHBl4p5kk9zWlSX61RJMfK+zJL+c6EJCzo2J/F7ij6wH8SyREJsHHVdp
BTJ4fZLreWsEg+wR9q4SsiSfXbo167AC0SWdYOPo4xQufC/yjJrOQ/8B20Xz
ljDo3DVCZYQMDUO7a+qTL/LxqXZZpWomjaOyK3xO9QgR3W/+xXBCN96PXsH5
S/Q30HbMxD7iM5E7a7aJRpA+UorVXfWU5PSxBiXXlUXwv33U4vnxbpzwKezV
msZgoPT+lgM3KDR6xCmo7udhaqGB4oW5NK5ULvwz+R8fe/WXfavY2wpen/nt
wxYMhj9f32G5gvgk+2Zy3QQBzqmPcL9gTfKy0yX1vtVEl3JGe5roCUDbLXys
VU9Bbsk3w/nXeWByF8uIeusxy/nY7LJqCnnqif5e0Ty4KXZ+rX1ZL1bfxPGb
uHwq7v2buPUFceun4vaHiNv/Jm5/r7jzC+LOZ4k7fyrufP3klS+q5cnnc2La
ZecpMlC/1r50vqkIbyT8Fu8l3NhxLV5tdagQbJcw2fVUF+TrzS7/INc9GnVm
5etICvufpL9rNOXhrXxtgikZl853cvtmvyT5+OSKIkmSq8ZNn1v1T53kzAz2
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
vpqYSPEqO+vxr8UsqqseFBj8E2LB45B7L1UYjChR91fw4OLSO+t3QX25mLDu
aE5cK1k/hvwMzc8SzBtq3i5axsPGsq93Vxqx+GhyZIl4iwhvwm9vGFX3DUqn
eIzqKime9jXf0CP90MW1yyxWVgRLqYoo5zbB1QW5xe8Jjp7cNtpzJqkH9Uv7
Nt7435wqDkY9JX36UXF0efurJoxK1WsqGE7+/ajpa4NOCrF8gfel+zsaMMHk
zNwjuxgYflPo6r3Fw5w8gXXVz1J4XTy5Jp7gxmvnspwaV/KQtzdYmnO4mOCI
ohzvFSyynFfVNe4VofG1XlyfdjNeR5ps83lF+P70N8kf//Lh8TPRp+N0FVjR
431XxpD6/qzI+u0NIaS79d89yGjACQNpbDf5uZvmR3svDeMhlhEY2w8rg7E4
58KRnSxGxbUfnFxP+NLX+0byRq1I2X53SeJpsn9vv2+bbiVG84/Aw+MPt6Ev
QC1sdguDwY1LPQKyBajLqTFIvV6L8PiDYXesWUySuWua/UiEo6UD70v3tmCV
lvyerJksRmzd7qDfI4T3oBlL6jc0wa8g6IHrLQaJK68eWeDFR2vvLr8rJyvB
de5KyCbrfrr1ho+BS7nwdL8d/HlFDkw/sMeOfpVg5y5eyud5HCie8t7w2yKV
Wt9o+I3GT2nnb7T7Bdr9KW0+hDb/RpvvpekXaPosmv6Upq+n+YfQ/JFo/m80
f0uaf+907f+qfUaxBD9N1nhzSYhtv42sdO424PzfbSPOkTo4aODVjgeyAkx6
/GFGQ3QVRv15sJB3iuB85Zm8/eP4WHjHJ9+KW45Z63suVyezKNit5dU3SYKN
43Mi/b05yNfqVprdRvr/7n9rVxUL4CaWk1dMrkXjIPHLymaCg2UULC7u5kBl
7MWumO3vkTnz4gbVdAa6XkEXVs4WoCrpypH2RdUw7O7eNN6cQaaTcmXuXB6i
jSYuyawoQunejdqL/kignKaixKni4J3qmswK/SyYn++WqTpC6uRqK18XLqnX
k05WzVpajlFfCi7/kJXisr/1/YB1pM41vhlWHcbHP50TY6xIv1gcXxXl1sSi
/XHaIO0EMcINOtvffJFg1tips/arcXCy8cDFqHUp2LHOMsmV4MJzB5u2niVf
75/QqvbVjof1K2/n/iT9T8VvS77XQRFefP73cI55My5oV79STSB9aGre/ch+
MY73xFz2XspBzjyvjuukH6UwG+ujUkn92Bx+dtBLAfJrE7b+m8JiTI1295kS
IQqCB/0pe9yIpXYnJqwbzCImm/duhr0QMj4HrvIk9eBoBs2VLCZ8qvVr1J5m
LhIfJEw7sLsAspZKsSG2DI7KDd1Y7EZ41qWoZWNiSvB4TGF90EnSdzJ2GKcv
EyNkh0pBpFEbOHs/XXcUEb7v6zRar0OAgNqu73tRB6He+19D1hCck2S5r9JX
hKnOcz3lw5sxOvv645DbpB+4pk/b4MvHnuUzix4GEz7V7vjJ14Xg3W/9Izo7
RHAWN30+6tUK2y6uyvtPDL4sTD9TsJL03aSRJ7aHVmPw3KwNX0oZeKdezI/1
FCDl0utUY9caiK4EvBs4T+qDUfFQ2b1iiJRSnsx50YZLuk+TUt+Rviy5M2yx
rgSDTww7ZvGa4PB1zncD7jM422Yl8I3lY9zr38OzNb8id5Fp0qk3EgyPfP3T
Pq4dWg0y6Wu7n1PrGw2/0fgp7fyNdr9Auz+lzYfQ5t9o8700/QJNn0XTn9L0
9TT/EJo/Es3/jeZvSfPvpfmTpxqZ/LI5I8VQS29bkTLhH5fSvC+vlcD46kvP
PTMZuLw0Y2eHcaGbENqmOzsPUmukycWwMF+W/vJonRhuvX9tDKvaMbspdJGz
HMH5jFqJFun/a2adzVa8y4e59/d13S8ZLJBvVzz8m4/O6afPNR2vgvZ61f1B
hGe+ttu6+cEjsp/mlgWMmiKG7QyPgLE6DIad4exa95qLoeK98zeMyUf8j/hz
3scJjxvU7b9NRwxmwuKiUMU2BEYfC5Enz+faQrbrrqwQOqKpY5Ov16HxoVuc
SjyLGWEfo1Z0i6FxQam0azIHx++H3XxhK8Wvr7crbc+y8HXt81BIE2GtZmJ6
sJYUdvfro8uqGFSoXrlwvp/wFA+leKNbLK503Uu4Ey1GtF/W1u8m7Rie4Hdv
YRCDA8q+d7Zv4uOQ7eHHtyUVeBmw+q57NYvJscNOJ0dKYFGjfM+3lIsD9bt/
6hH89vfL5jv7ciRo7Xgw4LyU4CP5gs26MVKs+hIYdiBaineXZ1UMekae+5lT
dqrhBFekP+uqDOJD7mLTpqTCShyU2z5eMp98njRe4mgtEQ7PdzwlHv0Nhzbv
QyJZZ3P8N63QtefhwiDPa9XGJVCOu7G60IDBXZO8g9YdXKw5+tjLk1+AzN1a
6ssJvk3W3GSR2EP6QvjJRrnz5chUvTnmLl+Cp+qPta6d5+ClmYv2xKMfsL4S
xlOcGSQUzTOQfcTDjVEXWtqOlcHzjVRlIVeC8UGK14eTvrUoYenEqyVpiHZP
du4k7zGm6e8HdbL+CsYVBl3QyUfgjb6dd+1Y/OeTmOr7QYSGL0/MRza34GzO
AtvPNQS3G2o0fr0vwEKdYA3HgRoYvx5Z/zCC9N3wDS2qflIMml5+8x+py516
t2RKVjLwHZYRuFWBB5WhiV+H/S2Ejk/dlYIeCU69EokSyjj48Shqws9hWdT6
RsNvNH5KO3+j3S/Q7k9p8yG0+TfafC9Nv0DTZ9H0pzR9Pc0/hOaPRPN/o/lb
0vx7af7ktPyFdLW3WScdpbjod3KOWhzBp5dV187WEKNzIPNE3FAGjtPV978f
yyX9Jr358bBspN1w6ncbILi622NnsJUQb890v9qVVo9cW4eizVwWFvtTvg39
H04vtVk5yJGH8x7RJ9JOMrAMH3zgxmDCqxuFPTUvyqGetUlG4w+D6smLLqsv
EiK4YWX6Zct6dIYfPtEnz8Cr9Nn7kbO4UOjX/zc+Mxu3PdxbXAsZjDRvjdnq
LMA2lyEe9pNr0GuoqXL3AIOk1OzruoU87Fnv37Eq/At21eaXX/FiCU9e+6dz
qRgmDrXu6XptMBqlOOki4QnrL2tP1yVf9y0K020ifGVayuKYmBFSZM/ZZdpH
eNKv2q3K8WV8BDtOkx9D6spfNLmbNfChcuawmkn/V8RxVp9XqmDQOm7frp8X
BDiS3fXj+v0adN0Jrv3vNovlR94sb4kVQ1uhXt3boh0ZE6J5F24y2G+06832
Y3z4Wr9ZdWRfJWxj58Unb5US/v9VLfMKi6PlWQNZBEeL5Sv8io4RHFV1/e8f
hgeTcKd68dZyyLnV6hY9ZeA+e0/UrnI+Tq50Pr2+9it0rA0DtxP8diNTNiGz
UAi1bXpcmbuN+CQVK3jJsbD7tTToqasQNYcud9mMb8DPqNEm5lYMxvq4vbDZ
wMMHhfXlbGExDnt9HWZFcPJWpbMBq3dx0NnblrBi6XukeG+smmlD+tOrGVo+
tjz4JJ/Z+N/IEhirHGl6JMOgLH/tNfefHGhUDzmbo/8JWxs3awjtCY5J8X7I
v8TDjL8n9t1/UIrf+/5VdIHgzJuXmW+uIsSHjvgVPa0ZJc9yng4n77GzsEk5
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
0fAbjZ/Szt9o9wu0+1PafAht/o0230vTL9D0WTT9KU1fT/MPofkj0fzfaP6W
NP9emj85LX+Bli9Dy8+i5QPS8k9p+c60/Prc+mn9TY4MVixZ8WNhJA9NKtF3
3mqWoaZbL6zbjAXz60zSlAsinKvz7+z62Iw2cczgrCwGYxv2zghcLkD6siFt
9y9UY2H20GN5DKkD7bL6HV0SyHHM6gaSeSgQdVmGlbB4+MS7boO3BPZDtzZE
e3LhuGab49A3DIKzi5XbhggQInJ2yYivQti084YVNlLcyheoZXqwkPUJnDPt
tghGiw+rPdRjcc3RbPvleSLE/vIbvW3ONyTYBhb+Xc3g/t6hi2M1eNDcZNkt
vlyEqtK2aYc+kOeg48ie1JfAcPmemv5SDsQWKxSXPCf9xen2nnn/xJjOyx4a
qsuBn3vjr1TCY++oWncpVAnxb/M7g/s5jTC4b9qa9kCKUf9klu++JUWhucWp
iZcYBJWe9fwRz6KrxV/Z45cYAWnVomXTOZja++jw8xIGMdvb9j49IsCi7wq3
YmxqYOcTt6mF8DWfxXK8TdsYpG9Zssb2Ix8KP2TnPuhlIBD67bZbJcSy7jeF
W6/UI17W2DVzrBSez/wnTyQ87Pz8lrb0kQLcs1qesVWBRf9Ds3n2MUIkPpc1
UZJpxKkPgyNtwxi8y6n4MeICH08Kw2LHPa9EzrYV7WFZEsSUuM60/NYO39Jd
XtcMX6Fo1zqOQy55Ljub/lSy7cjymR7iYZyMXw/Hr1ieL0GlekOZ0992bB3x
IH683GtozD+5chnpx97pT+Xvfm+HMGv+e6l3MrW+0fAbjZ/Szt9o9wu0+1Pa
fAht/o0230vTL9D0WTT9KU1fT/MPofkj0fzfaP6WNP9emj85LX+Bli9Dy8+i
5QPS8k9p+c60/Poi7ZK8iOVSnBs73327BvmclVf9DpSS/Zo5Is9xIdnvRxd4
fdETQfWm/AkD/W8od9yzvseNxa0hnwObZMTYvK/sh1dsK0xvjhhlZspit1VW
tIGnCMo4PTXtRDM8Hiad0LnDojJqP8crSQzl4N6amH3t0NsYcfP5e7K+s666
VC6QoH3XyD3J6RxEJeY7jRwvhd/trK+/T5F9r8tXPzpJgF9rA0+/+MQismSW
v6K1BOfG/3y9R54LHUfXioMWUsyJVtl8dyuLhccbe21tCY+3meI8cowUGWrM
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
   "], {{0, 0}, {51, 51}}, {
   0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{50.5, 
       FormBox["1", TraditionalForm]}, {41.5, 
       FormBox["10", TraditionalForm]}, {31.5, 
       FormBox["20", TraditionalForm]}, {21.5, 
       FormBox["30", TraditionalForm]}, {11.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["51", TraditionalForm]}}, {{50.5, 
       FormBox["1", TraditionalForm]}, {41.5, 
       FormBox["10", TraditionalForm]}, {31.5, 
       FormBox["20", TraditionalForm]}, {21.5, 
       FormBox["30", TraditionalForm]}, {11.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["51", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {50.5, 
       FormBox["51", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {50.5, 
       FormBox["51", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.58984375, Automatic},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.771694421784465*^9, 3.771694436839675*^9}, 
   3.771694614094281*^9, 3.771694880734344*^9, 3.771703749525962*^9, 
   3.7717090247043657`*^9, 3.771709521020454*^9, 3.77170967253463*^9, 
   3.771710317592867*^9, 3.771711749314455*^9},
 CellLabel->"Out[169]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvQd8VNeZNj6b0cwdObtxstn+7e6X77c12f2nO8VJNtU9juOeuMYFx8a9
YBuMbYwLtgGDC9U2zfTeER2BkEASEqhQ1NtIoz4q4CSb7Pm/z3POuXMHSQ4E
O5ty9Pvdg3SZ2855n+e8d+5zn/fSWx65c9i9tzxy1223fOKCh2554M67bnv4
E+ff/5CsCv9JKPShP5Plo58I4XcVCtkm9XM2muCaU17xMP8Jq1/+8pf2f0LX
DbLu6kHWfcis+9WvfjVg2//5n//x1900yLr/qw//9+a/srOz1Y4dO/jXD9hm
qra2NvXOO++o/v5+btPd3a1mzJihXnjhBbVkyRKcSugKfvbDqri4mOvHjx+v
xo0bp5577jlVWFiofv7zn6sFCxZw3ZtvvqmOHz8eupLbnKUOHTqkXnrpJfXi
iy+q1atXq1/84he8lDVr1nDd66+/jnPQVx5TTU1NPB384Epwyth8woQJqrq6
+gZ+LMr/2rlzJ4+Is9mzZw/W2b7Kzc1Vmzdv5l9/m94HuCaca7APGhoa1Jgx
Y1RPTw8PPGfOHPZBbW2tev7559WuXbv8PojH4+ruu+9Ws2fPVkePHlUlJSWq
s7NTbdmyhWeDbaZMmYLjmG3+lH368MMPq+3bt+Mi1FNPPcULO3jwoHryySe5
bv78+WratGm4isvNZj/72c84PIlEQuXk5KhRo0aprq4unu5jjz2mysrKeJU4
xXffffd60zcVFRXqnnvuUfn5+Ty7Rx99VB0+fNj2DTp+1qxZg/XN8uXL1eLF
i9P6prGxkeOMvkFYjh49mteIH8TSK6+8YsY6zOsZOXIkTtaEbVRNnjyZo4Mf
nPDYsWNxYfYaEXYIIfszd+5cjj/+Rbjgp6OjQ40YMUIlk0m7GY6EHp04cSJH
7q677uLZozumT5/OzaRL+H/Hjh2zXYOBwqDZH3x01apVtmvWrVvHA59S15zl
d01fX5/q7e1l17S2tnLPuCaEt4S6RYKMAccCkYL4BZJKS0v58fr6ekaFdIf9
OEZ948aNDBAMIwLSgJe99sQTTwAttkcQGLhaO+r4HT2wdOlStWjRIm723//9
3zypoqIi2yM47927dzNEpX95NAHWe/TI3/GfDICcV45Rkp651JwHrgwDBiAj
MG3nIC5wSfjBOQIr0jlXmTBD0GKMq6qqeIoYYPwg1EzHhIIdictDB4J63njj
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
ezm1lOEtBLSIzonsSUvEHNrOYu5vUHhO/zjgOeMvPWAU8Jz2cUzMTO/tFwkN
y8918HTwdPB08HTwdPB08HTwdPB08HTwdPB08HTwdPB08HTwdPB08HTwdPD8
g4OnhBEfGAX7A+dU/rpqL6K8pJgSkaJn2edGvKehWJcJaQv20ltP6RGeRHqA
gB98U9Ke2/Uk8Mi6dMAj69a8h1XLjhtl25adNyMcCkYJCseQGqKGIIbGI6x6
8CRSYj5qIr+rYi6fbMoSglpnHnU75j+06OpIIKLLBY5L+dwvRhVD2OoPBmgf
tKgJjjS9dKTB3xCZ4eFp1FKAnIyWfdagr3oo2EpWEvJ41O7hSDjQXIOGZP1a
uml41lOjfr3qgRCJjyh7iCT8TYFGLZVhxk1khbnylDCEYpHKOXJA8E9/D3SP
cBiBsqzjMDikgyILLTSZzmf6sYDQqRfikNZ9EIbQK6i3db/qTeylB4kXfDRa
9AxQSwSPIYKfFgS/wLONQQITs+IJaB9kErDWKFosW64fIB+eBkI8PDVmH+wK
r3bXr7Eyrfo1ptuhY0tTxwrErEojYg8U38Yr8PWlIf18ngpPa2WCKxLI8qFw
YxYeAGsNW8MGTign+61gaBFw0YAfB7QOVh5mZUbUQ0g0evY5avmrEtQjiF3A
+K88YBkwnv4XkEdAZEUY/xdh/BWB8d1nBuPB5U8y1gSwRxFUmA+vNYwbhDoN
gmtDWqKGTgV2rXbIyKjTpNSQrPV2HKKILWqlbPK3RvBNRPBPTh/BKeFS1AqX
6B40n3BE3M2P+aK7eYMjmI+zFwDB2hWM6F3N2S0SkIlC/YXQjtoAl78HIniW
toYRdvNsD/VUc8I2QKhaEAvECV1xGqi50Trpho308DnZ02dwBM9K4y7KuCrn
CoKPEMEVIa0ax0UOiuCWPUCc1gTh4iRjkIXSLnoEQeolGZdFsNb6zD41BG8j
gne+B4KnE8HTYja/ODLzFBG8lIjFISL2QPGtnJwHRbBVkpKTco0WLKBMFw4F
l+L6ovYqmXO9TeVMlK1W00C0Z0eGE3vLTo5gB4V9JnUsm6Racx9xCHYIdgh2
CHYIdgh2CHYIdgh2CHYIdgh2CHYIdgh2CHYIdgh2CHYIdgh2CHYIdgh2CHYI
/l1AMN7ZhawlKFVpzTEI1s5EL4S0MxGcrPqPxwN9VD/Iu+91g6xrUF064gBy
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
h5/v7u5Wr732mnrmmWfU66+/js3eH8oZZmjndlIOVdy7bmWqhY7QheXBllWG
cp5lSFIBd+gFqilBNr4d2JIvDEI512l58eareUN1NSnn8yAaWf6DlPMfpJwL
ma4Hy7SfMuXAXXDZ1/gORcS67knM9ibyfNavNteBZEEShLSbsTOjnKMkmzST
ONyo6PwuwvQug+kdnM0429cu9/yJfinPwBqjvWTSl3TL0gz995HpnLeEbUA5
TaScOF/CaM2FTP4OUM5PSTmxYDFzGdFT5piHwSvkmIfIMQ/yJr1bgt8/5Zql
lE7iFiXq36jMMjebKWUsbjyxT5gRA6dF5JiDmmNgJrvkixG4yDIevih99a3B
OaarBBzTVRrzc/wiGn3KQo5hafK2PBmSZapm+p+DY4RpwmAaZC686/H8e5+b
huCYx9LzL7nGZN1qe+60U8aNb4/kSYNzzCRyDO+5SicMzTEShp5vZV0tqfWh
wThm0W/IMTG1atUqnzSSyaRPGvi3t7fXUEzow6qurk5VV1eryspK9corr6g5
c+aQjBYtWqSmT5+uOjs71bRp09SSJUvSspuKigpHNY5qHNX8EVHNR9SGDRv8
9CWRSKiqqioyx6RJk9Ts2bNBLWAKNXXqVDIHGESYxNLNn6rHH39cjRw5ksnL
I488wr9LS0vVCy+8wH/xc+jQIXLVL3/5S71hhP+1bNkytW/fPpWbm6uOHDki
ax3zOOZxzPOHzTwZbD8OxBP5lgEWLFjgM9HMmTNJJiCVESNGqMcee4w5yrhx
4/gvfsAgY8aMAamE/sSno/z8fFJNT08P+Qv89vOf/5zrwG34QaaDLd99990g
He3cuVPV19dzaW1tdXTk6MjR0R8NHQniffRjQXJi6chSDe67cDuF+7Nf/OIX
auzYsfa2ieSCz5w4cSJAR/hZvny5mj9/PrfcvHmz+tWvfqWeeuopdezYMf7/
0aNH1dNPPw2asl8egePAj+5+zNGQo6E/BhrS92Nnq/Xr1we/TlYrVqxQ8+bN
U3PnzlWbNm3i/4EsQBo2lwGZ/OxnP/Np58P8H8lueBd3//33q61bt3Ld+PHj
1bZt2/g71k2ciNfs3dfNjnMc5/zxck7g62b+CJeoyZMnkzmQsOBnwoQJPots
376df8s2lnN04pKpGhoa1F133aWysrL8b35Gjx6tli5dqkaNGqUOHjzoCMcR
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
J+iU8fmvHYY+R2kQnJBuAmr9xvhK40MMz2C4VSIB2zU52JVblCVv3YGIy72y
5OUpSaow1Z36dCB8NsWfWa4FGkDYZrqBp+QIzsxQbnfD6Y3JG23AG8H9Mr4M
G0fcMo64FYwXRqSva4J9pcuEche3JV7Q6PdOE+zbT4U664U8z3GOe5bdcXs/
YBOe7QQufUrEHfZoZdA5FuJIC+ByD2H3NIJER0TqxPodrBTZ8DnKVkZUKDoQ
XXtgaOSMkF8x3qe5Pg8/q7vlHP9EU5cMMlXRl6Up+rmkjWc6FUE+ct7x14qg
R5U74ZMuevhYK1NSnfu+xhR+xAuK/jqUOix1WfRXdFr0p6FDjZnyl1JHR6Ct
Q3l7x/UjenmZp5eX0TFX22ajrHfETGnKiydX1pkct8203VXr2LAOoRXrzpq4
rFEtt5U3puvzSZf1qJMt66lc+Odyn8GvP5KyXgIUo6w5+uKr0pc11uWEnbYR
sq0pZ1b8YgUwkdqQz7LO19cCI7WW5rs6Mxiu+/KJcGJR1utiZi0FsrTj7WyH
ZUwxn5vrP/ScWr2LfwH625R1KIFcxi1skdOXdXYwryBPnb7tqjYCJDSULOyk
rOmZW2cywU80HbNlbcvalrUta1vWtqxtWduytmVty9qWtS1rW9a2rG1Z27K2
ZW3L2pb132FZzzFuVWV0oylb+9GW9TKeE09LFv7GZX2MxpMu9xks8/+TZX1I
tnyWNctVvrZlfRJlbR6O6ZLmhfrHj7usq/RT7TKWdRnLujz9U21IR9fcjLKW
4laOZRBXdVbWJicaXqp4NgqzRcd4hhYvUv4u4bJeeY2MvMsYHOZxn6Ekm2PP
gPqKZX0myvqsDmUN2UtTNYYXnkobk7R8k5rJ4cWSRjZs5TaMjsptMTyxxmms
3KrL+lWWNb1Pc/v7DbgsShlXvuF9yrrDNFa3v5Pn1n8y5o2BNAqxolLFGF75
Y06jalWu9eFxso3HhkJQRp0cc1OplnJCmimVpzqUZT00ovJUGYhZvp5lvZ5l
vYEOfTqw22H+ZVR516KskWNZttYLEbdD9LWcIkZL1+biY9Zi9OFrPPLHSfTM
qZTR3PlzayUAVN5hwxj8COzE9OmFL2GTHCkeYLsf9Bg7rD8gsndyMtTqaaUH
3P1MJ1X+PJ0oAz9KVP3el1JU24Ro2ip/JyC9Ulmv53P+tFVepfKCs0yVJ9bx
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
178Gr9XX1/v5+fl+XV2dnHXLFcsVyxXLlQ/gioHHf/3Xf3UKFHldvgrxpxsY
4/fv39+vrKzEK35RUZHfp08ff+jQof5LL73kJxIJ/SOWQZZBlkGWQR/IoG7k
DaBSXl5OqBQXF6dAJR6P6+/tlEPjxo3zFy5cyH/Pnz/fHz9+fAqHCgoKLIcs
hyyHLIcUAJYvX/6BHJowYYK/YMEC/htwEcikcui0gEPJZJK/rm/fvoY1bKFe
eeUV/z/+4z/Utzv+wYMH/cmTJ/Pdly5d6u/ahacKFkkWSRZJ/98iSf3NxgUM
CAUDh2nTpoEpGRo1hk4VFRVEzauvvkrE4H9AzssvvwzUnJIKqMbGxgBQ//7v
/04gHTvGVcv+0aNHCaz33nvPAAq9Um5uLr8Vm/xCCygLKAsoCygXMAjAgG3J
kiVhQDU1NQX3ZPhWoAWIwf+OHz9O9Jw4cUIDKvIJ/oedO3eyKxowYAAZhT9w
457PkA1/QALZ/vrXv5o/T9m/K1k2WTZZNoXu584I/12pA1fQMeHv3OCIBod/
+PBhcgYNjiHS6fwvoFrPnj39Z555hkQyd4Jz5swhnWbNmuVPmgTJlsWRxZHF
kcVRBxz9Ywcc4WtApVevXsHfrAUihAmgMnv2bECm3V+5cUf47LPPBhhKJBJ+
v379/GHDhvH/y8rKPgBDG/Wlm0cMzSOGFnQRQ08xJcwLZYClx9AvgR5c4+VM
+Ft+zf8ghv5AHTIw9DAx9IBG0f3E0P0Ybzsfh4ScMnJXi8k/Hgzdh4RMYugh
YujR9Bg63E7Of3iCYOigAOhoxHjlwbMNGlnI4R3uo9TQYqzjM5evudENJcia
gEeX+wyVxrbnhQ+FISgW9w8NK0vrCiakyQ0cSZ0pMHQxMXQJC9xEThKMq26Q
g7yzEwydk/ru3xAMna+n1IXhtMS6I9OwEUM02yuYAnE7Be5hG7uavCGp8sv9
Q6WYXzUzZZBeC51seCbC7IRy6YihEfQLc4xr2IHhGkMHiaGDEW29V5tDdW0s
pLFNF6kEiSeM/Rxj71e2GirNTqjUl1R6Jax1hiZaTn2gdca01VSyJOWP3uke
vmVlZZExhkpolsKMCT18y9Bwwd/Hcf9n/oe/MeEvUM3Nze8vQEpuU1Z0pUuA
I6Wbjy9XONrEnDqVxSulmS76sS5/it+s4rOUL5r8vuTWxziePIxwXMN1t/gl
Yz/lFw0FPoqGAUdFQ09Fih1m5ohrQmnX3qZwNNIDjkZBuVzdV67ti6dgw3h6
EfgoH3AKkSQbynhQG46wUOEfiKN/6ARH8u4MnEVicZBbLMcC6z5t0ccYSiAU
3ZxsOL6NjDZkl5SKqOpdvRBzyahLl3vln0bvNi34pR8bLPUOQG5MaXEe1zbk
9vMTiy72y+ZdgM8x70JU5fyLmAmIwE2X+6hKON18P+tKYORQzKxCSGG/Bvkr
ljeoX/m631ST7TfXKVPEvIgyRQQ+6gvnQGEv+6js51J/jL4jsfwKFyG1ESwx
uVpBN5NK40wl7u9BSmlfSdVXJdYwX7sUTJj2NQdNCZgw7Wt8qSoLjH4J0Z8q
ufUlbbbJ2lSBt9IU1ewb5Me5+EQleccX/JyLXLBsrW3x2pWMwkxNo1xIphRL
J1Q89UtyGad+WV4unvJF4eH3/QY5Lw2FczyjOkZWKzLI1fIyRgljeZlaq8HJ
QbVveYP86px+2HAlc6hslgKu2v08fAJxRDRgpCHjiqto5eiGfFqTO3pw2UhM
Lx4hkdpbkR4awyYNa5bakqX3MoSujlLwuqPIl5V/y+WdbfLLlRsgFmJgQQZD
WhsZ0gq1d72wuVLuPkAkjtKNd3JCq85+AUTKft4zAaAYprT1U+adWC9YI8hs
krHRGZHCePnLX/6SFi9ajvR+8mm49cmnZZKiw30GV2FVZfZiIGQ45LR46lfM
UqNxZ8prhWP+wa8vmO63qFxdFYInQ7x8xQ1+fOa/YfTM/hFGz5wf+1WDTvdr
Xkb8cs0rqGz5t1+z9UnMiW3XWdr04kmfZ0xzTDck/94z4vuPyPYofhZ7RZ32
jVDxG1waxVbJ0w1T0bgz1VoK47OL9+h7ahBz7eiY67qXT/HL517kJ5ZeKu+r
curRkGENB1oRNiQxvZ4SLyJtV26I0JWwQ0puf0wtharPiwRL12TwYKapyqKL
prJ53PUkop2B6wjCmL8tr+EeglnXSy7FQJZ9lJ0QVhPW5U/ECgQsvnmby5xk
7El1SYuIb3FC312+7EpSR+Z7tQYwqpYMFc7RMbR/cJlZi3zxW015yvuhPuXk
vfU1JEsH0/t18uMyyTNNFzdq0rE5bGr1Agu5byue/AVwG/n0XJky6bN6xdov
0cbIXt1NKUDeI6e6LUMYq+eKp31dvk8GFN592lflrJyLMxNxuc9g9xSfdyHO
ACaXgsnIqpXyrMkd4h9/A92qblmjiPOWa/tJv3b/cORNtrUxo+SlYYjkjgRZ
4zufwO0sb2ldc2OL/NN20wmmmPK1t0hb9684ItnLEc04h9cOqAmAs/RSJIKn
mu4eGsXuE1nNnklsLlmkcsqLyHnG0CKBGDnqcjeHKlZ3doLY5JaH/JamY2iL
mCza0nScSyhNai8NVgsmImdYruUtMmB1buv629EWsDVwuUfgdncWLv4E4pg/
hMjZl2shI/IZnJesXhG1DLRewNsZa05iGYbliOWI5YjliOWI5YjliOWI5Yjl
iOWI5YjliOWI5YjliOWI5YjliOWI5YjliOWI5YjlyP8wR5qOKRfSOrqQ1tGF
tH4/AxEr1t9GwRqHn5zq9Bx5B6l65Aid0IRJ5Suu9+Pvfh8cmfVDcGT2j9Jz
ZNtTfs3B4Xgt0EW158h/PCkMeZgsAUce6ZQjI2LKFnNUN3CEyhSGMCJfdSyD
GMee+YEcuYwcuZQcEYbM/zk2cGT+z2MQfuA/yIuoBhDE0wJd+HbSFbIBMqZm
qinlVFL1JuyIBKGomT3ScwRhpYt/i/EpeyHD4t/IwfxOqgjOi+84NKGLKju6
gqmaI79xiDxw5DeaIzMxYqEKW0gNxiLhyFyWcsWG28ERTgjrbiE3iqd+kRz5
EjnyVbloV3XCkdVAiMMMU3BkMx3rmF077kyIdoBniILKFlyU4lRatvhiNbI3
302O3E2OEGonyZEL/LpDE1g9FJAJQmv2ve4fHxGV1wQfgMhQgcjYszqFCC0w
q2iBWbWjB6EhGyCyBaoQxoNKYWGMB6CVwoP8WMBBiJxDiHyHh4SZxuU+Q532
VTd2DSIrkAYs+ABEll8ux/PASUJkCPERM2nFgMjGO6kvcQOVyR18Hep3h3t8
3228JAYifyJEnuwqRFphf4jw2ARzebUL6QYh9SMIPsZHVBrqNTdxAiqkyaXg
AxAZdbqSqFXvikCKRZfPqh0y9m7zy+b9DKNJq0B/6VcO+Uc/+SqKPtnvVBz6
qwKB9ff6VdkvcK5WGprn/JIJn/ELhwAihcMAh9ZnIv6/C0ikKZHvwx6ytVOp
pJUNp6w/JG8lY86kZA4um5722ix+82wOdtlQL7KX9+gf9atficjvAESwx+87
xU/M/intQmNawMl+YMmlbT1CjIzBBHQ5lfQp43NnTyW3po1lY2I9TmJirfbq
7AtKMr0ZAqHSWf/WASLly1UBe0aXibF5cAyLx6HIMYp/0/dRvg+KKQfdCg5n
2e+w7IHzdQyKNQzRI9M452L+d00XIJOAFpnird/+Ft/629SoyXwKdsg+Sjlo
xbo7OAaaktsdXtYoLysCmEum/4tfPOVL4S5GERAKfOzVDM0ZX/jqGMpue5j8
wAf3oG7Fu7/9Tb909g9kOw/FKnsp1lk/YLcnuIy4VAhHaZxZe3AsJi4Zd6c7
svuEvFw4+nS5pF+g1q320Jhg8cKhMXypOrtPxKNMC6rm54XfT2HDWMt8Sl+y
ym2PYsM52gbP5sptj/kVm+6VSQ9HFOcRxeWI4nN/QlFxIC3GOdpwl/GGD5T/
EKTB29cLUocXCDRmYyM+IJirx0qCgslAO0Rlm9S16e5X73oWyCA+jhEfhcQH
lGRtCzPGQonIivSMqHj1DVyAUZXJKNpM9rzyWZM7ueEK7MTnTcrnlf8q5+I5
nhf4Vksn4tfnT+gKPupyBnBSQPPjmBZo891y/3E+xgou9jvf4VA7xy8aeZpf
NARlDK2qTDyvSx+x5zUhKvTQ9dQTwqFVLp2prkxOvbueYhkffyMqrx0f6XHi
+Zr8/u+whkwlxYdK8Q6I+GUDTwF6BuI9BCKBQN7VfYm24E6x4cb9EvuGkO2+
NJy094fdv6Nz35EDD7/fQulzPI0oKSaqx0tnfJezznc563xPtRo7HkOrQUtw
ZR3+LDYMQ7rcUycJV+79Q9p6KWkzMSQwSwSZ9uvvoJuv3OvRuTZLKkC6NiqC
43N+gmJyecLlcGacwysLn2qIpl+MGSG/4LVCZpD2bTdadDTrQcsOR/mcvmSW
IVeNkIvnYulv22ZROT9U7QZazWig1Wyu2w/JvsPlQ1EZzUfYqqqPdcsZpoGW
hgZzONzI21y9B0PpLS3ETyPGdTk+93ymwsuGjm4R46S56ut6v6UuD6uTVPyz
vFPjYd4XlgmmyxZfgvBpuj8vkts9YPLwxDZV+5EpqtMKpxOULCRwMBrPMGNS
l2z5mt8TATez7G7qiIADw9M68eMTAczEsxfoi9/hSpUmxllrGXMSFs67mEDh
hnIowIHqHNgEV+f0xYWUX5qUWo7PvQCniNJmFFz56tvkxB+MIMqZ2mRchIbD
HeyyEVMg9zI48P1D9SlvPD6r6xy4g1hzuFcNo+XAR8GB28gB1QXeaTnwf5MD
jMJQPXRy60fAgQPkAP8upk4NNnIgnxwosBywHLAcsBywHLAcsBywHLAcsByw
HLAcsBywHLAcsBywHLAcsBywHPjbcuAneCwNDlC9UTLjX4UD3VD74MAQPK4v
GtwZB1400rNdfMSb9bRfPOlsGGKBA284hgN4DC6UcTVr4kOlgl+LgAWo5QF4
D6lXClSgZ3K5z4BzDsy8aOjlcq/0URThzb8IP0uZET1MpO5lIwd+Rw5c7heB
I0PIAf4+eM3B0KWUx1LKY8HXHTnQu0PkMJUF+1+n9VabAddgPubv8NywYhOK
CRyo2QMOIM1ZLmk6DghyqvchCFRoILs9fHye/bxfsfluYUF3/N5NcGYCF4S5
gdRPSaSeUuM3l+M5l+M555X0HJBr3eaJKBzYci8lnc31h/AY3KGURqqz+ThH
peLA750wB9bdalRu69Unla833mkSgvcH1ns5r8qQ/wnZQGXs3B9/bGxYTN2Q
G1YPaTZ42EtBF84iIObQOgto6KApOKRyqimFOjBCRbPmEKw5BCtAKxcfvmmI
XH3X07mw9YWQos5ND4iWOAAhewFEa4JZ5dXUpVQrXUpufwWIOefjPM39CUf2
D/3yVbfAgq3tgWL9fgIBkHaMM2TTUQroapm/W6tnpEECiJldAsS+QRxkGB5O
yLUvPvMHfumUr8j3lU79Ggpm6tf94jFnmEDekZicISis2SvnqARx6lq2JVCG
wBrisTYnuofo8wbbLU/bbpVM+bJsAompXwUgZC+nYsQn/PgQDw1DRO3lPSZ8
hoJH2fC+spfXJn6Wajr8JmPjxVT5pZdS7+dpoTNt11ZdR32Vwz0kP9f6JdAr
jT1Lvq94HOy04vN+JkPzEtl+DbjIXtlkJbc/Qg2ja7TQ0vAkBXay4TXqnuka
SWPPMRGXe7w2mjK6yo3Uq24kdDfd6zcUzjNWbKXLYUBVijj6RYRbyVvfCMuF
IJes2vW0XFVhbCykpYHsznhu3qgnPKh+tBmq7DMUMKBD2dlT3gt7Je1T5+cS
wJJRzdRmL73MaFqyessxVWVJM7S7j99Yts5vLN8sh1oObXQjUnnjq7RSsk1x
DS9AOaPGc7PN7O4GyGMjgeIs6zkqZXQbN1+ZhP2sc0DU7oPVnUPbzSgwwQDi
MoS9L7rY4XdD73axQO8qyLUAiLYkbhmDsnFMztUcUPHJ4XjemTDiMiaBgZEu
ktIr1v2hrcFbe5vg7o9shYI499xBSj55kJqhg/Cgoqzx0GiYcsmxyN7jYSFD
eByFYk1VKrocAoTmqh1+czITG2aLZGZEZQg3xldjFsJp222EeskdT8qHvBaD
esW1pPpVchUekt+0i/zZCf7ILKPylrN0FwqV8W6Ky2oPqE5opO6EGovmdYUX
9TLWIYeEMNLR8siq7N5+Yvw/m4mdVnZlAyN+6Vv/YlRns34Ahsz8PuV2DXHG
25dQu1W6mDK8svkXQBO4ABM7LCXB6BRtt0y4ZaM/6ccH4T2Ue6dQQ/nKTmcj
w5sNjDSIpMPOsLiGEARr11CexqQwDkVmoqIf6QZj2IiS8WNdASRjjhGOSfEi
01zPMMdn6QEEfaL2F2RnpQTpSivrhFThcO/Vmc+BCxoynmGyiIj7lyPKX65i
7S0w1Y20GepeR/keRIBuSAqsZMSh5QhSNiiExIqrMfuvuDqiPOfQhRVPoYh5
CkXMU78iJ+JKFmqggVxxlRY7q/eg3HDaV9i4xuf+VD4H9lF2MSi4xsQGjDeV
AR7FAORLyoPvd665H4MHH07vjschjdOOlz1kanmQfWeMAkl9j/bu97BhmMg+
g8pNTNOpUsAbNCwuJiwuJixoBCv1swP3XMHtV41S2sYRKz/vAsc04nMvQF/B
mTMGF0NdD4R3/hjUSP4YzwiID6NopzCY3ONemR+C2EneAicpSIWJZwcBsTRM
ye2Pw6RTvg97+KlKd1++iRfX4x5K3xvT/Owt8rNPsIH0eFOZwfszmHhWSBcj
TRjNKCvW3KRWtcildriHOPoKzDUwApXva5AZBtW1gotl8KmMq3Ad7PykYcOJ
cHQjUSstLggGXnpmJi+c6TdXbPj7gMWd7WruzpOExbPqLj/koFix9lYNi2si
xun8fWBxj1oHFL69EnhAh48e1KO2VrlcfvSwuDW1E5AK/NvA4uv87eH36BwW
6zHxKf/QKJt8vASH3hTDzms+BCzOxUZYnBtRSub/E7A4SFjQ3bfhsIaFkh+b
ZQFotrBi0THrFvmzncHi94TFLYTFze8DixWEhTEyh5S6IyyG8g8Sjv6zBOFh
YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
YWFhYfEhYXFoNFNDIbF0jNBydy8/Me7zEFFi/A6EuBHCagWLHxIWdPeZ+W/p
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
p2KBr/wPFWFllg==\
\>"],ExpressionUUID->"3b6acb39-0dfa-48fd-8287-316d2c4b4230"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", " ", "=", " ", 
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "citiesFeaturesValues", ",", " ", "citiesPositivness", ",", " ", 
     "citiesFeaturesNames"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.77135590634321*^9}, {3.771356050440531*^9, 3.7713560527164516`*^9}, {
   3.771356736256961*^9, 3.771356737540874*^9}, 3.771359010755967*^9, 
   3.771359171546298*^9, {3.771359211263359*^9, 3.771359234237255*^9}, {
   3.771359390294793*^9, 3.771359390770022*^9}, 3.771364051902135*^9, {
   3.771446959970146*^9, 3.771446960419052*^9}, {3.771447256988364*^9, 
   3.7714472578383904`*^9}, {3.7714486141367292`*^9, 3.771448616059444*^9}, 
   3.771448980094249*^9, {3.771494342712265*^9, 3.771494344069911*^9}, 
   3.771494429235093*^9, {3.771494529067401*^9, 3.771494544179295*^9}, 
   3.771495565394459*^9, 3.7714956915890503`*^9, 3.7716944908173656`*^9},
 CellLabel->
  "In[171]:=",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],

Cell[BoxData[
 TemplateBox[{
  "Inverse","luc",
   "\"Result for \\!\\(\\*RowBox[{\\\"Inverse\\\"}]\\) of badly conditioned \
matrix \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"16.4349033193492`\\\", \\\",\\\", \\\"24.10502001812643`\\\", \
\\\",\\\", \\\"21.08423764695406`\\\", \\\",\\\", \\\"15.09058272981636`\\\", \
\\\",\\\", \\\"23.512625137591847`\\\", \\\",\\\", \
\\\"17.74423788535924`\\\", \\\",\\\", \\\"23.92149102527723`\\\", \\\",\\\", \
\\\"19.66566536165658`\\\", \\\",\\\", \\\"18.02630709609349`\\\", \\\",\\\", \
\\\"16.64303643315974`\\\", \\\",\\\", \\\"16.306413443183853`\\\", \
\\\",\\\", \\\"16.172993295804122`\\\", \\\",\\\", \
\\\"16.923087686481832`\\\", \\\",\\\", \\\"16.374244854748653`\\\", \
\\\",\\\", \\\"19.67806699954506`\\\", \\\",\\\", \
\\\"20.982498804726056`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"20\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
\\\"15.392856320422936`\\\", \\\",\\\", \\\"15.383296540990738`\\\", \
\\\",\\\", \\\"15.240722233246084`\\\", \\\",\\\", \
\\\"15.48915023231023`\\\", \\\",\\\", \\\"18.195835312278344`\\\", \
\\\",\\\", \\\"19.743440366927206`\\\", \\\",\\\", \
\\\"17.908781545233275`\\\", \\\",\\\", \\\"19.89801717896629`\\\", \
\\\",\\\", \\\"20.48227821965922`\\\", \\\",\\\", \
\\\"18.424092716126232`\\\", \\\",\\\", \\\"20.6167607156658`\\\", \\\",\\\", \
\\\"19.97134795040547`\\\", \\\",\\\", \\\"24.259692167703456`\\\", \
\\\",\\\", \\\"24.428516831628844`\\\", \\\",\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"49\\\", \\\"\
\[RightSkeleton]\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"1\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}]\\) may contain \
significant numerical errors.\"",2,171,5,18189172859146562179,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.77169114345396*^9, 3.771694491300901*^9, 
  3.771694645932941*^9, 3.771703749629182*^9, 3.771709024934712*^9, 
  3.7717095289809637`*^9, 3.771709674616291*^9, 3.7717117924719343`*^9},
 CellLabel->
  "During evaluation of \
In[171]:=",ExpressionUUID->"36bd4406-48dc-4fab-b348-62ab7c4cce71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"m", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", "citiesFeaturesNames"}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{
  3.7716944999393044`*^9, {3.7717095425263433`*^9, 3.771709543809411*^9}, {
   3.771709574086865*^9, 3.7717095878774652`*^9}, {3.771709626755397*^9, 
   3.771709631337878*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{0., -0.52}, {0., 51.5}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.34299999999999997`], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 0.5}, {0.44756038657940567`, 1.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 406.9529745373082}, {
            225.8107125531772, 235.76613324223865`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.44756038657940567`]& ,
         TagBoxNote->"0.44756038657940567"],
        StyleBox["0.44756038657940567`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.44756038657940567`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 1.5}, {1.1688525845218773`, 2.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 480.08120191081537`}, {
            216.35529186411577`, 226.3107125531772}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1688525845218773`]& ,
         TagBoxNote->"1.1688525845218773"],
        StyleBox["1.1688525845218773`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1688525845218773`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 2.5}, {-0.4370609846412836, 3.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{316.76561488109047`, 361.57705364627986`}, {
            206.89987117505433`, 216.85529186411577`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4370609846412836]& ,
         TagBoxNote->"-0.4370609846412836"],
        StyleBox[
         RowBox[{"-", "0.4370609846412836`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4370609846412836, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 3.5}, {-0.25396595009379386`, 4.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{335.3287094986991, 361.57705364627986`}, {
            197.4444504859929, 207.39987117505433`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.25396595009379386`]& ,
         TagBoxNote->"-0.25396595009379386"],
        StyleBox[
         RowBox[{"-", "0.25396595009379386`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.25396595009379386`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 4.5}, {-1.2535933595960032`, 5.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{233.98145979962794`, 361.57705364627986`}, {
            187.98902979693145`, 197.9444504859929}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.2535933595960032`]& ,
         TagBoxNote->"-1.2535933595960032"],
        StyleBox[
         RowBox[{"-", "1.2535933595960032`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.2535933595960032`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 5.5}, {-1.020901262382366, 6.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{257.5729538454491, 361.57705364627986`}, {
            178.53360910787, 188.48902979693145`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.020901262382366]& ,
         TagBoxNote->"-1.020901262382366"],
        StyleBox[
         RowBox[{"-", "1.020901262382366`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.020901262382366, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 6.5}, {-0.6574305651836507, 7.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{294.42343949353426`, 361.57705364627986`}, {
            169.07818841880857`, 179.03360910787}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6574305651836507]& ,
         TagBoxNote->"-0.6574305651836507"],
        StyleBox[
         RowBox[{"-", "0.6574305651836507`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6574305651836507, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 7.5}, {2.1593406042417316`, 8.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 580.5018543501828}, {
            159.62276772974712`, 169.57818841880857`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2.1593406042417316`]& ,
         TagBoxNote->"2.1593406042417316"],
        StyleBox["2.1593406042417316`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2.1593406042417316`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 8.5}, {-0.7854029835478511, 9.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{281.4489526844849, 361.57705364627986`}, {
            150.16734704068568`, 160.12276772974712`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.7854029835478511]& ,
         TagBoxNote->"-0.7854029835478511"],
        StyleBox[
         RowBox[{"-", "0.7854029835478511`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.7854029835478511, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 9.5}, {0.09812890596494128, 10.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 371.52585521073274`}, {
            140.71192635162424`, 150.66734704068568`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.09812890596494128]& ,
         TagBoxNote->"0.09812890596494128"],
        StyleBox["0.09812890596494128`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.09812890596494128, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 10.5}, {4.364531572161642, 11.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 804.0751953125002}, {
            131.2565056625628, 141.21192635162424`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 4.364531572161642]& ,
         TagBoxNote->"4.364531572161642"],
        StyleBox["4.364531572161642`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[4.364531572161642, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 11.5}, {-3.1419510016391756`, 12.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{42.53027343750006, 361.57705364627986`}, {
            121.80108497350139`, 131.7565056625628}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -3.1419510016391756`]& ,
         TagBoxNote->"-3.1419510016391756"],
        StyleBox[
         RowBox[{"-", "3.1419510016391756`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-3.1419510016391756`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 12.5}, {1.1077463202129634`, 13.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 473.8859417886696}, {
            112.34566428443995`, 122.30108497350139`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1077463202129634`]& ,
         TagBoxNote->"1.1077463202129634"],
        StyleBox["1.1077463202129634`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1077463202129634`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 13.5}, {1.1980736566832895`, 14.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 483.04378103646377`}, {
            102.89024359537851`, 112.84566428443995`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1980736566832895`]& ,
         TagBoxNote->"1.1980736566832895"],
        StyleBox["1.1980736566832895`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1980736566832895`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 14.5}, {-0.16525705065708785`, 15.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{344.32246346770904`, 361.57705364627986`}, {
            93.43482290631707, 103.39024359537851`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.16525705065708785`]& ,
         TagBoxNote->"-0.16525705065708785"],
        StyleBox[
         RowBox[{"-", "0.16525705065708785`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.16525705065708785`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 15.5}, {-0.27890394095391, 16.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{332.80037067698555`, 361.57705364627986`}, {
            83.97940221725563, 93.93482290631707}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.27890394095391]& ,
         TagBoxNote->"-0.27890394095391"],
        StyleBox[
         RowBox[{"-", "0.27890394095391`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.27890394095391, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 16.5}, {1.274882606758009, 17.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 490.83105834433843`}, {
            74.52398152819418, 84.47940221725563}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.274882606758009]& ,
         TagBoxNote->"1.274882606758009"],
        StyleBox["1.274882606758009`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.274882606758009, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 17.5}, {1.1719360988732115`, 18.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 480.39382408978395`}, {
            65.06856083913274, 75.02398152819418}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1719360988732115`]& ,
         TagBoxNote->"1.1719360988732115"],
        StyleBox["1.1719360988732115`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1719360988732115`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 18.5}, {1.2662580696605428`, 19.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 489.9566594368584}, {
            55.6131401500713, 65.56856083913274}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.2662580696605428`]& ,
         TagBoxNote->"1.2662580696605428"],
        StyleBox["1.2662580696605428`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.2662580696605428`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 19.5}, {-0.4846595884990781, 20.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{311.93982924871636`, 361.57705364627986`}, {
            46.15771946100986, 56.1131401500713}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4846595884990781]& ,
         TagBoxNote->"-0.4846595884990781"],
        StyleBox[
         RowBox[{"-", "0.4846595884990781`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4846595884990781, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 20.5}, {-1.0941072756887338`, 21.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{250.15096037117195`, 361.57705364627986`}, {
            36.70229877194842, 46.65771946100986}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.0941072756887338`]& ,
         TagBoxNote->"-1.0941072756887338"],
        StyleBox[
         RowBox[{"-", "1.0941072756887338`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.0941072756887338`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 21.5}, {2.3377131521976295`, 22.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 598.5861595476044}, {
            27.24687808288698, 37.20229877194842}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2.3377131521976295`]& ,
         TagBoxNote->"2.3377131521976295"],
        StyleBox["2.3377131521976295`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2.3377131521976295`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 22.5}, {-0.8360104411340663, 23.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{276.31811434224755`, 361.57705364627986`}, {
            17.79145739382554, 27.74687808288698}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8360104411340663]& ,
         TagBoxNote->"-0.8360104411340663"],
        StyleBox[
         RowBox[{"-", "0.8360104411340663`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8360104411340663, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 23.5}, {-2.9022062387793603`, 24.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{66.83680216473641, 361.57705364627986`}, {
            8.336036704764126, 18.29145739382554}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -2.9022062387793603`]& ,
         TagBoxNote->"-2.9022062387793603"],
        StyleBox[
         RowBox[{"-", "2.9022062387793603`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-2.9022062387793603`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 24.5}, {-0.6114946920802762, 25.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{299.08064912714246`, 
            361.57705364627986`}, {-1.1193839842973148`, 8.836036704764126}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6114946920802762]& ,
         TagBoxNote->"-0.6114946920802762"],
        StyleBox[
         RowBox[{"-", "0.6114946920802762`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6114946920802762, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 25.5}, {-1.615941981852187, 26.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{197.24473574741424`, 
            361.57705364627986`}, {-10.574804673358756`, \
-0.6193839842973148}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.615941981852187]& ,
         TagBoxNote->"-1.615941981852187"],
        StyleBox[
         RowBox[{"-", "1.615941981852187`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.615941981852187, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 26.5}, {-0.6355996092175009, 27.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{296.63677150548114`, 
            361.57705364627986`}, {-20.030225362420225`, \
-10.074804673358756`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6355996092175009]& ,
         TagBoxNote->"-0.6355996092175009"],
        StyleBox[
         RowBox[{"-", "0.6355996092175009`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6355996092175009, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 27.5}, {1.5429238125121358`, 28.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            518.0064226360511}, {-29.485646051481666`, -19.530225362420225`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.5429238125121358`]& ,
         TagBoxNote->"1.5429238125121358"],
        StyleBox["1.5429238125121358`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.5429238125121358`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 28.5}, {1.0583684241609124`, 29.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            468.8797625730616}, {-38.94106674054311, -28.985646051481666`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.0583684241609124`]& ,
         TagBoxNote->"1.0583684241609124"],
        StyleBox["1.0583684241609124`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.0583684241609124`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 29.5}, {0.16922773129032898`, 30.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            378.7342113793086}, {-48.39648742960455, -38.44106674054311}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.16922773129032898`]& ,
         TagBoxNote->"0.16922773129032898"],
        StyleBox["0.16922773129032898`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.16922773129032898`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 30.5}, {0.5670258470029284, 31.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            419.06498320460406`}, {-57.85190811866599, -47.89648742960455}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.5670258470029284]& ,
         TagBoxNote->"0.5670258470029284"],
        StyleBox["0.5670258470029284`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.5670258470029284, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 31.5}, {0.5812396391888629, 32.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            420.5060488778192}, {-67.30732880772737, -57.35190811866599}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.5812396391888629]& ,
         TagBoxNote->"0.5812396391888629"],
        StyleBox["0.5812396391888629`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.5812396391888629, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 32.5}, {0.6923674264484605, 33.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            431.77274234465017`}, {-76.76274949678881, -66.80732880772737}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6923674264484605]& ,
         TagBoxNote->"0.6923674264484605"],
        StyleBox["0.6923674264484605`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6923674264484605, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 33.5}, {1.7493810294372025`, 34.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            538.9380926932973}, {-86.21817018585025, -76.26274949678881}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.7493810294372025`]& ,
         TagBoxNote->"1.7493810294372025"],
        StyleBox["1.7493810294372025`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.7493810294372025`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 34.5}, {0.40630506508279995`, 35.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            402.77030274441086`}, {-95.6735908749117, -85.71817018585025}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.40630506508279995`]& ,
         TagBoxNote->"0.40630506508279995"],
        StyleBox["0.40630506508279995`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.40630506508279995`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 35.5}, {-0.8891177825871548, 36.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{270.9338252121803, 
            361.57705364627986`}, {-105.12901156397314`, -95.1735908749117}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8891177825871548]& ,
         TagBoxNote->"-0.8891177825871548"],
        StyleBox[
         RowBox[{"-", "0.8891177825871548`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8891177825871548, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 36.5}, {-0.7772241574640222, 37.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{282.27816316979545`, 
            361.57705364627986`}, {-114.58443225303458`, \
-104.62901156397314`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.7772241574640222]& ,
         TagBoxNote->"-0.7772241574640222"],
        StyleBox[
         RowBox[{"-", "0.7772241574640222`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.7772241574640222, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 37.5}, {3.384045487657632, 38.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            704.6685893229984}, {-124.03985294209602`, -114.08443225303458`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 3.384045487657632]& ,
         TagBoxNote->"3.384045487657632"],
        StyleBox["3.384045487657632`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[3.384045487657632, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 38.5}, {-0.37311499057306996`, 39.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{323.24878107529656`, 
            361.57705364627986`}, {-133.49527363115746`, \
-123.53985294209602`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.37311499057306996`]& ,
         TagBoxNote->"-0.37311499057306996"],
        StyleBox[
         RowBox[{"-", "0.37311499057306996`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.37311499057306996`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 39.5}, {0.2821140946385512, 40.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            390.17919812649023`}, {-142.9506943202189, -132.99527363115746`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.2821140946385512]& ,
         TagBoxNote->"0.2821140946385512"],
        StyleBox["0.2821140946385512`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.2821140946385512, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 40.5}, {-0.4867959234138448, 41.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{311.72323688041035`, 
            361.57705364627986`}, {-152.40611500928034`, -142.4506943202189}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4867959234138448]& ,
         TagBoxNote->"-0.4867959234138448"],
        StyleBox[
         RowBox[{"-", "0.4867959234138448`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4867959234138448, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 41.5}, {-0.3106440357634672, 42.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{329.5824003776935, 
            361.57705364627986`}, {-161.86153569834178`, \
-151.90611500928034`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.3106440357634672]& ,
         TagBoxNote->"-0.3106440357634672"],
        StyleBox[
         RowBox[{"-", "0.3106440357634672`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.3106440357634672, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 42.5}, {-1.634416161568808, 43.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{195.37173057876018`, 
            361.57705364627986`}, {-171.31695638740322`, \
-161.36153569834178`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.634416161568808]& ,
         TagBoxNote->"-1.634416161568808"],
        StyleBox[
         RowBox[{"-", "1.634416161568808`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.634416161568808, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 43.5}, {-0.8632702323214962, 44.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{273.5543797367781, 
            361.57705364627986`}, {-180.77237707646466`, \
-170.81695638740322`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8632702323214962]& ,
         TagBoxNote->"-0.8632702323214962"],
        StyleBox[
         RowBox[{"-", "0.8632702323214962`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8632702323214962, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 44.5}, {-0.2399579213771762, 45.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{336.7489138374754, 
            361.57705364627986`}, {-190.2277977655261, -180.27237707646466`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.2399579213771762]& ,
         TagBoxNote->"-0.2399579213771762"],
        StyleBox[
         RowBox[{"-", "0.2399579213771762`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.2399579213771762, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 45.5}, {-1.4526432018123963`, 46.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{213.80078661089328`, 
            361.57705364627986`}, {-199.68321845458755`, -189.7277977655261}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4526432018123963`]& ,
         TagBoxNote->"-1.4526432018123963"],
        StyleBox[
         RowBox[{"-", "1.4526432018123963`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4526432018123963`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 46.5}, {-1.4468675640026838`, 47.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{214.3863497934433, 
            361.57705364627986`}, {-209.138639143649, -199.18321845458755`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4468675640026838`]& ,
         TagBoxNote->"-1.4468675640026838"],
        StyleBox[
         RowBox[{"-", "1.4468675640026838`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4468675640026838`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 47.5}, {-0.023975705747365517`, 48.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{358.6462761245833, 
            361.57705364627986`}, {-218.59405983271043`, -208.638639143649}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.023975705747365517`]& ,
         TagBoxNote->"-0.023975705747365517"],
        StyleBox[
         RowBox[{"-", "0.023975705747365517`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.023975705747365517`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 48.5}, {-1.4777514861492005`, 49.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{211.25518258082317`, 
            361.57705364627986`}, {-228.04948052177187`, \
-218.09405983271043`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4777514861492005`]& ,
         TagBoxNote->"-1.4777514861492005"],
        StyleBox[
         RowBox[{"-", "1.4777514861492005`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4777514861492005`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 49.5}, {1.6930564563826511`, 50.5}, 
             "RoundingRadius" -> 0]},
           ImageSizeCache->{{361.07705364627986`, 
            533.2276244575415}, {-237.5049012108333, -227.54948052177187`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.6930564563826511`]& ,
         TagBoxNote->"1.6930564563826511"],
        StyleBox["1.6930564563826511`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.6930564563826511`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 50.5}, {-0.1296708074587647, 51.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{347.93037561676493`, 
            361.57705364627986`}, {-246.96032189989475`, -237.0049012108333}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.1296708074587647]& ,
         TagBoxNote->"-0.1296708074587647"],
        StyleBox[
         RowBox[{"-", "0.1296708074587647`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.1296708074587647, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], LineBox[{{0., -0.52}, {0., 52.5404}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], LineBox[{{0., 0.5}, Offset[{-6., 0.}, {0., 0.5}]}], 
         LineBox[{{0., 51.5}, 
           Offset[{-6., 0.}, {0., 
            51.5}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
           LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
           LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
           LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
           LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
           LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
           LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
           LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
           LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
           LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
           LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
           LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
           LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
           LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
           LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
           LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
           LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
           LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
           LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
           LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
           LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
           LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
           LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
           LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
           LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
           LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
           LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
           LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
           LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
           LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
           LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
           LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
           LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
           LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
           LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
           LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
           LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
           LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
           LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
           LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
           LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
           LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
           LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
           LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
           LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
           LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
           LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
           LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
           LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
           LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
           LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
           LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
           LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
           LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
           LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
           LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
           LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
           LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
           LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
           LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
           LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
           LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
           LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
           LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
           LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
           LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
           LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
           LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
           LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
           LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
           LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
           LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
           LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
           LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
           LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
           LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
           LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
           LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
           LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
           LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
           LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
           LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
           LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
           LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
           LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
           LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
           LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
           LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
           LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
           LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
           LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
           LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
           LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
           LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
           LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
           LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
           LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
           LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
           LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
           LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
           LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], 
          InsetBox["\<\"Population\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Latitude\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Longitude\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Elevation\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"MagneticFieldStrength\"\>", 
           Offset[{-2, 0}, {0., 5.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPopulation\"\>", Offset[{-2, 0}, {0., 6.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLatitude\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLongitude\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryArea\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterArea\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryBoundaryLength\"\>", 
           Offset[{-2, 0}, {0., 11.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryCoastlineLength\"\>", 
           Offset[{-2, 0}, {0., 12.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterwayLength\"\>", 
           Offset[{-2, 0}, {0., 13.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryContributingFamilyWorkers\"\>", 
           Offset[{-2, 0}, {0., 14.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGDPPerPersonEmployed\"\>", 
           Offset[{-2, 0}, {0., 15.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGiniIndex\"\>", Offset[{-2, 0}, {0., 16.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryInterestRateSpread\"\>", 
           Offset[{-2, 0}, {0., 17.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPovertyHeadcount\"\>", 
           Offset[{-2, 0}, {0., 18.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryUnemploymentRate\"\>", 
           Offset[{-2, 0}, {0., 19.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryBookTitles\"\>", Offset[{-2, 0}, {0., 20.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryIlliteracyFraction\"\>", 
           Offset[{-2, 0}, {0., 21.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryMaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 22.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryMaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 23.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryFemaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 24.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryFemaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 25.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryHospitalBedsPer10000Population\"\>", 
           Offset[{-2, 0}, {0., 26.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryArmy\"\>", Offset[{-2, 0}, {0., 27.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"CountryHIVAIDSPopulation\"\>", 
           Offset[{-2, 0}, {0., 28.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryElectricityTotal\"\>", 
           Offset[{-2, 0}, {0., 29.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryChildPopulation\"\>", 
           Offset[{-2, 0}, {0., 30.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryElderlyPopulation\"\>", 
           Offset[{-2, 0}, {0., 31.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryAnnualMarriages\"\>", 
           Offset[{-2, 0}, {0., 32.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryAnnualDivorces\"\>", 
           Offset[{-2, 0}, {0., 33.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryNetIncomeFromAbroad\"\>", 
           Offset[{-2, 0}, {0., 34.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGovernmentDebt\"\>", 
           Offset[{-2, 0}, {0., 35.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGovernmentSurplus\"\>", 
           Offset[{-2, 0}, {0., 36.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryImportsValue\"\>", 
           Offset[{-2, 0}, {0., 37.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryExportsValue\"\>", 
           Offset[{-2, 0}, {0., 38.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryLeisureArrivals\"\>", 
           Offset[{-2, 0}, {0., 39.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryNewspaperTitles\"\>", 
           Offset[{-2, 0}, {0., 40.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"Street\"\>", Offset[{-2, 0}, {0., 41.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Highway\"\>", Offset[{-2, 0}, {0., 42.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Water\"\>", Offset[{-2, 0}, {0., 43.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Park\"\>", Offset[{-2, 0}, {0., 44.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Train\"\>", Offset[{-2, 0}, {0., 45.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Interesting\"\>", Offset[{-2, 0}, {0., 46.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Building\"\>", Offset[{-2, 0}, {0., 47.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Annotations\"\>", Offset[{-2, 0}, {0., 48.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"MeanNeighborDegree\"\>", Offset[{-2, 0}, {0., 49.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"DegreeCentrality\"\>", Offset[{-2, 0}, {0., 50.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"ClosenessCentrality\"\>", 
           Offset[{-2, 0}, {0., 51.}], {1, 0}, Automatic, {1, 0}]}, 
         "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -0.52},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{847.60546875, Automatic},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.771694500664877*^9, 3.77169465172803*^9, 3.771703750504766*^9, 
   3.77170902625204*^9, {3.771709533678793*^9, 3.771709544454525*^9}, 
   3.771709632180335*^9, 3.7717096772392263`*^9, 3.771711794587517*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"0eeb186b-9d30-42aa-86f2-92362c5e6be2"]
}, Open  ]],

Cell["Lets compare the land use across region", "Text",
 CellChangeTimes->{{3.7716230389171543`*^9, 
  3.7716230649283113`*^9}},ExpressionUUID->"13ca92df-031f-49fc-8d35-\
f0d7e45c8ee7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", " ", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.7716230389171543`*^9, 3.771623065802146*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],

Cell[BoxData[
 TemplateBox[{
  "$IterationLimit","itlim",
   "\"Iteration limit of \\!\\(\\*RowBox[{\\\"4096\\\"}]\\) exceeded.\"",2,81,
   10,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709026833088*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],

Cell[BoxData[
 TemplateBox[{
  "Import","chtype",
   "\"First argument \\!\\(\\*RowBox[{\\\"Hold\\\", \\\"[\\\", \
RowBox[{\\\"CityDataPath\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"/Users/ashvardanian/CodeMine/WolframSummer19/Data/\
Features\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"CityName\\\", \\\"[\\\", \
RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\
\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \
\\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \
\\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\"]\\\"}]}], \\\"]\\\"}], \\\"]\\\"}]\\) \
is not a valid file, directory, or URL specification.\"",2,81,11,
   18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027006002*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,12,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027041771*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],

Cell[BoxData[
 TemplateBox[{
  "Lookup","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"$Failed\\\"}]\\) is not a valid \
Association or a list of rules.\"",2,81,13,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027103318*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,14,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.77170902715431*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,15,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027267667*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,16,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.7717090273824177`*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,17,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027626474*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"BarChart\\\", \
\\\"::\\\", \\\"ldata\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,81,18,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027778895*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Output",
 CellChangeTimes->{3.771671001693563*^9, 3.771703751554764*^9, 
  3.771709027824383*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["- Can ANNs tackle this problem with limited data?", "Section",
 CellChangeTimes->{{3.771713042559826*^9, 
  3.771713056087331*^9}},ExpressionUUID->"50d2f7c6-3d90-4674-8c7d-\
134ca91d9f53"],

Cell["wewe", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101697078874*^9}, {3.7711017481709642`*^9, 
  3.7711017524833117`*^9}, {3.77160336959536*^9, 
  3.771603372464587*^9}},ExpressionUUID->"5e201699-c7fa-4448-9db3-\
a409c7f2831f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildDataset", "[", 
    RowBox[{"city_", ",", " ", "rating_Real", ",", " ", "imgs_"}], "]"}], " ",
    ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ratings", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"ratings", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"rating", ",", " ", 
         RowBox[{"Length", "[", "imgs", "]"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "Same", " ", "for", " ", "all", " ", "images", " ", "within", " ", 
        "city"}], "*)"}], "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"imgs", ",", " ", "ratings"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695092612587*^9}, {
  3.771695420377442*^9, 3.7716954240693274`*^9}, {3.771695525490217*^9, 
  3.7716955427053223`*^9}, {3.77169557475178*^9, 3.771695608141577*^9}, {
  3.7717013125325403`*^9, 3.771701315713105*^9}, {3.7717013958100977`*^9, 
  3.771701472688505*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetMaps", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportMaps", "[", "#1", "]"}]}], "]"}], " ", "&"}], ",", 
       " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetSatellites", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportSatellites", "[", "#1", "]"}]}], "]"}], " ", "&"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695131022481*^9}, {
   3.771695179577177*^9, 3.771695215558429*^9}, {3.7716953433989143`*^9, 
   3.7716953529173613`*^9}, {3.771695495691889*^9, 3.771695521620345*^9}, {
   3.771695563051428*^9, 3.771695563864685*^9}, 3.7716969865035973`*^9, {
   3.771701456371614*^9, 3.771701489783415*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9, {3.77170385339028*^9, 3.771703857527769*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelMapsANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Panel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9},ExpressionUUID->"fa821b18-598d-4969-a5ce-\
d0cc2bc295df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 3.771702025299842*^9, 
   3.771702128773827*^9, {3.771702475598556*^9, 3.771702475949767*^9}, {
   3.771703862173395*^9, 3.7717038631782417`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"modelSatellitesANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Pwanel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 
   3.771702025299842*^9},ExpressionUUID->"b52d97d1-1f12-4f4e-927c-\
7e474525430d"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{{3.771701055607881*^9, 3.771701069093855*^9}, 
   3.7717017566127987`*^9},
 CellLabel->
  "Out[656]=",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "model", "]"}]], "Code",
 CellChangeTimes->{3.771696127001232*^9},
 CellLabel->"In[89]:=",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`model\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "Global`model", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`model"], True]]], "Output",
 CellChangeTimes->{3.7716961291480513`*^9, 3.771703764701326*^9, 
  3.7717090480979567`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cnnFull", " ", "=", " ", 
   RowBox[{
   "NetModel", "[", "\"\<ResNet-101 Trained on YFCC100m Geotagged Data\>\"", 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771697076399399*^9, 3.771697086936078*^9}, {
  3.771701157745332*^9, 3.771701163246292*^9}, {3.771701236513834*^9, 
  3.7717012371068773`*^9}, {3.771701284764735*^9, 3.77170128529869*^9}, {
  3.77170207100424*^9, 3.771702074100959*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetFlatten", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NetTake", "[", 
        RowBox[{"cnnFull", ",", " ", "\"\<pool1\>\""}], "]"}], ",", " ", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", " ", "LogisticSigmoid"}], "}"}], 
     "]"}], ",", " ", "1"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771701679489496*^9, 3.771701725723916*^9}, {
   3.771701952576314*^9, 3.771701958218424*^9}, 3.771702088913781*^9, {
   3.7717023018480253`*^9, 3.771702412505938*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["43", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{3}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 3,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 3, 7, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{3, 3}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 1,
                     1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Outputs", "Output"]}], 
                    "7" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Outputs", "Output"]}], 
                    "8" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Outputs", "Output"]}], 
                    "9" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Outputs", "Output"]}], 
                    "10" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Outputs", "Output"]}], 
                    "11" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Outputs", "Output"]}], 
                    "12" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Outputs", "Output"]}], 
                    "13" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Outputs", "Output"]}], 
                    "14" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Outputs", "Output"]}], 
                    "15" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Outputs", "Output"]}], 
                    "16" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Outputs", "Output"]}], 
                    "17" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Outputs", "Output"]}], 
                    "18" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit6" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Outputs", "Output"]}], 
                    "19" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit7" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Outputs", "Output"]}], 
                    "20" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit8" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Outputs", "Output"]}], 
                    "21" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit9" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Outputs", "Output"]}], 
                    "22" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit10" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Outputs", "Output"]}], 
                    "23" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit11" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Outputs", "Output"]}], 
                    "24" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit12" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Outputs", "Output"]}], 
                    "25" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit13" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Outputs", "Output"]}], 
                    "26" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit14" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Outputs", "Output"]}], 
                    "27" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit15" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Outputs", "Output"]}], 
                    "28" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit16" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Outputs", "Output"]}], 
                    "29" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit17" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Outputs", "Output"]}], 
                    "30" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit18" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Outputs", "Output"]}], 
                    "31" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit19" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Outputs", "Output"]}], 
                    "32" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit20" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Outputs", "Output"]}], 
                    "33" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit21" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Outputs", "Output"]}], 
                    "34" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit22" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Outputs", "Output"]}], 
                    "35" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit23" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Outputs", "Output"]}], 
                    "36" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Outputs", "Output"]}], 
                    "37" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Outputs", "Output"]}], 
                    "38" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Outputs", "Output"]}], 
                    "39" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "40" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "41" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "42" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 2048}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], "43" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "43", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10", "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"25\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"26\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"27\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"28\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"29\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"30\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"31\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"32\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"33\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"34\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"35\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"36\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"37\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"38\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"39\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"40\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"41\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"42\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"43\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771703769226363*^9, 3.771709054798896*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703899626437*^9, 
   3.771703916305149*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"modelGeoCNN", ",", " ", 
    RowBox[{"Association", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"Keys", "[", "datasetTrain", "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"Values", "[", "datasetTrain", "]"}]}]}], "}"}], "]"}], ",", 
    " ", "All"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703646880005*^9, 
   3.771703704613678*^9}, {3.771703777811902*^9, 3.771703807402351*^9}, 
   3.7717038433808413`*^9, {3.771703926567396*^9, 3.7717039384147387`*^9}, {
   3.7717041901368637`*^9, 3.771704193396693*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{1406, 832},
WindowMargins->{{Automatic, 131}, {Automatic, 50}},
TaggingRules->{"Salvaged" -> True},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 184, 3, 98, "Title",ExpressionUUID->"112c77e2-f45b-4372-906b-a938d28da3f8"],
Cell[CellGroupData[{
Cell[789, 29, 182, 3, 62, "Section",ExpressionUUID->"2f1f3b8e-3200-48b9-b773-a77a1c396b17"],
Cell[974, 34, 538, 8, 81, "Text",ExpressionUUID->"c6307c66-135d-4af1-918e-b52e229fb589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1549, 47, 254, 4, 56, "Chapter",ExpressionUUID->"ac13fabb-576a-4a4b-8847-2bb61f653aef"],
Cell[1806, 53, 472, 8, 58, "Text",ExpressionUUID->"d7112578-2f96-4683-9976-1d246abd738b"],
Cell[CellGroupData[{
Cell[2303, 65, 156, 3, 67, "Section",ExpressionUUID->"627737e6-2c67-4101-ba9d-4750ebb8b851"],
Cell[CellGroupData[{
Cell[2484, 72, 165, 3, 54, "Subsection",ExpressionUUID->"15f0bbef-4baf-4ee2-8702-3e0092151fcb"],
Cell[2652, 77, 9922, 247, 623, "Code",ExpressionUUID->"701bc516-4588-4409-bd02-62356ee10634"]
}, Closed]],
Cell[CellGroupData[{
Cell[12611, 329, 167, 3, 38, "Subsection",ExpressionUUID->"c7b8b850-ca31-4d36-a026-92bed76431d7"],
Cell[12781, 334, 4815, 113, 376, "Code",ExpressionUUID->"acdb5163-89af-4011-8610-a985ea22ddfc"]
}, Closed]],
Cell[CellGroupData[{
Cell[17633, 452, 157, 3, 38, "Subsection",ExpressionUUID->"04bf9ceb-4ddc-4f18-bf62-54860b3d9d2c"],
Cell[17793, 457, 4903, 114, 300, "Code",ExpressionUUID->"ec5fa737-edff-4f2b-bcf0-57aa61e8bf78"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22745, 577, 209, 4, 67, "Section",ExpressionUUID->"63985375-fa23-4d09-a7dc-b6747739c560"],
Cell[CellGroupData[{
Cell[22979, 585, 131, 3, 54, "Subsection",ExpressionUUID->"fa1920ae-8e54-45ec-83bd-bd9f5d5988ff"],
Cell[23113, 590, 1895, 39, 91, "Code",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"]
}, Closed]],
Cell[CellGroupData[{
Cell[25045, 634, 175, 3, 38, "Subsection",ExpressionUUID->"ee1bdf2d-8e5c-4019-8ee5-eb9655578edf"],
Cell[25223, 639, 5819, 133, 395, "Code",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"]
}, Closed]],
Cell[CellGroupData[{
Cell[31079, 777, 183, 3, 38, "Subsection",ExpressionUUID->"9f81765d-48a1-412b-8f34-7c63eeb70cd0"],
Cell[31265, 782, 4116, 90, 395, "Code",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"]
}, Closed]],
Cell[CellGroupData[{
Cell[35418, 877, 166, 3, 38, "Subsection",ExpressionUUID->"1b2b8bb4-d2fd-410a-8140-48381fbfbec1"],
Cell[35587, 882, 15383, 321, 1155, "Code",ExpressionUUID->"ce916f56-0286-4291-9303-f08a2c807b22"]
}, Closed]],
Cell[CellGroupData[{
Cell[51007, 1208, 173, 3, 38, "Subsection",ExpressionUUID->"fcac805f-54fc-4ed9-8bb5-df26b8e9ddb1"],
Cell[51183, 1213, 6745, 125, 357, "Code",ExpressionUUID->"035f3fac-5785-4fb6-8252-b10aea312ea8"]
}, Closed]],
Cell[CellGroupData[{
Cell[57965, 1343, 176, 3, 38, "Subsection",ExpressionUUID->"3b7d840d-c9fe-49f1-92fe-dd9a50ebd8f8"],
Cell[58144, 1348, 2349, 55, 167, "Code",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],
Cell[60496, 1405, 834, 18, 91, "Code",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[61379, 1429, 231, 4, 67, "Section",ExpressionUUID->"1720891f-8e04-46f0-8ae9-4c3257b2a22a"],
Cell[CellGroupData[{
Cell[61635, 1437, 217, 4, 54, "Subsection",ExpressionUUID->"cd86ce5d-5f3d-4938-a2ae-9d0f8a94ab58"],
Cell[61855, 1443, 6094, 125, 395, "Code",ExpressionUUID->"20961709-7c7a-45d4-a981-9ac2574c6877"],
Cell[67952, 1570, 263, 6, 35, "Text",ExpressionUUID->"13349771-2cbd-4640-86e0-2a496adaad4a"],
Cell[68218, 1578, 2520, 44, 91, "Code",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],
Cell[CellGroupData[{
Cell[70763, 1626, 2593, 45, 91, "Code",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],
Cell[73359, 1673, 123857, 2205, 362, 65665, 1251, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],
Cell[197231, 3881, 498, 9, 58, "Text",ExpressionUUID->"04da58f6-384a-4c46-83b1-c68f03702b2d"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197778, 3896, 216, 4, 67, "Section",ExpressionUUID->"d1be2ff7-0399-4fec-9761-8befa64c33fd"],
Cell[CellGroupData[{
Cell[198019, 3904, 362, 6, 54, "Subsection",ExpressionUUID->"1e314e11-051b-4643-8db0-01d456f6b7b3"],
Cell[198384, 3912, 8032, 161, 490, "Code",ExpressionUUID->"d54f38e5-c079-43b6-a6e9-599471a76047"],
Cell[206419, 4075, 1152, 21, 52, "Code",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],
Cell[207574, 4098, 3429, 82, 130, "Code",ExpressionUUID->"b7ccaacb-4cae-4131-83bc-5988196d0d69"],
Cell[211006, 4182, 1629, 40, 91, "Code",ExpressionUUID->"e777ef22-5b22-4321-919b-5b5a555a01a8"],
Cell[CellGroupData[{
Cell[212660, 4226, 510, 12, 52, "Code",ExpressionUUID->"f41349f5-ce2c-42a4-936d-e2e8197ee805"],
Cell[213173, 4240, 239367, 4821, 512, "Output",ExpressionUUID->"045f74da-8973-4350-af6e-02af847fcf00"]
}, Open  ]],
Cell[452555, 9064, 187, 4, 52, "Code",ExpressionUUID->"66d4097c-56dc-44d1-9170-50ecc5b463c7"],
Cell[452745, 9070, 601, 14, 52, "Code",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],
Cell[CellGroupData[{
Cell[453371, 9088, 344, 7, 52, "Code",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],
Cell[453718, 9097, 180201, 2967, 545, 55536, 923, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"3b6acb39-0dfa-48fd-8287-316d2c4b4230"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633956, 12069, 1253, 21, 52, "Code",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],
Cell[635212, 12092, 2219, 36, 59, "Message",ExpressionUUID->"36bd4406-48dc-4fab-b348-62ab7c4cce71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[637468, 12133, 540, 11, 52, "Code",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],
Cell[638011, 12146, 63810, 1573, 546, "Output",ExpressionUUID->"0eeb186b-9d30-42aa-86f2-92362c5e6be2"]
}, Open  ]],
Cell[701836, 13722, 185, 3, 35, "Text",ExpressionUUID->"13ca92df-031f-49fc-8d35-f0d7e45c8ee7"],
Cell[CellGroupData[{
Cell[702046, 13729, 546, 11, 52, "Code",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],
Cell[702595, 13742, 408, 10, 24, "Message",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],
Cell[703006, 13754, 1342, 23, 42, "Message",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],
Cell[704351, 13779, 449, 11, 24, "Message",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],
Cell[704803, 13792, 431, 10, 24, "Message",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],
Cell[705237, 13804, 448, 11, 24, "Message",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],
Cell[705688, 13817, 617, 13, 24, "Message",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],
Cell[706308, 13832, 619, 13, 24, "Message",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],
Cell[706930, 13847, 617, 13, 24, "Message",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],
Cell[707550, 13862, 494, 11, 24, "Message",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],
Cell[708047, 13875, 564, 12, 34, "Output",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[708672, 13894, 194, 3, 67, "Section",ExpressionUUID->"50d2f7c6-3d90-4674-8c7d-134ca91d9f53"],
Cell[708869, 13899, 295, 5, 35, "Text",ExpressionUUID->"5e201699-c7fa-4448-9db3-a409c7f2831f"],
Cell[709167, 13906, 1122, 26, 110, "Code",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],
Cell[710292, 13934, 1436, 34, 72, "Code",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],
Cell[711731, 13970, 881, 18, 72, "Code",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],
Cell[712615, 13990, 699, 14, 36, "Code",ExpressionUUID->"fa821b18-598d-4969-a5ce-d0cc2bc295df",
 Evaluatable->False],
Cell[713317, 14006, 960, 20, 72, "Code",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],
Cell[CellGroupData[{
Cell[714302, 14030, 683, 14, 36, "Code",ExpressionUUID->"b52d97d1-1f12-4f4e-927c-7e474525430d",
 Evaluatable->False],
Cell[714988, 14046, 212, 4, 34, "Output",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],
Cell[CellGroupData[{
Cell[715237, 14055, 188, 3, 52, "Code",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],
Cell[715428, 14060, 8170, 206, 130, "Output",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]],
Cell[723613, 14269, 517, 10, 52, "Code",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],
Cell[CellGroupData[{
Cell[724155, 14283, 691, 15, 52, "Code",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],
Cell[724849, 14300, 569441, 10426, 75, "Output",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],
Cell[1294305, 24729, 864, 19, 72, "Code",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],
Cell[1295172, 24750, 942, 18, 52, "Code",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

