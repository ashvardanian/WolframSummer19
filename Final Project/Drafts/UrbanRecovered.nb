(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1123843,      21974]
NotebookOptionsPosition[   1114560,      21813]
NotebookOutlinePosition[   1114955,      21830]
CellTagsIndexPosition[   1114912,      21827]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Impact of Urban Design on Quality of Life", "Title",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101323714347*^9}},ExpressionUUID->"112c77e2-f45b-4372-906b-\
a938d28da3f8"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Intro", "Subtitle"]], "Section",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101340757436*^9}},ExpressionUUID->"2f1f3b8e-3200-48b9-b773-\
a77a1c396b17"],

Cell[TextData[StyleBox["Most of the population around the globe is now \
concentrated in cities. There are around 2 dozens urban areas with \
populations exceeding 10 million people, but we still fail to quantify the \
influence of various aspects of urban design on the quality of life.\nThis \
work is a stepping stone in that direction.", "Text"]], "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711015405664473`*^9}},ExpressionUUID->"c6307c66-135d-4af1-918e-\
b52e229fb589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["What is quality of life?", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017087241497`*^9}},ExpressionUUID->"ac13fabb-576a-4a4b-8847-\
2bb61f653aef"],

Cell["\<\
This is a very non-trivial question and we are not going to answer it in this \
work. Instead we will define a very simple approximation of quality of life \
as average sentiment across Tweets related to that specific city.\
\>", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
  3.771102550634573*^9}},ExpressionUUID->"d7112578-2f96-4683-9976-\
1d246abd738b"],

Cell[CellGroupData[{

Cell["Software Environment", "Section",
 CellChangeTimes->{{3.771713279816607*^9, 3.771713281790873*^9}, {
  3.7717135948068542`*^9, 
  3.771713596242765*^9}},ExpressionUUID->"627737e6-2c67-4101-ba9d-\
4750ebb8b851"],

Cell[CellGroupData[{

Cell["Utility Functions", "Subsection",
 CellChangeTimes->{{3.771712604201354*^9, 
  3.771712608129142*^9}},ExpressionUUID->"15f0bbef-4baf-4ee2-8702-\
3e0092151fcb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AssociationKeyRename", "[", 
     RowBox[{"a_", ",", " ", 
      RowBox[{"old_", " ", "\[Rule]", " ", "new_"}]}], "]"}], " ", "/;", " ", 
    
    RowBox[{"KeyExistsQ", "[", 
     RowBox[{"a", ",", " ", "old"}], "]"}]}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"KeyDrop", "[", "old", "]"}], " ", "@", " ", 
    RowBox[{"Append", "[", 
     RowBox[{"a", ",", " ", 
      RowBox[{"new", " ", "\[Rule]", " ", 
       RowBox[{"a", "[", "old", "]"}]}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationFromPair", "[", "strAndNum_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
    "\[Rule]", " ", 
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationsFromPair", "[", 
    RowBox[{"keys_List", ",", " ", "vals_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", " ", "\[Rule]", " ", "#2"}], ")"}], " ", "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"keys", ",", " ", "vals"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RangeMakeAround", "[", 
    RowBox[{"num_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"num", " ", "-", " ", "delta"}], ",", " ", 
     RowBox[{"num", " ", "+", " ", "delta"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Integer", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Rational", "]"}], " ", ":=", " ", 
   RowBox[{"N", "[", "number", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Real", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_List", "]"}], " ", ":=", " ", 
   RowBox[{"number", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Quantity", "]"}], " ", ":=", " ", 
   RowBox[{"QuantityMagnitude", "[", "number", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_", "]"}], " ", ":=", " ", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{
    "numbers_List", ",", " ", "numberNewSmallest_", ",", " ", 
     "numberNewLargest_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", " ", "*", " ", 
         RowBox[{"(", 
          RowBox[{"numberNewLargest", " ", "-", " ", "numberNewSmallest"}], 
          ")"}]}], " ", "+", " ", "numberNewSmallest"}], ")"}], " ", "&"}], 
     ",", " ", 
     RowBox[{"Rescale", "[", "numbers", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RescaleIntoInterval", "[", "numbers_List", "]"}], " ", ":=", " ", 
    RowBox[{"RescaleIntoInterval", "[", 
     RowBox[{"numbers", ",", " ", "0.5", ",", " ", "0.95"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsFindInImage", "[", 
    RowBox[{"imgPixels_List", ",", " ", "colors_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Position", "[", 
          RowBox[{"imgPixels", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], ",",
        " ", "colors"}], "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "redVals_List", ",", " ", "greenVals_List", ",", " ", "blueVals_List"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{"redVals", ",", " ", "greenVals", ",", " ", "blueVals", ",", " ", 
      RowBox[{"{", " ", "255", " ", "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "red_Integer", ",", " ", "green_Integer", ",", " ", "blue_Integer", ",", 
     " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"red", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"green", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"blue", ",", " ", "delta"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey", ",", " ", "grey", ",", " ", "grey", ",", " ", "delta"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorMake", "[", 
    RowBox[{"r_", ",", "g_", ",", "b_"}], "]"}], " ", ":=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"r", "/", "255"}], ",", " ", 
     RowBox[{"g", "/", "255"}], ",", " ", 
     RowBox[{"b", "/", "255"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ColorMake", "[", "parts_List", "]"}], " ", ":=", " ", 
    RowBox[{"ColorMake", "[", 
     RowBox[{
      RowBox[{"parts", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{"parts", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{
      "parts", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EqualizeImages", "[", "imgs_List", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"smallestW", ",", " ", "smallestH", ",", " ", "sizes"}], "}"}], 
     ",", "\n", "\t", 
     RowBox[{
      RowBox[{"sizes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageDimensions", ",", " ", "imgs"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"smallestW", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"smallestH", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ImageCrop", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"smallestW", ",", " ", "smallestH"}], "}"}]}], "]"}], " ",
          "&"}], ",", " ", "imgs"}], "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapReconstructFromImages", "[", "imgs_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cntSide", ",", " ", "imgsTable"}], "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"cntSide", " ", "=", " ", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Length", "[", "imgs", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgsTable", " ", "=", " ", 
       RowBox[{"ArrayReshape", "[", 
        RowBox[{"imgs", ",", " ", 
         RowBox[{"{", 
          RowBox[{"cntSide", ",", "cntSide"}], "}"}]}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"ImageAssemble", "[", "imgsTable", "]"}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
   3.771102595812048*^9}, 3.771102630105879*^9, {3.771102663030601*^9, 
   3.771102675942957*^9}, {3.771102819347427*^9, 3.771102841217803*^9}, {
   3.7711492274460793`*^9, 3.771149259526984*^9}, {3.7711494968232927`*^9, 
   3.771149500439412*^9}, 3.7711495391273327`*^9, {3.77125210524156*^9, 
   3.7712521814760447`*^9}, {3.771252249246994*^9, 3.771252279427402*^9}, {
   3.7712523472315397`*^9, 3.771252349510272*^9}, {3.7713308537177467`*^9, 
   3.771330854042081*^9}, {3.771351310412696*^9, 3.771351311048148*^9}, {
   3.771352532684317*^9, 3.771352549949391*^9}, {3.771356337886156*^9, 
   3.771356338115733*^9}, {3.7714467936655684`*^9, 3.7714468327252817`*^9}, {
   3.7714477080950613`*^9, 3.771447709078145*^9}, {3.771447785236917*^9, 
   3.771447786651771*^9}, {3.771447949999405*^9, 3.7714479501103563`*^9}, {
   3.771453850679749*^9, 3.771453858089093*^9}, {3.7714943916639833`*^9, 
   3.771494395261273*^9}, {3.771603230447397*^9, 3.771603276204214*^9}, {
   3.77162270325916*^9, 3.771622703769059*^9}, {3.7716720354592876`*^9, 
   3.7716720953478203`*^9}, {3.771672415887467*^9, 3.771672441238475*^9}, {
   3.771672951222991*^9, 3.771672957381604*^9}, {3.7716730265330887`*^9, 
   3.771673027357678*^9}, {3.771673226849732*^9, 3.771673231141677*^9}, {
   3.771673519358794*^9, 3.7716736310995073`*^9}, {3.771691685199237*^9, 
   3.771691693779365*^9}, {3.771691831795059*^9, 3.771691867469315*^9}, {
   3.771691971381495*^9, 3.77169197881502*^9}, {3.771692016649796*^9, 
   3.771692046537582*^9}, {3.771692397520424*^9, 3.7716923999690723`*^9}, {
   3.771692660468504*^9, 3.771692762738967*^9}, {3.7716928504906797`*^9, 
   3.7716928766927843`*^9}, {3.771693062356737*^9, 3.771693078588234*^9}, {
   3.771693618478825*^9, 3.771693675965167*^9}, {3.771693772415101*^9, 
   3.771693808300001*^9}, {3.7716938646087313`*^9, 3.7716938728069553`*^9}, {
   3.7716939585609303`*^9, 3.771693982168026*^9}, {3.771695280962672*^9, 
   3.771695307549501*^9}, {3.771710127577561*^9, 3.771710130111709*^9}, {
   3.771711669963105*^9, 3.771711677464121*^9}, 
   3.771712581117927*^9},ExpressionUUID->"701bc516-4588-4409-bd02-\
62356ee10634"]
}, Closed]],

Cell[CellGroupData[{

Cell["General Constants", "Subsection",
 CellChangeTimes->{{3.771712641920773*^9, 
  3.7717126676907597`*^9}},ExpressionUUID->"c7b8b850-ca31-4d36-a026-\
92bed76431d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "SetDirectory", "[", 
   "\"\</Users/ashvardanian/CodeMine/WolframSummer19/\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathTweets", " ", "=", " ", "\"\<Data/Tweets\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathFeatures", " ", "=", " ", "\"\<Data/Features\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathMaps", " ", "=", " ", "\"\<Data/Maps\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "constantPathSatellites", " ", "=", " ", "\"\<Data/Satellites\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityDiameterKM", " ", "=", " ", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityGridSize", " ", "=", " ", "5"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantShareTraining", " ", "=", " ", "0.9"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantColorsPerPurpose", " ", "=", " ", 
   RowBox[{"Association", "[", 
    RowBox[{"{", "\n", "\t", 
     RowBox[{
      RowBox[{"\"\<Street\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"254", ",", "254", ",", "254"}], "}"}], "}"}]}], ",", " ", 
      "\n", "\t", 
      RowBox[{"\"\<Highway\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"232", ",", "208", ",", "174"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"227", ",", "160", ",", "54"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"242", ",", "196", ",", "99"}], "}"}]}], "}"}]}], ",", "\n",
       "\t", 
      RowBox[{"\"\<Water\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"158", ",", "197", ",", "226"}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Park\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"201", ",", "224", ",", "185"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"196", ",", "211", ",", "192"}], "}"}]}], 
        RowBox[{"(*", 
         RowBox[{"walking", " ", "trails"}], "*)"}], "}"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<Train\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"148", ",", "148", ",", "148"}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<Interesting\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"251", ",", "248", ",", "228"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"240", ",", "236", ",", "228"}], "}"}]}], 
        RowBox[{"(*", "sports", "*)"}], "}"}]}], ",", "\n", "\t", 
      RowBox[{"\"\<Building\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"232", ",", "226", ",", "212"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"235", ",", "233", ",", "231"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"192", ",", "186", ",", "175"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"207", ",", "200", ",", "188"}], "}"}]}], "}"}]}], ",", 
      "\n", "\t", 
      RowBox[{"\"\<Annotations\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"69", ",", "69", ",", "69"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"117", ",", "117", ",", "117"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"63", ",", "63", ",", "63"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"88", ",", "88", ",", "88"}], "}"}]}], "}"}]}]}], "\n", 
     "}"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
   3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102789628256*^9}, {
   3.7711028769656677`*^9, 3.77110295393472*^9}, {3.771165070091775*^9, 
   3.7711650854638367`*^9}, 3.771165246245709*^9, {3.771198271950489*^9, 
   3.771198276482582*^9}, {3.771254152194386*^9, 3.771254159439356*^9}, {
   3.771255141608494*^9, 3.771255185697196*^9}, {3.7712555473089733`*^9, 
   3.771255547533888*^9}, {3.771255652408498*^9, 3.771255664396275*^9}, {
   3.771255707871517*^9, 3.7712557437705793`*^9}, {3.7713263576960297`*^9, 
   3.771326502260768*^9}, {3.771620294508806*^9, 3.7716203042475853`*^9}, {
   3.771622750063384*^9, 3.771622769400876*^9}, {3.7716233651292887`*^9, 
   3.7716234318215*^9}, {3.771670567290987*^9, 3.7716705676824827`*^9}, {
   3.771670646327095*^9, 3.77167064676192*^9}, {3.7716952524589643`*^9, 
   3.7716952557287903`*^9}, {3.771695648533807*^9, 3.7716956553990297`*^9}, {
   3.771696254457182*^9, 3.771696265487063*^9}, {3.771709397551697*^9, 
   3.7717094414883327`*^9}, 
   3.771712671575593*^9},ExpressionUUID->"acdb5163-89af-4011-8610-\
a985ea22ddfc"]
}, Closed]],

Cell[CellGroupData[{

Cell["City Lists", "Subsection",
 CellChangeTimes->{{3.771712714962381*^9, 
  3.77171272190005*^9}},ExpressionUUID->"04bf9ceb-4ddc-4f18-bf62-\
54860b3d9d2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\n", 
   RowBox[{
    RowBox[{"Ordered", " ", "list", " ", "of", " ", 
     RowBox[{"cities", ":", " ", "https", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{"www", ".", "timeout", ".", "com"}], "/", "things"}], "-", "to",
      "-", 
     RowBox[{"do", "/", "best"}], "-", "cities", "-", "in", "-", "the", "-", 
     RowBox[{
     "world", " ", "\n", "Other", " ", "lists", " ", "can", " ", "be", " ", 
      "found", " ", "in", " ", 
      RowBox[{"\"\<CitiesLists.nb\>\"", "."}]}]}]}], "\n", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"CityRowParse", "[", "cityRow_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Interpreter", "[", "\"\<City\>\"", "]"}], "[", 
        RowBox[{"StringJoin", "[", 
         RowBox[{
          RowBox[{
          "cityRow", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
          ",", " ", "\"\<, \>\"", ",", " ", 
          RowBox[{
          "cityRow", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}],
          "]"}], "]"}], ",", " ", 
       RowBox[{
       "cityRow", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      " ", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"citiesWRanks", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"CityRowParse", ",", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{
         "Import", "[", "\"\<Data/Inputs/CitiesMercer2019.csv\>\"", "]"}], 
         ",", " ", "1"}], "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"citiesPopular", " ", "=", " ", 
     RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"citiesPositivness", " ", "=", " ", 
     RowBox[{"RescaleIntoInterval", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"N", "[", 
           RowBox[{"1", "/", "#"}], "]"}], ")"}], " ", "&"}], ",", " ", 
        RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityName", "[", "city_", "]"}], " ", ":=", " ", 
     RowBox[{"EntityValue", "[", 
      RowBox[{"city", ",", " ", "\"\<Name\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityBoundsAround", "[", "cityCenter_", "]"}], " ", ":=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"GeoBoundingBox", "[", 
       RowBox[{"cityCenter", ",", " ", 
        RowBox[{"Quantity", "[", 
         RowBox[{"constantCityDiameterKM", ",", " ", "\"\<Kilometers\>\""}], 
         "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityBounds", "[", "city_", "]"}], " ", ":=", " ", 
     RowBox[{"CityBoundsAround", "[", 
      RowBox[{"GeoCenter", "[", "city", "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory_String", ",", " ", "city_String"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"{", 
       RowBox[{
       "directory", ",", " ", "\"\</\>\"", ",", " ", "city", ",", " ", 
        "\"\<.mx\>\""}], "}"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory_String", ",", " ", "city_"}], "]"}], " ", ":=", " ", 
     
     RowBox[{"CityDataPath", "[", 
      RowBox[{"directory", ",", " ", 
       RowBox[{"CityName", "[", "city", "]"}]}], "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
   3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102789628256*^9}, {
   3.7711028769656677`*^9, 3.77110295393472*^9}, {3.771165070091775*^9, 
   3.7711650854638367`*^9}, 3.771165246245709*^9, {3.771198271950489*^9, 
   3.771198276482582*^9}, {3.771254152194386*^9, 3.771254159439356*^9}, {
   3.771255141608494*^9, 3.771255185697196*^9}, {3.7712555473089733`*^9, 
   3.771255547533888*^9}, {3.771255652408498*^9, 3.771255664396275*^9}, {
   3.771255707871517*^9, 3.7712557437705793`*^9}, {3.7713263576960297`*^9, 
   3.771326502260768*^9}, {3.771620294508806*^9, 3.7716203042475853`*^9}, {
   3.771622750063384*^9, 3.771622769400876*^9}, {3.7716233651292887`*^9, 
   3.7716234318215*^9}, {3.771670567290987*^9, 3.7716705676824827`*^9}, {
   3.771670646327095*^9, 3.77167064676192*^9}, {3.7716952524589643`*^9, 
   3.7716952557287903`*^9}, {3.771695648533807*^9, 3.7716956553990297`*^9}, {
   3.771696254457182*^9, 3.771696265487063*^9}, {3.771709397551697*^9, 
   3.7717094414883327`*^9}, 3.771712671575593*^9, {3.771712948031887*^9, 
   3.7717129487907352`*^9}},ExpressionUUID->"ec5fa737-edff-4f2b-bcf0-\
57aa61e8bf78"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Crawling", "Section",
 CellChangeTimes->{{3.771712752087246*^9, 3.771712759386382*^9}, {
  3.7717131448835773`*^9, 
  3.771713147912314*^9}},ExpressionUUID->"63985375-fa23-4d09-a7dc-\
b6747739c560"],

Cell[CellGroupData[{

Cell["Twitter", "Subsection",
 CellChangeTimes->{
  3.771713150936057*^9},ExpressionUUID->"fa1920ae-8e54-45ec-83bd-\
bd9f5d5988ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"tw", "[", 
     RowBox[{"\"\<TweetSearch\>\"", ",", " ", 
      RowBox[{"\"\<Query\>\"", "\[Rule]", 
       RowBox[{"CityName", "[", "city", "]"}]}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractTweets", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{
  3.771103114668171*^9, {3.771103336765457*^9, 3.771103338095792*^9}, {
   3.771103900064671*^9, 3.771103953970173*^9}, {3.771104192105047*^9, 
   3.771104206425777*^9}, {3.771104623555089*^9, 3.771104634861293*^9}, {
   3.771104668974058*^9, 3.771104690035036*^9}, {3.7711047224932117`*^9, 
   3.771104799500358*^9}, {3.771104931900667*^9, 3.771104987366683*^9}, {
   3.771105022012245*^9, 3.771105218274828*^9}, 3.771105264350816*^9, {
   3.771150962719131*^9, 3.771150964531691*^9}, {3.771151012996887*^9, 
   3.7711510150931873`*^9}, {3.7711511401199427`*^9, 3.771151202612028*^9}, 
   3.771162598734274*^9, 3.77119823213085*^9, {3.7711984660326853`*^9, 
   3.771198471548006*^9}, {3.771255195206545*^9, 3.771255221452676*^9}, {
   3.77133068176521*^9, 3.771330710916729*^9}, {3.771330744590096*^9, 
   3.771330840917815*^9}, {3.771364487765592*^9, 3.771364489560156*^9}, {
   3.771448657237996*^9, 3.771448658832782*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"]
}, Closed]],

Cell[CellGroupData[{

Cell["Maps", "Subsection",
 CellChangeTimes->{{3.7717127706024*^9, 3.7717127876152363`*^9}, 
   3.771713160783309*^9},ExpressionUUID->"ee1bdf2d-8e5c-4019-8ee5-\
eb9655578edf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapsGrid", "[", 
    RowBox[{"city_", ",", " ", "cityCenter_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "gridLats", ",", " ", "gridLons", ",", " ", 
       "cityParts", ",", " ", "MakeCell"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"CityBoundsAround", "[", "cityCenter", "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLats", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLons", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"MakeCell", "[", 
        RowBox[{"i_Integer", ",", " ", "j_Integer"}], "]"}], " ", ":=", " ", 
       RowBox[{"GeoRange", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLats", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLats", "\[LeftDoubleBracket]", 
            RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLons", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLons", "\[LeftDoubleBracket]", 
            RowBox[{"j", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}]}], 
        "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"MakeCell", "[", 
           RowBox[{"i", ",", " ", "j"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "constantCityGridSize"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "constantCityGridSize"}], "}"}]}], "]"}], 
        "]"}]}], ";", "\n", "\t", "cityParts"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityParts", ",", " ", "cityCenter", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", "coords_", "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", 
            RowBox[{"GeoRange", "\[Rule]", "coordsAsList"}], "]"}], "]"}]}]}],
         "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageForCell", ",", " ", "cityParts"}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractMaps", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771255003628858*^9, 3.771255019385186*^9}, {
   3.771255054782916*^9, 3.7712550927175417`*^9}, {3.771255236405387*^9, 
   3.771255264912755*^9}, 3.771255515444641*^9, 3.771255703381096*^9, {
   3.771255752389967*^9, 3.771255777900586*^9}, {3.771255850554541*^9, 
   3.771255853952383*^9}, {3.771329317484642*^9, 3.771329333383959*^9}, {
   3.771329577085322*^9, 3.771329588111939*^9}, 3.7713311687251*^9, {
   3.771585825750794*^9, 3.771585835461856*^9}, {3.7715858909152803`*^9, 
   3.771585900586632*^9}, 3.771585932346272*^9, {3.7715860171344767`*^9, 
   3.7715860713139353`*^9}, {3.771586365243346*^9, 3.771586405924994*^9}, {
   3.771603548460307*^9, 3.771603652291589*^9}, {3.771603725684588*^9, 
   3.771603728770176*^9}, {3.771604534741798*^9, 3.7716046078725767`*^9}, {
   3.771605072996415*^9, 3.771605073369802*^9}, {3.7716051056407633`*^9, 
   3.771605106401538*^9}, {3.771623340038671*^9, 3.7716233434193363`*^9}, {
   3.771623510161605*^9, 3.771623529899592*^9}, {3.771673674224918*^9, 
   3.7716736753418007`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"]
}, Closed]],

Cell[CellGroupData[{

Cell["Satellites", "Subsection",
 CellChangeTimes->{{3.771712791498201*^9, 3.7717127960468273`*^9}, 
   3.771713163753415*^9},ExpressionUUID->"9f81765d-48a1-412b-8f34-\
7c63eeb70cd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityCenter", ",", " ", "cityParts", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", 
        RowBox[{"coords_", ",", " ", "rotation_Real"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", "\n", "                ", 
            RowBox[{
             RowBox[{"GeoRange", " ", "\[Rule]", " ", "coordsAsList"}], ",", 
             " ", "\n", "                ", 
             RowBox[{"GeoProjection", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<ObliqueMercator\>\"", ",", " ", 
                RowBox[{"\"\<Centering\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{"cityCenter", ",", " ", "rotation"}], "}"}]}]}], 
               "}"}]}], ",", "\n", "                ", 
             RowBox[{"GeoBackground", " ", "\[Rule]", " ", 
              RowBox[{"GeoStyling", "[", "\"\<StreetMap\>\"", "]"}]}], ",", 
             " ", "\n", "                ", 
             RowBox[{
             "GeoServer", " ", "\[Rule]", " ", 
              "\"\<http://mt0.google.com/vt/lyrs=s,h&x=`2`&y=`3`&z=`1`\>\""}]}\
], "]"}], "]"}]}]}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Join", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "30.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "45.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "90.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}]}], "\n", "\t", "]"}], "]"}]}]}], "\n", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractSatellites", "[", "city", "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.7716037334248238`*^9, 3.771603763020352*^9}, {
   3.771603881125678*^9, 3.771603882562314*^9}, {3.771604351561441*^9, 
   3.771604362272173*^9}, {3.771604462858472*^9, 3.771604465769896*^9}, {
   3.771605111366535*^9, 3.7716051235802097`*^9}, {3.771618696238031*^9, 
   3.771618737002274*^9}, {3.7716190984180727`*^9, 3.771619167787113*^9}, {
   3.771619230094412*^9, 3.7716193140816317`*^9}, {3.7716194420009613`*^9, 
   3.7716194491737347`*^9}, 3.771619497044444*^9, {3.771619699793701*^9, 
   3.771619711850318*^9}, {3.7716203262336597`*^9, 3.771620356834854*^9}, {
   3.771673684187669*^9, 3.771673685879765*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"]
}, Closed]],

Cell[CellGroupData[{

Cell["Features Extraction", "Subsection",
 CellChangeTimes->{{3.771712806183819*^9, 
  3.77171284384868*^9}},ExpressionUUID->"1b2b8bb4-d2fd-410a-8140-\
48381fbfbec1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractListFeatures", "[", 
    RowBox[{"object_", ",", " ", "props_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"{", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Normal", "[", 
           RowBox[{"object", "[", "#", "]"}], "]"}]}], "}"}], ")"}], " ", 
       "&"}], ",", " ", "props"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCityStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "props", "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\"\<Elevation\>\"", ",", 
         "\"\<MagneticFieldStrength\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", 
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"city", ",", " ", "props"}], "]"}]}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCountryStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "props", ",", " ", "country", ",", " ", "\n", "\t\t", 
       "countryPopulation", ",", " ", "countryArea", ",", " ", "\n", "\t\t", 
       "propsToNormalizeWPopulation", ",", " ", "propsToNormalizeWArea", ",", 
       "\n", "\t\t", "pairsList"}], "\n", "\t", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"country", " ", "=", " ", 
       RowBox[{"city", "[", "\"\<Country\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryArea", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Area\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryPopulation", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Population\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\n", "\t\t", "\"\<Area\>\"", ",", 
         "\"\<WaterArea\>\"", ",", "\"\<BoundaryLength\>\"", ",", 
         "\"\<CoastlineLength\>\"", ",", "\"\<WaterwayLength\>\"", ",", "\n", 
         "\t\t", "\"\<ContributingFamilyWorkers\>\"", ",", "\n", "\t\t", 
         "\"\<GDPPerPersonEmployed\>\"", ",", "\"\<GiniIndex\>\"", ",", 
         "\"\<InterestRateSpread\>\"", ",", "\"\<PovertyHeadcount\>\"", ",", 
         "\"\<UnemploymentRate\>\"", ",", "\n", "\t\t", "\"\<BookTitles\>\"", 
         ",", "\"\<IlliteracyFraction\>\"", ",", "\n", "\t\t", "\n", "\t\t", 
         "\"\<MaleLifeExpectancy\>\"", ",", "\"\<MaleMedianAge\>\"", ",", 
         "\"\<FemaleLifeExpectancy\>\"", ",", "\"\<FemaleMedianAge\>\"", ",", 
         "\n", "\t\t", "\"\<HospitalBedsPer10000Population\>\""}], "\n", "\t",
         "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWArea", " ", "=", " ", 
       RowBox[{"{", " ", "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWPopulation", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Army\>\"", ",", "\"\<HIVAIDSPopulation\>\"", ",", 
         "\"\<ElectricityTotal\>\"", ",", "\n", "\t\t", 
         "\"\<ChildPopulation\>\"", ",", "\"\<ElderlyPopulation\>\"", ",", 
         "\"\<AnnualMarriages\>\"", ",", "\"\<AnnualDivorces\>\"", ",", "\n", 
         "\t\t", "\"\<NetIncomeFromAbroad\>\"", ",", "\"\<GovernmentDebt\>\"",
          ",", "\"\<GovernmentSurplus\>\"", ",", "\"\<ImportsValue\>\"", ",", 
         "\"\<ExportsValue\>\"", ",", "\n", "\t\t", "\"\<LeisureArrivals\>\"",
          ",", "\"\<NewspaperTitles\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"country", ",", " ", "props"}], "]"}], ",", " ", "\n", 
         "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryArea"}]}], "}"}], ")"}], " ", "&"}], 
           ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWArea"}], "]"}]}], 
          "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryPopulation"}]}], "}"}], ")"}], " ", 
            "&"}], ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWPopulation"}], 
            "]"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Country\>\"", ",", " ", 
                RowBox[{
                "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
                "}"}], "]"}], ",", " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}], ")"}], " ", "&"}], ",", " ", "pairsList"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", "pairsList"}], "]"}], 
       "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromPixels", "[", "city_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "imgQuantized", ",", " ", "pixelsList", ",", " ", "freqOfColors", ",", 
       " ", "imgMerged"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"imgMerged", " ", "=", " ", 
       RowBox[{"MapReconstructFromImages", "[", 
        RowBox[{"ImportMaps", "[", "city", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgQuantized", " ", "=", " ", 
       RowBox[{"RemoveAlphaChannel", "[", 
        RowBox[{"ColorQuantize", "[", 
         RowBox[{"imgMerged", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"ColorMake", ",", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Values", "[", "constantColorsPerPurpose", "]"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "2"}], "}"}]}], "]"}]}], "]"}]}], "]"}],
         "]"}]}], ";", "\n", "\t", 
      RowBox[{"pixelsList", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"ImageData", "[", 
          RowBox[{"imgQuantized", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ",
          "1"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"freqOfColors", " ", "=", " ", 
       RowBox[{"AssociationMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"ColorsFindInImage", "[", 
              RowBox[{"pixelsList", ",", " ", 
               RowBox[{"constantColorsPerPurpose", "[", "#", "]"}]}], "]"}], 
             "]"}], " ", "/", " ", 
            RowBox[{"Length", "[", "pixelsList", "]"}]}], ")"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"Keys", "[", "constantColorsPerPurpose", "]"}]}], "]"}]}], 
      ";", "\n", "\t", "freqOfColors"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromOSM", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "osmData", ",", " ", "osmNodes", ",", " ", 
       "osmWays", ",", " ", "parsedWays", ",", " ", "graphWays"}], "}"}], ",",
      "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"GeoBoundingBox", "[", 
        RowBox[{
         RowBox[{"GeoPosition", "[", "city", "]"}], ",", 
         RowBox[{"Quantity", "[", 
          RowBox[{"0.5", ",", " ", "\"\<Kilometers\>\""}], "]"}]}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"osmData", " ", "=", " ", 
       RowBox[{
        RowBox[{"ResourceFunction", "[", "\"\<OSMImport\>\"", "]"}], "[", 
        "cityBounds", "]"}]}], ";", "\n", "\t", 
      RowBox[{"osmNodes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"#", ",", " ", "\"\<Position\>\""}], "]"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"osmData", "[", "\"\<Nodes\>\"", "]"}]}], "]"}]}], ";", "\n",
       "\t", 
      RowBox[{"osmWays", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"osmNodes", ",", " ", 
            RowBox[{"Lookup", "[", 
             RowBox[{"#", ",", " ", "\"\<Nodes\>\""}], "]"}]}], "]"}], " ", 
          "&"}], ",", " ", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"osmData", "[", "\"\<Ways\>\"", "]"}], ",", " ", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Keys", "[", "#Tags", "]"}], ",", "\"\<highway\>\""}], 
             "]"}], " ", "&"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"parsedWays", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"UndirectedEdge", "@@@", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", "2", ",", "1"}], "]"}]}], " ", "&"}], ",", " ", 
          RowBox[{"Values", "[", "osmWays", "]"}]}], "]"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"graphWays", " ", "=", " ", 
       RowBox[{"Graph", "[", "parsedWays", "]"}]}], ";", "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
         RowBox[{"\"\<MeanNeighborDegree\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"MeanNeighborDegree", "[", "graphWays", "]"}], "]"}]}], 
         ",", "\n", "\t\t", 
         RowBox[{"\"\<DegreeCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"DegreeCentrality", "[", "graphWays", "]"}], "]"}]}], ",", 
         "\n", "\t\t", 
         RowBox[{"\"\<ClosenessCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"ClosenessCentrality", "[", "graphWays", "]"}], "]"}]}]}], 
        "\n", "\t", "}"}], "]"}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
   3.771101738955223*^9}, {3.771102348054689*^9, 3.771102377179801*^9}, {
   3.771151297276696*^9, 3.7711513406172113`*^9}, {3.771165996818695*^9, 
   3.771166090601877*^9}, {3.771166173108506*^9, 3.771166257114065*^9}, {
   3.7711663793332567`*^9, 3.7711664011443663`*^9}, {3.771166487336176*^9, 
   3.771166493613332*^9}, {3.771166547031842*^9, 3.771166548165827*^9}, {
   3.771166600953315*^9, 3.771166683297266*^9}, {3.7711667286702223`*^9, 
   3.771166759409555*^9}, {3.771166813508647*^9, 3.77116686156734*^9}, {
   3.771166913675415*^9, 3.771166915031599*^9}, {3.771167002660701*^9, 
   3.7711670324128647`*^9}, {3.771167084473464*^9, 3.771167085469692*^9}, {
   3.771167137989037*^9, 3.77116714854849*^9}, {3.7711966071075907`*^9, 
   3.771196664810173*^9}, {3.771196768138517*^9, 3.771196768956388*^9}, {
   3.7711972557665977`*^9, 3.771197296014269*^9}, {3.771197339836514*^9, 
   3.7711973411966457`*^9}, {3.771197432374444*^9, 3.771197524940136*^9}, {
   3.7711976763793087`*^9, 3.771197702854021*^9}, {3.771197803674632*^9, 
   3.7711979369634132`*^9}, {3.771197967398962*^9, 3.7711980033990593`*^9}, {
   3.7712540825875387`*^9, 3.7712541780295067`*^9}, {3.771254335770904*^9, 
   3.771254359501605*^9}, 3.771254530905891*^9, {3.771254785393812*^9, 
   3.771254808272388*^9}, {3.771255275230245*^9, 3.7712553239167128`*^9}, 
   3.771255878153738*^9, {3.771329391567483*^9, 3.771329411248989*^9}, {
   3.771329565046358*^9, 3.771329572203886*^9}, {3.771496168448968*^9, 
   3.7714962036277237`*^9}, {3.7714962447300997`*^9, 3.771496245963435*^9}, {
   3.771496311404038*^9, 3.771496321537601*^9}, {3.771496373822885*^9, 
   3.7714965489266853`*^9}, {3.771496600537525*^9, 3.771496657002174*^9}, {
   3.771496740056799*^9, 3.7714967412281446`*^9}, {3.7714967773729877`*^9, 
   3.771496816005433*^9}, {3.7714968682908154`*^9, 3.7714968697917128`*^9}, {
   3.771496918369812*^9, 3.7714969345000267`*^9}, {3.77149704823771*^9, 
   3.771497049699279*^9}, {3.771531573462158*^9, 3.7715316783804092`*^9}, {
   3.7715317921088057`*^9, 3.7715319320398483`*^9}, {3.771532053822135*^9, 
   3.771532068932446*^9}, {3.77160369579909*^9, 3.771603699299447*^9}, {
   3.771622717254788*^9, 3.771622744597303*^9}, {3.771622792645124*^9, 
   3.771622866807831*^9}, {3.771622943162854*^9, 3.771622977854175*^9}, {
   3.771623095313883*^9, 3.7716231559729*^9}, 3.771626854648131*^9, {
   3.7716699227396383`*^9, 3.771670136223054*^9}, {3.771670237325835*^9, 
   3.7716702494329853`*^9}, 3.771671175991432*^9, {3.771672127947584*^9, 
   3.771672150478457*^9}, {3.771672230501935*^9, 3.771672268757731*^9}, {
   3.771672315778051*^9, 3.771672366662242*^9}, {3.771672450181912*^9, 
   3.771672518746067*^9}, {3.7716728138915873`*^9, 3.7716728561259413`*^9}, {
   3.771673120085889*^9, 3.7716731965682497`*^9}, 3.771673311335342*^9, {
   3.7716733760174026`*^9, 3.7716734371914263`*^9}, 3.7716736642268753`*^9, {
   3.771673816967555*^9, 3.7716738200197077`*^9}, 3.7716738956763563`*^9, {
   3.771692271635406*^9, 3.771692289122738*^9}, {3.771692328660396*^9, 
   3.771692350779047*^9}, {3.771692435092806*^9, 3.771692466505422*^9}, {
   3.771692537906076*^9, 3.771692624393091*^9}, {3.771692775661364*^9, 
   3.771692789217929*^9}, {3.771692830199643*^9, 3.771692844244501*^9}, {
   3.7716929864537773`*^9, 3.771692987704947*^9}, {3.771693176982716*^9, 
   3.771693223617131*^9}, 3.771693304109569*^9, {3.771693405997867*^9, 
   3.771693411843594*^9}, {3.7716934485301933`*^9, 3.771693487163294*^9}, {
   3.771693563974257*^9, 3.771693605802772*^9}, {3.771693686709693*^9, 
   3.7716936883943577`*^9}, {3.771693815631466*^9, 3.771693817772654*^9}, {
   3.7716940022647877`*^9, 3.771694008168648*^9}, {3.771695318872908*^9, 
   3.7716953200695953`*^9}, {3.771713377771394*^9, 
   3.771713378574774*^9}},ExpressionUUID->"ce916f56-0286-4291-9303-\
f08a2c807b22"]
}, Closed]],

Cell[CellGroupData[{

Cell["Features Post-processing", "Subsection",
 CellChangeTimes->{{3.771713394794116*^9, 3.7717134031528187`*^9}, 
   3.771713690868705*^9},ExpressionUUID->"fcac805f-54fc-4ed9-8bb5-\
df26b8e9ddb1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Merge", "[", 
    RowBox[{
     RowBox[{"{", " ", "\n", "\t", 
      RowBox[{
       RowBox[{"ExtractCityStatsFeatures", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractCountryStatsFeatures", "[", "city", "]"}], ",", " ", 
       "\n", "\t", 
       RowBox[{"ExtractMapFeaturesFromPixels", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractMapFeaturesFromOSM", "[", "city", "]"}]}], "\n", "\t", 
      "}"}], ",", " ", "Total"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], ",", " ", 
     RowBox[{"ExtractAllFeatures", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeaturesClean", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"raw", ",", " ", "keys", ",", " ", "vals"}], "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"raw", " ", "=", " ", 
       RowBox[{"ImportAllFeatures", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"keys", " ", "=", " ", 
       RowBox[{"Keys", "[", "raw", "]"}]}], ";", "\n", "\t", 
      RowBox[{"vals", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"NomalizeNumber", "[", "#", "]"}], "]"}], " ", "&"}], ",", 
         " ", 
         RowBox[{"Values", "[", "raw", "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"keys", ",", " ", "vals"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NormalizeFeatures", "[", "rowsPerSample_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rowsPerFeature", ",", " ", "rowsPerFeatureNormalized"}], "}"}],
      ",", "\n", "\t", 
     RowBox[{
      RowBox[{"rowsPerFeature", " ", "=", " ", 
       RowBox[{"Transpose", "[", "rowsPerSample", "]"}]}], ";", "\n", "\t", 
      RowBox[{"rowsPerFeatureNormalized", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"RescaleIntoInterval", ",", " ", "rowsPerFeature"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Transpose", "[", "rowsPerFeatureNormalized", "]"}]}]}], "\n", 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
   3.771101738955223*^9}, {3.771102348054689*^9, 3.771102377179801*^9}, {
   3.771151297276696*^9, 3.7711513406172113`*^9}, {3.771165996818695*^9, 
   3.771166090601877*^9}, {3.771166173108506*^9, 3.771166257114065*^9}, {
   3.7711663793332567`*^9, 3.7711664011443663`*^9}, {3.771166487336176*^9, 
   3.771166493613332*^9}, {3.771166547031842*^9, 3.771166548165827*^9}, {
   3.771166600953315*^9, 3.771166683297266*^9}, {3.7711667286702223`*^9, 
   3.771166759409555*^9}, {3.771166813508647*^9, 3.77116686156734*^9}, {
   3.771166913675415*^9, 3.771166915031599*^9}, {3.771167002660701*^9, 
   3.7711670324128647`*^9}, {3.771167084473464*^9, 3.771167085469692*^9}, {
   3.771167137989037*^9, 3.77116714854849*^9}, {3.7711966071075907`*^9, 
   3.771196664810173*^9}, {3.771196768138517*^9, 3.771196768956388*^9}, {
   3.7711972557665977`*^9, 3.771197296014269*^9}, {3.771197339836514*^9, 
   3.7711973411966457`*^9}, {3.771197432374444*^9, 3.771197524940136*^9}, {
   3.7711976763793087`*^9, 3.771197702854021*^9}, {3.771197803674632*^9, 
   3.7711979369634132`*^9}, {3.771197967398962*^9, 3.7711980033990593`*^9}, {
   3.7712540825875387`*^9, 3.7712541780295067`*^9}, {3.771254335770904*^9, 
   3.771254359501605*^9}, 3.771254530905891*^9, {3.771254785393812*^9, 
   3.771254808272388*^9}, {3.771255275230245*^9, 3.7712553239167128`*^9}, 
   3.771255878153738*^9, {3.771329391567483*^9, 3.771329411248989*^9}, {
   3.771329565046358*^9, 3.771329572203886*^9}, {3.771496168448968*^9, 
   3.7714962036277237`*^9}, {3.7714962447300997`*^9, 3.771496245963435*^9}, {
   3.771496311404038*^9, 3.771496321537601*^9}, {3.771496373822885*^9, 
   3.7714965489266853`*^9}, {3.771496600537525*^9, 3.771496657002174*^9}, {
   3.771496740056799*^9, 3.7714967412281446`*^9}, {3.7714967773729877`*^9, 
   3.771496816005433*^9}, {3.7714968682908154`*^9, 3.7714968697917128`*^9}, {
   3.771496918369812*^9, 3.7714969345000267`*^9}, {3.77149704823771*^9, 
   3.771497049699279*^9}, {3.771531573462158*^9, 3.7715316783804092`*^9}, {
   3.7715317921088057`*^9, 3.7715319320398483`*^9}, {3.771532053822135*^9, 
   3.771532068932446*^9}, {3.77160369579909*^9, 3.771603699299447*^9}, {
   3.771622717254788*^9, 3.771622744597303*^9}, {3.771622792645124*^9, 
   3.771622866807831*^9}, {3.771622943162854*^9, 3.771622977854175*^9}, {
   3.771623095313883*^9, 3.7716231559729*^9}, 3.771626854648131*^9, {
   3.7716699227396383`*^9, 3.771670136223054*^9}, {3.771670237325835*^9, 
   3.7716702494329853`*^9}, 3.771671175991432*^9, {3.771672127947584*^9, 
   3.771672150478457*^9}, {3.771672230501935*^9, 3.771672268757731*^9}, {
   3.771672315778051*^9, 3.771672366662242*^9}, {3.771672450181912*^9, 
   3.771672518746067*^9}, {3.7716728138915873`*^9, 3.7716728561259413`*^9}, {
   3.771673120085889*^9, 3.7716731965682497`*^9}, 3.771673311335342*^9, {
   3.7716733760174026`*^9, 3.7716734371914263`*^9}, 3.7716736642268753`*^9, {
   3.771673816967555*^9, 3.7716738200197077`*^9}, 3.7716738956763563`*^9, {
   3.771692271635406*^9, 3.771692289122738*^9}, {3.771692328660396*^9, 
   3.771692350779047*^9}, {3.771692435092806*^9, 3.771692466505422*^9}, {
   3.771692537906076*^9, 3.771692624393091*^9}, {3.771692775661364*^9, 
   3.771692789217929*^9}, {3.771692830199643*^9, 3.771692844244501*^9}, {
   3.7716929864537773`*^9, 3.771692987704947*^9}, {3.771693176982716*^9, 
   3.771693223617131*^9}, 3.771693304109569*^9, {3.771693405997867*^9, 
   3.771693411843594*^9}, {3.7716934485301933`*^9, 3.771693487163294*^9}, {
   3.771693563974257*^9, 3.771693605802772*^9}, {3.771693686709693*^9, 
   3.7716936883943577`*^9}, {3.771693815631466*^9, 3.771693817772654*^9}, {
   3.7716940022647877`*^9, 3.771694008168648*^9}, {3.771695318872908*^9, 
   3.7716953200695953`*^9}, {3.771713377771394*^9, 
   3.771713382128508*^9}},ExpressionUUID->"035f3fac-5785-4fb6-8252-\
b10aea312ea8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Automation", "Subsection",
 CellChangeTimes->{{3.7717128644990253`*^9, 3.771712885481298*^9}, 
   3.7717136962139387`*^9},ExpressionUUID->"3b7d840d-c9fe-49f1-92fe-\
dd9a50ebd8f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DownloadDataNeeded", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Echo", "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<Processing city \>\"", ",", " ", 
         RowBox[{"CityName", "[", "city", "]"}]}], "]"}], "]"}], ";", "\n", 
      "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportTweets", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportMaps", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], 
          "]"}]}], ",", " ", 
        RowBox[{"ExportSatellites", "[", "city", "]"}], ",", " ", "Nothing"}],
        "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}],
         ",", " ", 
        RowBox[{"ExportAllFeatures", "[", "city", "]"}], ",", " ", 
        "Nothing"}], "]"}], ";"}]}], "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7714486731894703`*^9, 3.771448746390979*^9}, {
   3.771454070202355*^9, 3.7714541042189007`*^9}, {3.771454145635871*^9, 
   3.7714541708185663`*^9}, {3.771531491849868*^9, 3.771531493954137*^9}, {
   3.771620391630314*^9, 3.771620417772552*^9}, {3.771620757115899*^9, 
   3.771620807232101*^9}, 3.771673776030848*^9, {3.771674120726346*^9, 
   3.771674129414414*^9}, {3.771683495381939*^9, 3.771683495665181*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   StyleBox[
    RowBox[{"tw", " ", "=", " ", 
     RowBox[{"ServiceConnect", "[", "\"\<Twitter\>\"", "]"}]}], "Code"], 
   StyleBox[";", "Code"], "\n", 
   RowBox[{"ClearSystemCache", "[", "]"}], ";", "\n", 
   RowBox[{"Map", "[", 
    RowBox[{"DownloadDataNeeded", ",", " ", 
     RowBox[{"Drop", "[", 
      RowBox[{"citiesPopular", ",", " ", "70"}], "]"}]}], "]"}], ";"}], 
  "*)"}]], "Code",
 CellChangeTimes->{{3.7714541818692417`*^9, 3.7714541855013533`*^9}, {
  3.771495717530364*^9, 3.7714957234432993`*^9}, {3.771585795840542*^9, 
  3.771585798253406*^9}, {3.7716709064736547`*^9, 3.771670909272904*^9}, {
  3.771674109863604*^9, 3.7716741413335667`*^9}, {3.771690331972289*^9, 
  3.771690337584732*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What can be predicted with Twitter?", "Section",
 CellChangeTimes->{{3.7717129018593807`*^9, 3.771712925728685*^9}, {
  3.771713296165682*^9, 
  3.771713308642982*^9}},ExpressionUUID->"1720891f-8e04-46f0-8ae9-\
4c3257b2a22a"],

Cell[CellGroupData[{

Cell["Estimating Sentiment", "Subsection",
 CellChangeTimes->{{3.771712584921867*^9, 3.771712591179371*^9}, {
  3.771713240508605*^9, 
  3.771713267417141*^9}},ExpressionUUID->"cd86ce5d-5f3d-4938-a2ae-\
9d0f8a94ab58"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentimentWL", "[", "sentence_String", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "probs", ",", " ", "pPos", ",", " ", "pNeu", ",", " ", "pNeg", ",", " ",
        "resultPositivness", ",", " ", "resultCertainity"}], "}"}], ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"probs", " ", "=", " ", 
       RowBox[{"Classify", "[", 
        RowBox[{
        "\"\<Sentiment\>\"", ",", " ", "sentence", ",", " ", 
         "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"pPos", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Positive\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeu", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Neutral\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeg", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Negative\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultPositivness", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"pPos", " ", "+", " ", 
         RowBox[{"pNeu", " ", "*", " ", "0.5"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultCertainity", " ", "=", " ", 
       RowBox[{"Max", "[", "probs", "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"{", 
       RowBox[{"resultPositivness", ",", "resultCertainity"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences_", ",", " ", "func_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"{", 
        RowBox[{"#", ",", " ", 
         RowBox[{"func", "[", "#", "]"}]}], "}"}], ")"}], " ", "&"}], ",", 
     " ", "sentences"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", "sentences_", "]"}], " ", ":=", " ", 
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences", ",", " ", "EstimateSentimentWL"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateQualityOfLifeWSentiment", "[", "data_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sentences", ",", " ", "tweetsWSentiments", ",", " ", 
       "sentimentsWCertainity", ",", " ", "meanPositivness", ",", " ", 
       "meanCertainty"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"sentences", " ", "=", " ", 
       RowBox[{"data", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", " ", "\"\<Text\>\""}], 
        "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
      RowBox[{"tweetsWSentiments", " ", "=", " ", 
       RowBox[{"EstimateSentiments", "[", "sentences", "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"sentimentsWCertainity", " ", "=", " ", 
       RowBox[{"tweetsWSentiments", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"meanPositivness", " ", "=", " ", 
       RowBox[{"MeanAround", "[", 
        RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"meanCertainty", " ", "=", " ", 
       RowBox[{"MeanAround", "[", 
        RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{"meanPositivness", ",", " ", "meanCertainty"}], "}"}]}]}], 
    "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
   3.771102595812048*^9}, 3.771102630105879*^9, {3.771102663030601*^9, 
   3.771102675942957*^9}, {3.771102819347427*^9, 3.771102841217803*^9}, {
   3.7711492274460793`*^9, 3.771149259526984*^9}, {3.7711494968232927`*^9, 
   3.771149500439412*^9}, 3.7711495391273327`*^9, {3.77125210524156*^9, 
   3.7712521814760447`*^9}, {3.771252249246994*^9, 3.771252279427402*^9}, {
   3.7712523472315397`*^9, 3.771252349510272*^9}, {3.7713308537177467`*^9, 
   3.771330854042081*^9}, {3.771351310412696*^9, 3.771351311048148*^9}, {
   3.771352532684317*^9, 3.771352549949391*^9}, {3.771356337886156*^9, 
   3.771356338115733*^9}, {3.7714467936655684`*^9, 3.7714468327252817`*^9}, {
   3.7714477080950613`*^9, 3.771447709078145*^9}, {3.771447785236917*^9, 
   3.771447786651771*^9}, {3.771447949999405*^9, 3.7714479501103563`*^9}, {
   3.771453850679749*^9, 3.771453858089093*^9}, {3.7714943916639833`*^9, 
   3.771494395261273*^9}, {3.771603230447397*^9, 3.771603276204214*^9}, {
   3.77162270325916*^9, 3.771622703769059*^9}, {3.7716720354592876`*^9, 
   3.7716720953478203`*^9}, {3.771672415887467*^9, 3.771672441238475*^9}, {
   3.771672951222991*^9, 3.771672957381604*^9}, {3.7716730265330887`*^9, 
   3.771673027357678*^9}, {3.771673226849732*^9, 3.771673231141677*^9}, {
   3.771673519358794*^9, 3.7716736310995073`*^9}, {3.771691685199237*^9, 
   3.771691693779365*^9}, {3.771691831795059*^9, 3.771691867469315*^9}, {
   3.771691971381495*^9, 3.77169197881502*^9}, {3.771692016649796*^9, 
   3.771692046537582*^9}, {3.771692397520424*^9, 3.7716923999690723`*^9}, {
   3.771692660468504*^9, 3.771692762738967*^9}, {3.7716928504906797`*^9, 
   3.7716928766927843`*^9}, {3.771693062356737*^9, 3.771693078588234*^9}, {
   3.771693618478825*^9, 3.771693675965167*^9}, {3.771693772415101*^9, 
   3.771693808300001*^9}, {3.7716938646087313`*^9, 3.7716938728069553`*^9}, {
   3.7716939585609303`*^9, 3.771693982168026*^9}, {3.771695280962672*^9, 
   3.771695307549501*^9}, {3.771710127577561*^9, 3.771710130111709*^9}, {
   3.771711669963105*^9, 3.771711677464121*^9}, 
   3.771712581117927*^9},ExpressionUUID->"20961709-7c7a-45d4-a981-\
9ac2574c6877"]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparing the cities", "Subsection",
 CellChangeTimes->{{3.771713496163478*^9, 
  3.771713500279092*^9}},ExpressionUUID->"7fff9ec0-f5cd-48b7-95b6-\
dc9d704181e7"],

Cell["\<\
Once we collect the data from Twitter, we want to see how the \
\>", "Text",
 CellChangeTimes->{{3.771250972015732*^9, 3.771250985754189*^9}, {
  3.771251369189413*^9, 
  3.7712513838841467`*^9}},ExpressionUUID->"13349771-2cbd-4640-86e0-\
2a496adaad4a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tweetsPerCity", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ImportTweets", ",", " ", "citiesPopular"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesEstimates", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"EstimateQualityOfLifeWSentiment", ",", " ", "tweetsPerCity"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesCertainties", " ", "=", " ", 
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "[", "\"\<Value\>\"", "]"}], ")"}], " ", "&"}], ",", " ", 
      RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.77149406487798*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesColors", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.2", ",", " ", "0.2", ",", " ", "0.8", ",", " ", "#"}], 
       "]"}], " ", "&"}], ",", " ", "citiesCertainties"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesPositivnessFromTweets", " ", "=", " ", 
   RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\n", 
 RowBox[{"BarChart", "[", 
  RowBox[{"citiesPositivnessFromTweets", ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Map", "[", 
     RowBox[{"CityName", ",", " ", "citiesPopular"}], "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "citiesColors"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.771494079411756*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], PointBox[{{0., -1.5}, {0., 100.5}}]}, {{}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[Opacity[0.]], 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7176754314465787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 0.5}, {0.7094780254912796, 1.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8279510201653612], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 1.5}, {0.6212207674326337, 2.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5858226737572596], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 2.5}, {0.6756641062959441, 3.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7814289899911246], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 3.5}, {0.6271725928863408, 4.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7481383163139589], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 4.5}, {0.6601309524686282, 5.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7692042146215119], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 5.5}, {0.6075730642972501, 6.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7327042772441816], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 6.5}, {0.596770622020753, 7.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8404387158825382], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 7.5}, {0.5771232505198457, 8.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8312557630917399], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 8.5}, {0.6228594834244057, 9.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6260961199901336], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 9.5}, {0.6152352433003037, 10.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5652934326911856], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 10.5}, {0.6421578707973884, 11.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7555854739895107], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 11.5}, {0.6081083005439462, 12.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.672642655021958], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 12.5}, {0.6119525994424226, 13.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6118940931807957], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 13.5}, {0.6258592853246716, 14.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6486521858581383], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 14.5}, {0.6144830048531488, 15.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7684505417702913], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 15.5}, {0.6556192762962432, 16.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8153390503569053], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 16.5}, {0.6560237091036722, 17.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7274560316754648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 17.5}, {0.5904025661158773, 18.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7728082876660456], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 18.5}, {0.6179754290700187, 19.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6742572811121245], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 19.5}, {0.6187137861652968, 20.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5921630768565032], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 20.5}, {0.6692109538724832, 21.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7374151666926428], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 21.5}, {0.645390985328293, 22.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6195342056686642], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 22.5}, {0.5886012686753667, 23.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6725989818973247], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 23.5}, {0.5448160664477556, 24.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7913772216245962], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 24.5}, {0.6354121176869114, 25.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6401448961760818], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 25.5}, {0.6394968932809129, 26.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7184410608116257], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 26.5}, {0.579597980593741, 27.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7542241346663416], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 27.5}, {0.5989295024826079, 28.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7460133050581996], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 28.5}, {0.6619629406513258, 29.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7531623047682412], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 29.5}, {0.5827312202237238, 30.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6692408355294145], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 30.5}, {0.6118390321474525, 31.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742632421619231], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 31.5}, {0.591228890984654, 32.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7929508183457274], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 32.5}, {0.6893609002730704, 33.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7949320958109738], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 33.5}, {0.6194426043074048, 34.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7469149591329476], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 34.5}, {0.6807395187456539, 35.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6836051160749707], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 35.5}, {0.6203486508741834, 36.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8477249347423831], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 36.5}, {0.6064128564217263, 37.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7407656316527769], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 37.5}, {0.6513873815366721, 38.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7352908639700706], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 38.5}, {0.6430268477412946, 39.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7063532001478714], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 39.5}, {0.5822887528259318, 40.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740515442818265], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 40.5}, {0.7181963600080368, 41.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7004134452611186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 41.5}, {0.5933273561474978, 42.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742482340274929], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 42.5}, {0.6411733052568453, 43.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7477321635209921], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 43.5}, {0.6455747219833612, 44.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7364030307446516], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 44.5}, {0.6427329190005487, 45.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7711372358933629], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 45.5}, {0.7078756726789222, 46.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7767654036241787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 46.5}, {0.6686434667623472, 47.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.64904303211438], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 47.5}, {0.6033673765841746, 48.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.700770727279793], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 48.5}, {0.6410998023559015, 49.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6190907426891815], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 49.5}, {0.6178391396997895, 50.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6943890910053617], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 50.5}, {0.6042482536796245, 51.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740609838770277], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 51.5}, {0.6169263018799168, 52.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7581725625908038], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 52.5}, {0.6314432779959939, 53.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8469636685406186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 53.5}, {0.7693070541839633, 54.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 54.5}, {0.6494507487080535, 55.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6925963047038273], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 55.5}, {0.6915183102232182, 56.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7195621589716865], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 56.5}, {0.668408747790416, 57.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7617675690591228], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 57.5}, {0.6122542954549197, 58.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7876596909353499], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 58.5}, {0.7291236152289445, 59.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7049546378372464], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 59.5}, {0.6037592118143658, 60.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8008400976864876], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 60.5}, {0.665425377890306, 61.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5955252519404673], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 61.5}, {0.5918609488721753, 62.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.785407626612701], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 62.5}, {0.6590054983662713, 63.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7569534814195289], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 63.5}, {0.5732692378453028, 64.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7755731169205828], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 64.5}, {0.7226632958240885, 65.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7455556063723131], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 65.5}, {0.6442027645871149, 66.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6825007689146033], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 66.5}, {0.7552147912593619, 67.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7498187964692874], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 67.5}, {0.6731402126966803, 68.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7989882431141833], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 68.5}, {0.6688696022390684, 69.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7704104618124417], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 69.5}, {0.6099620245815766, 70.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7456155941250098], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 70.5}, {0.7208262198633335, 71.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6472504473406332], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 71.5}, {0.7308789359809917, 72.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6324738586128064], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 72.5}, {0.7473671856270511, 73.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7299857772669577], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 73.5}, {0.6341843233597266, 74.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6015452509722727], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 74.5}, {0.7126700149778475, 75.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6595532891969377], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 75.5}, {0.6672353553106399, 76.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6351817346421648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 76.5}, {0.7139325409556403, 77.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7017515750446992], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 77.5}, {0.6299217123238716, 78.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7515518834107192], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 78.5}, {0.5876020259044288, 79.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7215243102595766], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 79.5}, {0.6122906910805411, 80.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.734098908056747], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 80.5}, {0.6190112425319902, 81.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.759992249665873], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 81.5}, {0.6606208248101461, 82.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8731319695294444], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 82.5}, {0.722870721151543, 83.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7625087537129647], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 83.5}, {0.6755916260057354, 84.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7206750226099803], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 84.5}, {0.6643699915041464, 85.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.95], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 85.5}, {0.5237996092979674, 86.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8117160663836445], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 86.5}, {0.6221696104079373, 87.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7320533133145954], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 87.5}, {0.6200590250592407, 88.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.776464122562469], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 88.5}, {0.6357645924191135, 89.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6182973242042902], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 89.5}, {0.6143173468333734, 90.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7292569783728212], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 90.5}, {0.65166268538485, 91.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6713750940951166], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 91.5}, {0.6729218411962753, 92.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6349591384084473], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 92.5}, {0.616087851021887, 93.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7289144007390973], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 93.5}, {0.6880512175065494, 94.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5487575926839616], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 94.5}, {0.7254583695530306, 95.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6312680449376111], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 95.5}, {0.5697888833456759, 96.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.653432779770862], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 96.5}, {0.6158174798109485, 97.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6876826203094999], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 97.5}, {0.6150705800784589, 98.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.715921450091501], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 98.5}, {0.6161860342693534, 99.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6448723365833492], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 99.5}, {0.6575215137668566, 100.5},
        RoundingRadius->0]}}, {}, {}}, {}, {}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], LineBox[{{0., -1.5}, {0., 102.54}}], 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], LineBox[{{0., 0.5}, Offset[{-6., 0.}, {0., 0.5}]}],
           LineBox[{{0., 100.5}, 
            Offset[{-6., 0.}, {0., 
             100.5}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}]}, {}}}, 
         StyleBox[
          {Thickness[Tiny], 
           InsetBox["\<\"Vienna\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zurich\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Munich\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Auckland\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vancouver\"\>", Offset[{-2, 0}, {0., 5.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"D\[UDoubleDot]sseldorf\"\>", 
            Offset[{-2, 0}, {0., 6.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Frankfurt\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Geneva\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Copenhagen\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Basel\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Sydney\"\>", Offset[{-2, 0}, {0., 11.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Amsterdam\"\>", Offset[{-2, 0}, {0., 12.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Berlin\"\>", Offset[{-2, 0}, {0., 13.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bern\"\>", Offset[{-2, 0}, {0., 14.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wellington\"\>", Offset[{-2, 0}, {0., 15.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Toronto\"\>", Offset[{-2, 0}, {0., 16.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Melbourne\"\>", Offset[{-2, 0}, {0., 17.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Luxemburg\"\>", Offset[{-2, 0}, {0., 18.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ottawa\"\>", Offset[{-2, 0}, {0., 19.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Hamburg\"\>", Offset[{-2, 0}, {0., 20.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Perth\"\>", Offset[{-2, 0}, {0., 21.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montreal\"\>", Offset[{-2, 0}, {0., 22.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stockholm\"\>", Offset[{-2, 0}, {0., 23.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Nuremberg\"\>", Offset[{-2, 0}, {0., 24.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Singapore\"\>", Offset[{-2, 0}, {0., 25.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Oslo\"\>", Offset[{-2, 0}, {0., 26.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brussels\"\>", Offset[{-2, 0}, {0., 27.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stuttgart\"\>", Offset[{-2, 0}, {0., 28.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Adelaide\"\>", Offset[{-2, 0}, {0., 29.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"San Francisco\"\>", Offset[{-2, 0}, {0., 30.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Canberra\"\>", Offset[{-2, 0}, {0., 31.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Helsinki\"\>", Offset[{-2, 0}, {0., 32.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Calgary\"\>", Offset[{-2, 0}, {0., 33.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dublin\"\>", Offset[{-2, 0}, {0., 34.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Boston\"\>", Offset[{-2, 0}, {0., 35.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Honolulu\"\>", Offset[{-2, 0}, {0., 36.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brisbane\"\>", Offset[{-2, 0}, {0., 37.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lisbon\"\>", Offset[{-2, 0}, {0., 38.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Paris\"\>", Offset[{-2, 0}, {0., 39.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lyon\"\>", Offset[{-2, 0}, {0., 40.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"London\"\>", Offset[{-2, 0}, {0., 41.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Milan\"\>", Offset[{-2, 0}, {0., 42.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Barcelona\"\>", Offset[{-2, 0}, {0., 43.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seattle\"\>", Offset[{-2, 0}, {0., 44.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"New York City\"\>", Offset[{-2, 0}, {0., 45.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Edinburgh\"\>", Offset[{-2, 0}, {0., 46.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Chicago\"\>", Offset[{-2, 0}, {0., 47.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Washington\"\>", Offset[{-2, 0}, {0., 48.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Madrid\"\>", Offset[{-2, 0}, {0., 49.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tokyo\"\>", Offset[{-2, 0}, {0., 50.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Kobe\"\>", Offset[{-2, 0}, {0., 51.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Birmingham\"\>", Offset[{-2, 0}, {0., 52.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Glasgow\"\>", Offset[{-2, 0}, {0., 53.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Philadelphia\"\>", Offset[{-2, 0}, {0., 54.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Yokohama\"\>", Offset[{-2, 0}, {0., 55.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Rome\"\>", Offset[{-2, 0}, {0., 56.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Aberdeen\"\>", Offset[{-2, 0}, {0., 57.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Osaka\"\>", Offset[{-2, 0}, {0., 58.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Pittsburgh\"\>", Offset[{-2, 0}, {0., 59.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Leipzig\"\>", Offset[{-2, 0}, {0., 60.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Minneapolis\"\>", Offset[{-2, 0}, {0., 61.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Nagoya\"\>", Offset[{-2, 0}, {0., 62.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dallas\"\>", Offset[{-2, 0}, {0., 63.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Belfast\"\>", Offset[{-2, 0}, {0., 64.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Atlanta\"\>", Offset[{-2, 0}, {0., 65.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Houston\"\>", Offset[{-2, 0}, {0., 66.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Los Angeles\"\>", Offset[{-2, 0}, {0., 67.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Miami\"\>", Offset[{-2, 0}, {0., 68.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Prague\"\>", Offset[{-2, 0}, {0., 69.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Saint Louis\"\>", Offset[{-2, 0}, {0., 70.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Hong Kong\"\>", Offset[{-2, 0}, {0., 71.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Point\[Hyphen]a\[Hyphen]Pitre\"\>", 
            Offset[{-2, 0}, {0., 72.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Detroit\"\>", Offset[{-2, 0}, {0., 73.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ljubljana\"\>", Offset[{-2, 0}, {0., 74.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dubai\"\>", Offset[{-2, 0}, {0., 75.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Budapest\"\>", Offset[{-2, 0}, {0., 76.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seoul\"\>", Offset[{-2, 0}, {0., 77.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Abu Dhabi\"\>", Offset[{-2, 0}, {0., 78.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montevideo\"\>", Offset[{-2, 0}, {0., 79.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bratislava\"\>", Offset[{-2, 0}, {0., 80.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vilnius\"\>", Offset[{-2, 0}, {0., 81.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Warsaw\"\>", Offset[{-2, 0}, {0., 82.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Port Louis\"\>", Offset[{-2, 0}, {0., 83.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Taipei City\"\>", Offset[{-2, 0}, {0., 84.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Kuala Lumpur\"\>", Offset[{-2, 0}, {0., 85.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Lemesos\"\>", Offset[{-2, 0}, {0., 86.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tallinn\"\>", Offset[{-2, 0}, {0., 87.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Durban\"\>", Offset[{-2, 0}, {0., 88.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Athens\"\>", Offset[{-2, 0}, {0., 89.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Riga\"\>", Offset[{-2, 0}, {0., 90.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Buenos Aires\"\>", Offset[{-2, 0}, {0., 91.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"San Juan\"\>", Offset[{-2, 0}, {0., 92.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Santiago\"\>", Offset[{-2, 0}, {0., 93.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Busan\"\>", Offset[{-2, 0}, {0., 94.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Cape Town\"\>", Offset[{-2, 0}, {0., 95.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Johannesburg\"\>", Offset[{-2, 0}, {0., 96.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Panama\"\>", Offset[{-2, 0}, {0., 97.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zagreb\"\>", Offset[{-2, 0}, {0., 98.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Victoria\"\>", Offset[{-2, 0}, {0., 99.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wroc\[LSlash]aw\"\>", Offset[{-2, 0}, {0., 100.}], {1, 0},
             Automatic, {1, 0}]}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6931560262371375, 1.}, {0.7094780254912796, 1.}}], 
        LineBox[{{0.7094780254912796, 1.}, {0.7258000247454217, 1.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607094289536996, 2.}, {0.6212207674326335, 2.}}], 
        LineBox[{{0.6212207674326335, 2.}, {0.6353472453282714, 2.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6626990001926303, 3.}, {0.6756641062959439, 3.}}], 
        LineBox[{{0.6756641062959439, 3.}, {0.6886292123992575, 3.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.611925978309487, 4.}, {0.6271725928863408, 4.}}], 
        LineBox[{{0.6271725928863408, 4.}, {0.6424192074631945, 4.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6460870639090937, 5.}, {0.6601309524686281, 5.}}], 
        LineBox[{{0.6601309524686281, 5.}, {0.6741748410281625, 5.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962777591805315, 6.}, {0.6075730642972506, 6.}}], 
        LineBox[{{0.6075730642972506, 6.}, {0.6188683694139696, 6.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5823675022695207, 7.}, {0.5967706220207534, 7.}}], 
        LineBox[{{0.5967706220207534, 7.}, {0.611173741771986, 7.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5663558216809923, 8.}, {0.577123250519846, 8.}}], 
        LineBox[{{0.577123250519846, 8.}, {0.5878906793586998, 8.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.609306240623761, 9.}, {0.6228594834244063, 9.}}], 
        LineBox[{{0.6228594834244063, 9.}, {0.6364127262250516, 9.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.602589516913655, 10.}, {0.6152352433003045, 10.}}], 
        LineBox[{{0.6152352433003045, 10.}, {0.6278809696869541, 10.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6243519348133741, 11.}, {0.642157870797389, 11.}}], 
        LineBox[{{0.642157870797389, 11.}, {0.6599638067814038, 11.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962786054454714, 12.}, {0.6081083005439467, 12.}}], 
        LineBox[{{0.6081083005439467, 12.}, {0.619937995642422, 12.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5973894087981311, 13.}, {0.6119525994424233, 13.}}], 
        LineBox[{{0.6119525994424233, 13.}, {0.6265157900867155, 13.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6107708292821119, 14.}, {0.6258592853246725, 14.}}], 
        LineBox[{{0.6258592853246725, 14.}, {0.6409477413672331, 14.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6003538775350705, 15.}, {0.6144830048531489, 15.}}], 
        LineBox[{{0.6144830048531489, 15.}, {0.6286121321712272, 15.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6383251182735634, 16.}, {0.6556192762962425, 16.}}], 
        LineBox[{{0.6556192762962425, 16.}, {0.6729134343189216, 16.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6402367918194223, 17.}, {0.6560237091036711, 17.}}], 
        LineBox[{{0.6560237091036711, 17.}, {0.67181062638792, 17.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5792577349766397, 18.}, {0.5904025661158769, 18.}}], 
        LineBox[{{0.5904025661158769, 18.}, {0.6015473972551142, 18.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6029986181541211, 19.}, {0.6179754290700181, 19.}}], 
        LineBox[{{0.6179754290700181, 19.}, {0.6329522399859151, 19.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607561314375463, 20.}, {0.6187137861652978, 20.}}], 
        LineBox[{{0.6187137861652978, 20.}, {0.6298662579551326, 20.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6525039814250775, 21.}, {0.6692109538724829, 21.}}], 
        LineBox[{{0.6692109538724829, 21.}, {0.6859179263198882, 21.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6323408491114471, 22.}, {0.6453909853282944, 22.}}], 
        LineBox[{{0.6453909853282944, 22.}, {0.6584411215451418, 22.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5732056294699852, 23.}, {0.5886012686753652, 23.}}], 
        LineBox[{{0.5886012686753652, 23.}, {0.6039969078807452, 23.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5329560968633658, 24.}, {0.5448160664477548, 24.}}], 
        LineBox[{{0.5448160664477548, 24.}, {0.5566760360321439, 24.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6151323036093927, 25.}, {0.6354121176869114, 25.}}], 
        LineBox[{{0.6354121176869114, 25.}, {0.6556919317644301, 25.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6270185786480234, 26.}, {0.6394968932809135, 26.}}], 
        LineBox[{{0.6394968932809135, 26.}, {0.6519752079138037, 26.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5609547623451583, 27.}, {0.5795979805937392, 27.}}], 
        LineBox[{{0.5795979805937392, 27.}, {0.5982411988423202, 27.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5870883811481669, 28.}, {0.5989295024826085, 28.}}], 
        LineBox[{{0.5989295024826085, 28.}, {0.61077062381705, 28.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6438315328996005, 29.}, {0.6619629406513248, 29.}}], 
        LineBox[{{0.6619629406513248, 29.}, {0.680094348403049, 29.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.572425284795667, 30.}, {0.5827312202237245, 30.}}], 
        LineBox[{{0.5827312202237245, 30.}, {0.5930371556517819, 30.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997928165660724, 31.}, {0.6118390321474507, 31.}}], 
        LineBox[{{0.6118390321474507, 31.}, {0.623885247728829, 31.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5791223061268234, 32.}, {0.5912288909846524, 32.}}], 
        LineBox[{{0.5912288909846524, 32.}, {0.6033354758424849, 32.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6732903202081246, 33.}, {0.6893609002730727, 33.}}], 
        LineBox[{{0.6893609002730727, 33.}, {0.7054314803380208, 33.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6043150315818124, 34.}, {0.6194426043074017, 34.}}], 
        LineBox[{{0.6194426043074017, 34.}, {0.634570177032991, 34.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6648449502564873, 35.}, {0.6807395187456535, 35.}}], 
        LineBox[{{0.6807395187456535, 35.}, {0.6966340872348198, 35.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6079208557048972, 36.}, {0.6203486508741847, 36.}}], 
        LineBox[{{0.6203486508741847, 36.}, {0.6327764460434722, 36.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5922896194692697, 37.}, {0.606412856421727, 37.}}], 
        LineBox[{{0.606412856421727, 37.}, {0.6205360933741844, 37.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6377319288732863, 38.}, {0.6513873815366722, 38.}}], 
        LineBox[{{0.6513873815366722, 38.}, {0.665042834200058, 38.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6293688606094037, 39.}, {0.6430268477412966, 39.}}], 
        LineBox[{{0.6430268477412966, 39.}, {0.6566848348731895, 39.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5714504588434224, 40.}, {0.5822887528259315, 40.}}], 
        LineBox[{{0.5822887528259315, 40.}, {0.5931270468084406, 40.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7010851947862093, 41.}, {0.7181963600080365, 41.}}], 
        LineBox[{{0.7181963600080365, 41.}, {0.7353075252298638, 41.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5815781739533534, 42.}, {0.5933273561474977, 42.}}], 
        LineBox[{{0.5933273561474977, 42.}, {0.6050765383416419, 42.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6271108959506861, 43.}, {0.6411733052568422, 43.}}], 
        LineBox[{{0.6411733052568422, 43.}, {0.6552357145629983, 43.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6299308561489241, 44.}, {0.6455747219833583, 44.}}], 
        LineBox[{{0.6455747219833583, 44.}, {0.6612185878177925, 44.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6292783323557103, 45.}, {0.6427329190005509, 45.}}], 
        LineBox[{{0.6427329190005509, 45.}, {0.6561875056453914, 45.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6927886940793755, 46.}, {0.7078756726789237, 46.}}], 
        LineBox[{{0.7078756726789237, 46.}, {0.7229626512784719, 46.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.651774791587421, 47.}, {0.6686434667623473, 47.}}], 
        LineBox[{{0.6686434667623473, 47.}, {0.6855121419372736, 47.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5933338838894073, 48.}, {0.603367376584174, 48.}}], 
        LineBox[{{0.603367376584174, 48.}, {0.6134008692789408, 48.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6284559513894123, 49.}, {0.6410998023559031, 49.}}], 
        LineBox[{{0.6410998023559031, 49.}, {0.6537436533223939, 49.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6048896989249286, 50.}, {0.6178391396997895, 50.}}], 
        LineBox[{{0.6178391396997895, 50.}, {0.6307885804746505, 50.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5896378073164854, 51.}, {0.6042482536796214, 51.}}], 
        LineBox[{{0.6042482536796214, 51.}, {0.6188587000427574, 51.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997231691138012, 52.}, {0.6169263018799143, 52.}}], 
        LineBox[{{0.6169263018799143, 52.}, {0.6341294346460273, 52.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.617183207082185, 53.}, {0.6314432779959915, 53.}}], 
        LineBox[{{0.6314432779959915, 53.}, {0.6457033489097981, 53.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7522961627444431, 54.}, {0.7693070541839617, 54.}}], 
        LineBox[{{0.7693070541839617, 54.}, {0.7863179456234803, 54.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6394597468001137, 55.}, {0.6494507487080554, 55.}}], 
        LineBox[{{0.6494507487080554, 55.}, {0.6594417506159971, 55.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.673977709853304, 56.}, {0.6915183102232163, 56.}}], 
        LineBox[{{0.6915183102232163, 56.}, {0.7090589105931286, 56.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6531908043624526, 57.}, {0.6684087477904157, 57.}}], 
        LineBox[{{0.6684087477904157, 57.}, {0.6836266912183788, 57.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997613166035691, 58.}, {0.6122542954549175, 58.}}], 
        LineBox[{{0.6122542954549175, 58.}, {0.6247472743062659, 58.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.714377631184874, 59.}, {0.7291236152289429, 59.}}], 
        LineBox[{{0.7291236152289429, 59.}, {0.7438695992730118, 59.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5925146944734934, 60.}, {0.6037592118143635, 60.}}], 
        LineBox[{{0.6037592118143635, 60.}, {0.6150037291552337, 60.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6497570523106688, 61.}, {0.6654253778903083, 61.}}], 
        LineBox[{{0.6654253778903083, 61.}, {0.6810937034699478, 61.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5816489707111003, 62.}, {0.5918609488721742, 62.}}], 
        LineBox[{{0.5918609488721742, 62.}, {0.6020729270332481, 62.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6422076264530645, 63.}, {0.6590054983662696, 63.}}], 
        LineBox[{{0.6590054983662696, 63.}, {0.6758033702794748, 63.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5560470449513986, 63.99999999999999}, {0.5732692378453024,
          63.99999999999999}}], 
        LineBox[{{0.5732692378453024, 63.99999999999999}, {0.5904914307391991,
          63.99999999999999}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7065082158336509, 65.}, {0.7226632958240913, 65.}}], 
        LineBox[{{0.7226632958240913, 65.}, {0.7388183758145317, 65.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6286383699081171, 66.}, {0.6442027645871207, 66.}}], 
        LineBox[{{0.6442027645871207, 66.}, {0.6597671592661243, 66.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7413000728510326, 67.}, {0.7552147912593625, 67.}}], 
        LineBox[{{0.7552147912593625, 67.}, {0.7691295096676924, 67.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6551862255091407, 68.}, {0.6731402126966799, 68.}}], 
        LineBox[{{0.6731402126966799, 68.}, {0.691094199884219, 68.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6463920133120951, 69.}, {0.6688696022390701, 69.}}], 
        LineBox[{{0.6688696022390701, 69.}, {0.6913471911660451, 69.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5968182929156427, 70.}, {0.6099620245815771, 70.}}], 
        LineBox[{{0.6099620245815771, 70.}, {0.6231057562475115, 70.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7046769634126235, 71.}, {0.7208262198633406, 71.}}], 
        LineBox[{{0.7208262198633406, 71.}, {0.7369754763140577, 71.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6977079224091227, 72.}, {0.7308789359809964, 72.}}], 
        LineBox[{{0.7308789359809964, 72.}, {0.7640499495528701, 72.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7333973890230396, 73.}, {0.7473671856270556, 73.}}], 
        LineBox[{{0.7473671856270556, 73.}, {0.7613369822310716, 73.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6218319786978981, 74.}, {0.6341843233597331, 74.}}], 
        LineBox[{{0.6341843233597331, 74.}, {0.6465366680215681, 74.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6985158103175308, 75.}, {0.7126700149778458, 75.}}], 
        LineBox[{{0.7126700149778458, 75.}, {0.7268242196381607, 75.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6526980686446393, 76.}, {0.6672353553106376, 76.}}], 
        LineBox[{{0.6672353553106376, 76.}, {0.6817726419766359, 76.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.697828385657786, 77.}, {0.7139325409556392, 77.}}], 
        LineBox[{{0.7139325409556392, 77.}, {0.7300366962534923, 77.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6161548514941018, 78.}, {0.6299217123238776, 78.}}], 
        LineBox[{{0.6299217123238776, 78.}, {0.6436885731536535, 78.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5769676913913457, 79.}, {0.587602025904431, 79.}}], 
        LineBox[{{0.587602025904431, 79.}, {0.5982363604175163, 79.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6000718332992534, 80.}, {0.6122906910805455, 80.}}], 
        LineBox[{{0.6122906910805455, 80.}, {0.6245095488618375, 80.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6072573886117851, 81.}, {0.6190112425319967, 81.}}], 
        LineBox[{{0.6190112425319967, 81.}, {0.6307650964522082, 81.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6417502598538931, 82.}, {0.6606208248101524, 82.}}], 
        LineBox[{{0.6606208248101524, 82.}, {0.6794913897664117, 82.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7063442694693549, 83.}, {0.722870721151537, 83.}}], 
        LineBox[{{0.722870721151537, 83.}, {0.7393971728337192, 83.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6588306323458539, 84.}, {0.6755916260057404, 84.}}], 
        LineBox[{{0.6755916260057404, 84.}, {0.6923526196656269, 84.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6500478008457975, 85.}, {0.6643699915041452, 85.}}], 
        LineBox[{{0.6643699915041452, 85.}, {0.6786921821624929, 85.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5202163656607297, 86.}, {0.5237996092979671, 86.}}], 
        LineBox[{{0.5237996092979671, 86.}, {0.5273828529352045, 86.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6067654704210526, 87.}, {0.6221696104079371, 87.}}], 
        LineBox[{{0.6221696104079371, 87.}, {0.6375737503948216, 87.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6011939060913676, 88.}, {0.6200590250592342, 88.}}], 
        LineBox[{{0.6200590250592342, 88.}, {0.6389241440271007, 88.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6204098559094007, 89.}, {0.6357645924191075, 89.}}], 
        LineBox[{{0.6357645924191075, 89.}, {0.6511193289288144, 89.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6015694747329121, 90.}, {0.6143173468333742, 90.}}], 
        LineBox[{{0.6143173468333742, 90.}, {0.6270652189338364, 90.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6387277043256177, 91.}, {0.6516626853848493, 91.}}], 
        LineBox[{{0.6516626853848493, 91.}, {0.6645976664440809, 91.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6604144565054071, 92.}, {0.6729218411962705, 92.}}], 
        LineBox[{{0.6729218411962705, 92.}, {0.685429225887134, 92.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6045387278791168, 93.}, {0.6160878510218879, 93.}}], 
        LineBox[{{0.6160878510218879, 93.}, {0.627636974164659, 93.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6684423853504313, 94.}, {0.6880512175065547, 94.}}], 
        LineBox[{{0.6880512175065547, 94.}, {0.7076600496626781, 94.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7128052088890229, 95.}, {0.7254583695530243, 95.}}], 
        LineBox[{{0.7254583695530243, 95.}, {0.7381115302170258, 95.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5590620488308247, 96.}, {0.5697888833456801, 96.}}], 
        LineBox[{{0.5697888833456801, 96.}, {0.5805157178605356, 96.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6051117211993216, 97.}, {0.6158174798109428, 97.}}], 
        LineBox[{{0.6158174798109428, 97.}, {0.6265232384225641, 97.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6024952581233975, 98.}, {0.6150705800784522, 98.}}], 
        LineBox[{{0.6150705800784522, 98.}, {0.6276459020335068, 98.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6004694940719304, 99.}, {0.6161860342693473, 99.}}], 
        LineBox[{{0.6161860342693473, 99.}, {0.6319025744667641, 99.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6456382017611304, 100.}, {0.6575215137668522, 100.}}], 
        LineBox[{{0.6575215137668522, 100.}, {0.669404825772574, 100.}}]}},
      Antialiasing->False]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -1.5},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{Automatic, 779.3044379101113},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.7714538701095057`*^9, 3.771494004367584*^9, {3.7714940668059607`*^9, 
   3.7714940808827353`*^9}, 3.771494470980624*^9, 3.771670999214221*^9, 
   3.771690382504343*^9, 3.771703748413437*^9, 3.771709022107864*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],

Cell["\<\
As we can see, there is not much variance between cities, in terms of Tweets \
sentiment.\[LineSeparator]Lets compile multiple rankings together, assuming \
that they have had a more complete model for estimating the quality of life \
and satisfaction.\
\>", "Text",
 CellChangeTimes->{{3.7711983003938007`*^9, 3.771198312367927*^9}, {
  3.771198345411821*^9, 3.771198357701936*^9}, {3.771251296055133*^9, 
  3.77125134665545*^9}},ExpressionUUID->"04da58f6-384a-4c46-83b1-\
c68f03702b2d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multi-source approach?", "Section",
 CellChangeTimes->{{3.771712976773937*^9, 3.771713011285736*^9}, {
  3.771713345797237*^9, 
  3.771713351892058*^9}},ExpressionUUID->"d1be2ff7-0399-4fec-9761-\
8befa64c33fd"],

Cell[CellGroupData[{

Cell["Linear Regression", "Subsection",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
  3.771101738955223*^9}, {3.771102348054689*^9, 3.771102348771636*^9}, {
  3.771713335827496*^9, 
  3.771713339378332*^9}},ExpressionUUID->"1e314e11-051b-4643-8db0-\
01d456f6b7b3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionRect", "[", 
    RowBox[{"rowsPerSample_", ",", " ", "predictionsVals_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputNormalized", ",", " ", "p", ",", " ", "pLinearLayer", ",", " ", 
       "pWeights"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Predict", "[", 
        RowBox[{
         RowBox[{"rowsPerSample", "\[Rule]", "predictionsVals"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}],
       ";", "\n", "\t", 
      RowBox[{"pLinearLayer", " ", "=", " ", 
       RowBox[{"p", "\[LeftDoubleBracket]", 
        RowBox[{
        "1", ",", " ", "\"\<Model\>\"", ",", " ", "\"\<MeanFunction\>\""}], 
        "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
      RowBox[{"pWeights", " ", "=", " ", 
       RowBox[{"Normal", " ", "@", " ", 
        RowBox[{
         RowBox[{
         "pLinearLayer", "\[LeftDoubleBracket]", "\"\<Arrays\>\"", 
          "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
         "\"\<Weights\>\"", "\[RightDoubleBracket]"}]}]}], ";", "\n", "\t", 
      "pWeights"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionSquare", "[", 
    RowBox[{"rowsPerSample_List", ",", " ", "predictionsVals_List"}], "]"}], 
   " ", ":=", " ", 
   RowBox[{
    RowBox[{"Inverse", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
      "rowsPerSample"}], "]"}], ".", 
    RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
    "predictionsVals"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RunRegression", "[", 
    RowBox[{"weights_List", ",", " ", "rowOfSample_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Total", "[", 
    RowBox[{"Dot", "[", 
     RowBox[{"weights", ",", " ", "rowOfSample"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "rowsPerSample_", ",", " ", "estimatesPerSample_", ",", " ", 
     "featuresNames_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "inputTrain", ",", " ", "inputValidate", ",", " ", "outputTrain", ",", 
       " ", "outputValidate", ",", " ", "outputEstimated", ",", " ", "\n", 
       "\t\t", "modelWights", ",", " ", "error", ",", " ", "chart", ",", " ", 
       "result", ",", " ", "trainingCount"}], "\n", "\t", "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"trainingCount", " ", "=", " ", 
       RowBox[{"Length", "[", "featuresNames", "]"}]}], ";", "\n", "\t", 
      RowBox[{"inputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"inputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"modelWights", " ", "=", " ", 
       RowBox[{"FitRegressionSquare", "[", 
        RowBox[{"inputTrain", ",", " ", "outputTrain"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"outputEstimated", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"RunRegression", "[", 
            RowBox[{"modelWights", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], 
         ",", " ", "inputValidate"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"error", " ", "=", " ", 
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{
          RowBox[{"outputValidate", "-", "outputEstimated"}], ",", " ", "1"}],
          "]"}], " ", "/", " ", 
        RowBox[{"Length", "[", "outputValidate", "]"}]}]}], ";", "\n", "\t", 
      RowBox[{"chart", " ", "=", " ", 
       RowBox[{"BarChart", "[", 
        RowBox[{"modelWights", ",", " ", 
         RowBox[{"ChartLabels", "\[Rule]", "featuresNames"}], ",", " ", 
         RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]}], ";", "\n", "\n",
       "\t", 
      RowBox[{"{", 
       RowBox[{"error", ",", " ", "chart", ",", " ", "modelWights"}], 
       "}"}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7711662130281467`*^9, 3.771166215352922*^9}, {
   3.771197303426878*^9, 3.771197321169957*^9}, 3.7711979403664637`*^9, {
   3.7712530800287*^9, 3.771253141824217*^9}, {3.771254232616996*^9, 
   3.771254234573873*^9}, {3.771254814339655*^9, 3.771254823206771*^9}, 
   3.7712553544971323`*^9, {3.771328798359071*^9, 3.77132888435972*^9}, {
   3.7713291571827993`*^9, 3.771329174673594*^9}, 3.7713293391980677`*^9, 
   3.771331075460321*^9, {3.771331205881012*^9, 3.771331248469551*^9}, {
   3.771331393724903*^9, 3.771331454273843*^9}, {3.771331858875564*^9, 
   3.771331859310504*^9}, {3.771350065960774*^9, 3.771350191065762*^9}, {
   3.77135028904036*^9, 3.77135038946412*^9}, {3.771350481018968*^9, 
   3.7713505263093023`*^9}, {3.771350558816463*^9, 3.771350563948971*^9}, {
   3.7713506446320753`*^9, 3.7713507842900333`*^9}, {3.771350817906404*^9, 
   3.771350846145687*^9}, {3.771350876488069*^9, 3.7713508841268377`*^9}, {
   3.7713509316696663`*^9, 3.7713509342461567`*^9}, {3.771350984109829*^9, 
   3.771350998574337*^9}, {3.771351055424478*^9, 3.7713510624171057`*^9}, {
   3.771351101585807*^9, 3.7713511911911087`*^9}, {3.7713512369373617`*^9, 
   3.771351250335422*^9}, {3.7713513310208883`*^9, 3.77135133335221*^9}, {
   3.771351380363995*^9, 3.7713515293458843`*^9}, {3.771351774107162*^9, 
   3.7713517906407347`*^9}, {3.7713520499554853`*^9, 3.771352315025916*^9}, {
   3.771352349303665*^9, 3.7713523510083237`*^9}, {3.7713560430968847`*^9, 
   3.7713560435384607`*^9}, {3.771356193141917*^9, 3.771356209902203*^9}, {
   3.771356247076288*^9, 3.771356263584107*^9}, {3.7713563852974243`*^9, 
   3.7713564696868773`*^9}, {3.771356591772225*^9, 3.7713566103639402`*^9}, {
   3.7713566444034557`*^9, 3.771356701197536*^9}, {3.7713567502401333`*^9, 
   3.7713567575500526`*^9}, 3.771356823846187*^9, {3.771358873740418*^9, 
   3.7713588807112637`*^9}, {3.7713590285376263`*^9, 3.771359057644163*^9}, {
   3.771359109388794*^9, 3.771359112790992*^9}, {3.7713591431612787`*^9, 
   3.77135922756713*^9}, {3.7713592619363203`*^9, 3.771359292243853*^9}, {
   3.771359372067912*^9, 3.771359374741563*^9}, {3.771360895901122*^9, 
   3.771360899433941*^9}, {3.7713610810330563`*^9, 3.77136111925381*^9}, {
   3.77136401463911*^9, 3.7713640164404716`*^9}, {3.771446660355817*^9, 
   3.771446727670577*^9}, {3.771446873632465*^9, 3.7714469866514874`*^9}, {
   3.771447225288508*^9, 3.771447245418425*^9}, {3.771447572405847*^9, 
   3.7714476354199877`*^9}, {3.7714477162181168`*^9, 3.771447722343709*^9}, {
   3.771448126328205*^9, 3.771448131249926*^9}, {3.7714481648627768`*^9, 
   3.7714481686175623`*^9}, {3.771448253260311*^9, 3.7714482857993307`*^9}, {
   3.77144844007451*^9, 3.771448451243819*^9}, {3.771448558866544*^9, 
   3.771448563297144*^9}, {3.771448764648456*^9, 3.77144876860842*^9}, {
   3.771449067102228*^9, 3.771449080131538*^9}, {3.771494289253888*^9, 
   3.771494327853054*^9}, {3.771494615217038*^9, 3.7714947103326817`*^9}, {
   3.7714948502019863`*^9, 3.771494852978088*^9}, {3.77149494734484*^9, 
   3.7714949614652967`*^9}, {3.771495406943359*^9, 3.7714954693078527`*^9}, 
   3.771495540516691*^9, {3.771495803706192*^9, 3.7714958676028767`*^9}, {
   3.771691861212635*^9, 3.771691862651863*^9}, {3.771694375623562*^9, 
   3.771694390529674*^9}, {3.771713330936715*^9, 
   3.77171333185679*^9}},ExpressionUUID->"d54f38e5-c079-43b6-a6e9-\
599471a76047"]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparing the cities", "Subsection",
 CellChangeTimes->{{3.771713511711741*^9, 
  3.771713514949616*^9}},ExpressionUUID->"39f53ecd-769c-48bb-b96c-\
c03fe6430a5e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"citiesFeatures", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImportAllFeaturesClean", "[", "#", "]"}], " ", "&"}], ",", 
      " ", "citiesPopular"}], "]"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.7713559939252043`*^9}, {3.771358910281856*^9, 3.771358911513682*^9}, {
   3.7714488592558928`*^9, 3.771448865106896*^9}, 3.771690417560025*^9, {
   3.7716917617024937`*^9, 3.771691765072441*^9}, {3.771691812559931*^9, 
   3.771691826176497*^9}, {3.771691943131898*^9, 3.771691964958601*^9}, {
   3.771692100326106*^9, 3.771692166683044*^9}, 3.771694060071576*^9, 
   3.771694175211544*^9, {3.771694365496614*^9, 3.771694371469736*^9}, {
   3.771709660968775*^9, 3.771709665364229*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesFeaturesNamesMaps", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractMapFeaturesFromOSM", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}], ",", " ", 
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractMapFeaturesFromPixels", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesFeaturesNamesStats", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractCityStatsFeatures", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}], ",", " ", 
      RowBox[{"Keys", "[", 
       RowBox[{"ExtractCountryStatsFeatures", "[", 
        TemplateBox[{
         "\"Point\[Hyphen]a\[Hyphen]Pitre\"",RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"PointAPitre\"", ",", "\"PointeAPitre\"", ",", 
                  "\"Guadeloupe\""}], "}"}]}], "]"}],
          "\"Entity[\\\"City\\\", {\\\"PointAPitre\\\", \\\"PointeAPitre\\\", \
\\\"Guadeloupe\\\"}]\"","\"city\""},
         "Entity"], "]"}], "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesFeaturesValues", " ", "=", " ", 
   RowBox[{"NormalizeFeatures", "[", 
    RowBox[{"Values", "[", 
     RowBox[{
     "citiesFeatures", "\[LeftDoubleBracket]", "All", 
      "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{"Transform", " ", "units", " ", "into", " ", "raw", " ", 
    RowBox[{"numbers", "."}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"citiesFeaturesNames", " ", "=", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Keys", "[", 
     RowBox[{
     "citiesFeatures", "\[LeftDoubleBracket]", "All", 
      "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7717103678210917`*^9, 3.771710443037757*^9}, {
   3.771710501391046*^9, 3.771710502730191*^9}, 3.7717105485962353`*^9},
 CellLabel->
  "In[162]:=",ExpressionUUID->"b7ccaacb-4cae-4131-83bc-5988196d0d69"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesBlackBoxPredictor", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{"citiesFeaturesValues", "\[Rule]", "citiesPositivness"}], ",", 
     " ", 
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesBlackBoxPredictorOnlyStats", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"citiesFeaturesValues", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", 
        RowBox[{"1", ";;", 
         RowBox[{"Length", "[", "citiesFeaturesNamesStats", "]"}]}]}], 
       "\[RightDoubleBracket]"}], "\[Rule]", "citiesPositivness"}], ",", " ", 
     
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesBlackBoxPredictorOnlyMaps", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"citiesFeaturesValues", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", 
        RowBox[{
         RowBox[{"Length", "[", "citiesFeaturesNamesStats", "]"}], ";;", 
         RowBox[{"Length", "[", "citiesFeaturesNames", "]"}]}]}], 
       "\[RightDoubleBracket]"}], "\[Rule]", "citiesPositivness"}], ",", " ", 
     
     RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771709837759416*^9, 3.771709859563526*^9}, {
   3.771709939476246*^9, 3.771709960425024*^9}, {3.771710004765254*^9, 
   3.771710008009511*^9}, 3.771710860314969*^9},
 CellLabel->
  "In[165]:=",ExpressionUUID->"e777ef22-5b22-4321-919b-5b5a555a01a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Information", "[", "citiesBlackBoxPredictorOnlyStats", "]"}], ",",
    " ", 
   RowBox[{"Information", "[", "citiesBlackBoxPredictorOnlyMaps", "]"}], ",", 
   " ", 
   RowBox[{"Information", "[", "citiesBlackBoxPredictor", "]"}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.771709970895083*^9, 3.7717099754348392`*^9}, {
  3.771710803644577*^9, 3.771710816724926*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"f41349f5-ce2c-42a4-936d-e2e8197ee805"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0351838373879861041`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.012570744962448999`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0100423474630881061`3.", "\", \"", 
                    "0.0603253273128841055`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0100423474630881061`3.,
                     ", ", 0.0603253273128841055`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1645842756], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1645842756]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["10.0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][{
                    
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 113608694][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    113608694]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    113608694][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 96761492385744]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.94`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "139.`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.7100521787751641334`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1151312083226296717`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.9403145954204235046`3."}], "\", \"", 
                    RowBox[{"-", "1.4797897621299047621`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.9403145954204235046`3., ", ", -1.4797897621299047621`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"227.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.21`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.101053096436703}, {
                    4.382026634673881, -3.347168466940698}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.101053096436703}}, {{
                    4.382026634673881, -3.347168466940698}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3654003267063843`}, {
                    2.70805020110221, -2.892176371863673}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.7892262295751844`}, {
                    4.382026634673881, -3.041680251205649}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.3608415430798093`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.3608415430798093`, -3.101053096436703}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.7100521787751641`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5460220353071873}, {
                    2.70805020110221, -0.006823992069156737}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.8251833870977938`}, {
                    4.382026634673881, -1.5949209704525344`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.23236815754087894`}, {
                    4.382026634673881, -1.4772637965878193`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.507687448092427, 1.8536549265102482`}, {
                    4.382026634673881, -1.614099391963026}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5179536825105688}, {
                    4.382026634673881, -1.5970123041618192`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, -1.3976859272989224`}, {
                    4.382026634673881, -1.3976859272989224`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.22749084489715532`}, {
                    4.382026634673881, -1.473171528201526}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.2269976645737164}, {
                    4.382026634673881, -1.472744358803974}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.908866494572492}, {
                    4.382026634673881, -1.7100521787751641`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.506941423252892}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.43608124154645056`}, {
                    4.382026634673881, -1.7094155878320896`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.23236815754087894`}}, {{
                    4.382026634673881, -1.4772637965878193`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 5.025130663865953}}, {{
                    4.382026634673881, -1.614099391963026}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.5179536825105688}}, {{
                    4.382026634673881, -1.5970123041618192`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, -1.3976859272989224`}}, {{
                    4.382026634673881, -1.3976859272989224`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.22749084489715532`}}, {{
                    4.382026634673881, -1.473171528201526}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.2269976645737164}}, {{
                    4.382026634673881, -1.472744358803974}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.908866494572492}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.506941423252892}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.43608124154645056`}}, {{
                    4.382026634673881, -1.7094155878320896`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    100., "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 1.8536549265102482`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.101053096436703}, {
                    4.382026634673881, -3.347168466940698}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.101053096436703}}, {{
                    4.382026634673881, -3.347168466940698}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3654003267063843`}, {
                    2.70805020110221, -2.892176371863673}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.7892262295751844`}, {
                    4.382026634673881, -3.041680251205649}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.3608415430798093`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.3608415430798093`, -3.101053096436703}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.7100521787751641`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5460220353071873}, {
                    2.70805020110221, -0.006823992069156737}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.8251833870977938`}, {
                    4.382026634673881, -1.5949209704525344`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.23236815754087894`}, {
                    4.382026634673881, -1.4772637965878193`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.507687448092427, 1.8536549265102482`}, {
                    4.382026634673881, -1.614099391963026}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5179536825105688}, {
                    4.382026634673881, -1.5970123041618192`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, -1.3976859272989224`}, {
                    4.382026634673881, -1.3976859272989224`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.22749084489715532`}, {
                    4.382026634673881, -1.473171528201526}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.2269976645737164}, {
                    4.382026634673881, -1.472744358803974}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.908866494572492}, {
                    4.382026634673881, -1.7100521787751641`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.276423013688172}, {
                    4.382026634673881, -1.506941423252892}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.43608124154645056`}, {
                    4.382026634673881, -1.7094155878320896`}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.23236815754087894`}}, {{
                    4.382026634673881, -1.4772637965878193`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 5.025130663865953}}, {{
                    4.382026634673881, -1.614099391963026}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.5179536825105688}}, {{
                    4.382026634673881, -1.5970123041618192`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, -1.3976859272989224`}}, {{
                    4.382026634673881, -1.3976859272989224`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.22749084489715532`}}, {{
                    4.382026634673881, -1.473171528201526}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.2269976645737164}}, {{
                    4.382026634673881, -1.472744358803974}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.908866494572492}}, {{
                    4.382026634673881, -1.7100521787751641`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, -0.276423013688172}}, {{
                    4.382026634673881, -1.506941423252892}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.43608124154645056`}}, {{
                    4.382026634673881, -1.7094155878320896`}}}]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.1, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    1., "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96765787353040]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association["L1Regularization" -> 0, "L2Regularization" -> 
                    0.1, "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96770082320336]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96778672254928]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 0.01, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96782967222224]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96791557156816]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96795852124112]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 10., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96800147091408]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1000., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96804442058704]]}, Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]]}, 
                    Column[{
                    Style["LinearRegression", 
                    GrayLevel[0], 16], 
                    Dataset[
                    Association[
                    "L1Regularization" -> 0, "L2Regularization" -> 1., 
                    "OptimizationMethod" -> Automatic], 
                    
                    TypeSystem`Struct[{"L1Regularization", "L2Regularization",
                     "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], TypeSystem`AnyType}], 
                    Association["ID" -> 96808737026000]]}, 
                    Center]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.7100521787751641`, 1.8536549265102482`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "12", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0306796338398592112`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054466664575029168`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0197863009248533776`3.", "\", \"", 
                    "0.0415729667548650483`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0197863009248533776`3.,
                     ", ", 0.0415729667548650483`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[253449436], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[253449436]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["100000."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1448688175][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1448688175]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1448688175][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 100000., 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 248335183228880]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.47`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "332.`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.685693006562167362`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0308471783249350366`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.7473873632120373589`3."}], "\", \"", 
                    RowBox[{"-", "1.6239986499122973651`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.7473873632120373589`3., ", ", -1.6239986499122973651`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"211.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.46`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.095137947985557}, {
                    4.382026634673881, -3.484156237369843}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.095137947985557}}, {{
                    4.382026634673881, -3.484156237369843}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3694993139879386`}, {
                    2.70805020110221, -2.8800728329359875`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6796039099927365`}, {
                    4.382026634673881, -3.3207341388066762`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.5057683645578592`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.5057683645578592`, -3.095137947985557}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5524860657235198}, {
                    4.382026634673881, -1.6856930065621674`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.5524860657235198}}, {{
                    4.382026634673881, -1.6856930065621674`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.8032247750307868}, {
                    2.70805020110221, -0.30174735641625267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.7165401848871025`}, {
                    4.382026634673881, -1.6548458282372323`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.6856930065621674`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.697334282536671, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.095137947985557}, {
                    4.382026634673881, -3.484156237369843}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.095137947985557}}, {{
                    4.382026634673881, -3.484156237369843}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3694993139879386`}, {
                    2.70805020110221, -2.8800728329359875`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6796039099927365`}, {
                    4.382026634673881, -3.3207341388066762`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.5057683645578592`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.5057683645578592`, -3.095137947985557}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.5524860657235198}, {
                    4.382026634673881, -1.6856930065621674`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.5524860657235198}}, {{
                    4.382026634673881, -1.6856930065621674`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.8032247750307868}, {
                    2.70805020110221, -0.30174735641625267`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.7165401848871025`}, {
                    4.382026634673881, -1.6548458282372323`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.6856930065621674`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.697334282536671, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"], ",", 
   TagBox[
    StyleBox[
     FrameBox[GridBox[{
        {
         ItemBox[
          FrameBox[
           StyleBox["\<\"Predictor information\"\>", "SuggestionsBarText",
            StripOnInput->False,
            FontSize->12],
           FrameMargins->{{10, 5}, {-4, 2}},
           FrameStyle->None,
           StripOnInput->False],
          Alignment->{Left, Bottom},
          Background->RGBColor[0.96, 0.96, 0.96],
          Frame->{{False, False}, {True, False}},
          FrameStyle->Opacity[0.1],
          ItemSize->{Automatic, 1},
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Data type\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"\"NumericalVector\"",StyleBox[
                   
                   TemplateBox[{"\" (length: \"", "51", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Standard deviation\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  TemplateBox[{"0.0306812260112816378`3.",StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054457955914173845`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  
                  TemplateBox[{
                   "\"95% confidence interval: [\"", 
                    "0.0197896348284468671`3.", "\", \"", 
                    "0.0415728171941164085`3.", "\"]\""}, "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", 0.0197896348284468671`3.,
                     ", ", 0.0415728171941164085`3., "]"}], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox["\<\"LinearRegression\"\>",
                  TemplateBox[{
                    TagBox[
                    
                    DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[134.40000000000003`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1757969273], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1757969273]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1000000."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][{
                    
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["NormalEquation", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 577543458][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    577543458]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    577543458][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                    DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                   DisplayFunction -> (#& ), 
                   InterpretationFunction -> ("Dataset[<>]"& )]],
                 Annotation[#, 
                  Dataset[
                   Association[
                   "L1Regularization" -> 0, "L2Regularization" -> 1.*^6, 
                    "OptimizationMethod" -> "NormalEquation"], 
                   
                   TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], 
                   Association["ID" -> 109229782446033]], "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Single evaluation time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "1.87`",
                  RowBox[{
                   "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}],
                  "milliseconds per example",FractionBox[
                  "\"Milliseconds\"", "\"Examples\""]},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Batch evaluation speed\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                
                TemplateBox[{
                 "78.7`",
                  RowBox[{
                   "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}],
                  "examples per millisecond",FractionBox[
                  "\"Examples\"", "\"Milliseconds\""]},
                 "Quantity"]},
               {
                TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                   TagBox[
                    TooltipBox[
                    "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TagBox[
                 TooltipBox[
                  
                  TemplateBox[{
                   RowBox[{"-", "1.3532281355538868794`3."}],StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0177838811744763826`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                   "RowDefault"],
                  TemplateBox[{"\"95% confidence interval: [\"", 
                    RowBox[{"-", "1.3887958979028396378`3."}], "\", \"", 
                    RowBox[{"-", "1.3176603732049341211`3."}], "\"]\""}, 
                   "RowDefault"],
                  TooltipStyle->{}],
                 Annotation[#, 
                  
                  Row[{"95% confidence interval: [", \
-1.3887958979028396378`3., ", ", -1.3176603732049341211`3., "]"}], 
                  "Tooltip"]& ]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Model memory\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"230.`","\"kB\"","kilobytes","\"Kilobytes\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox[
                  "\"Training examples used\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"100","\"examples\"","examples","\"Examples\""},
                 "Quantity"]},
               {
                
                TemplateBox[{
                 TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                   GrayLevel[0.4], StripOnInput -> False]},
                 "RowDefault"], 
                TemplateBox[{"1.41`","\"s\"","seconds","\"Seconds\""},
                 "Quantity"]},
               {
                ItemBox[
                 
                 DynamicModuleBox[{
                  MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                  DynamicBox[ToBoxes[
                    Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.10121641587885}, {
                    4.382026634673881, -3.4841043420272206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.10121641587885}}, {{
                    4.382026634673881, -3.4841043420272206`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3644603677347567`}, {
                    2.70805020110221, -2.89302763919441}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6795063028715607`}, {
                    4.382026634673881, -3.3207141727949288`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.505375893479908}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.505375893479908, -3.10121641587885}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.280697433172254}, {
                    4.382026634673881, -1.3532281355538869`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.280697433172254}}, {{
                    4.382026634673881, -1.3532281355538869`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5503178007874564}, {
                    2.70805020110221, -0.011077065557051569`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.3710120167283633`}, {
                    4.382026634673881, -1.3354442543794105`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.3532281355538869`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.547923591886077, 35.30314682219158}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{"Standard deviation", 
                    Tooltip[
                    "Learning curve", 
                    
                    "mean cross entropy for best algorithm at each training \
size"], 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -3.10121641587885}, {
                    4.382026634673881, -3.4841043420272206`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -3.10121641587885}}, {{
                    4.382026634673881, -3.4841043420272206`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -3.3644603677347567`}, {
                    2.70805020110221, -2.89302763919441}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -3.6795063028715607`}, {
                    4.382026634673881, -3.3207141727949288`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, -3.505375893479908}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-3.505375893479908, -3.10121641587885}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, -0.280697433172254}, {
                    4.382026634673881, -1.3532281355538869`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.70805020110221, -0.280697433172254}}, {{
                    4.382026634673881, -1.3532281355538869`}}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}, {}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, -0.5503178007874564}, {
                    2.70805020110221, -0.011077065557051569`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, -1.3710120167283633`}, {
                    4.382026634673881, -1.3354442543794105`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {}, {}, {}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]]}, {
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.368417, 0.506779, 
                    0.709798]]}, {}, {}, {}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.3532281355538869`, 0}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.02]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    
                    Graphics[{{{}, {}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.669333466716784, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.669333466716784, 
                    Log[100]}, {-1.547923591886077, 35.30314682219158}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}]}]], Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                   ImageSizeCache->{330., {119., 123.}}],
                  DynamicModuleValues:>{}],
                 Alignment->Center,
                 StripOnInput->False], "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              ColumnsEqual->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              GridBoxDividers->{"Columns" -> {False, {
                   Opacity[0.15]}, False}},
              
              GridBoxItemSize->{
               "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], 
                  Offset[1.1199999999999999`], {
                   Offset[1.75]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[0.8]}, 
                  Offset[0.2]}}],
             "Grid"],
            FrameMargins->{{10, 10}, {10, 5}},
            FrameStyle->None,
            StripOnInput->False],
           Deploy,
           DefaultBaseStyle->"Deploy"],
          Alignment->Center,
          
          BaseStyle->{
           FontWeight -> "Light", FontSize -> 11, FontFamily -> ".SF NS Text",
             NumberMarks -> False, Deployed -> False},
          StripOnInput->False]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], 
           Offset[0.8], {
            Offset[0.4]}, 
           Offset[0.2]}}],
      Background->GrayLevel[1],
      FrameMargins->{{0, 0}, {0, 0}},
      FrameStyle->GrayLevel[0.85],
      RoundingRadius->5,
      StripOnInput->False],
     StripOnInput->False,
     LineBreakWithin->False],
    Deploy,
    DefaultBaseStyle->"Deploy"]}], "]"}]], "Output",
 CellChangeTimes->{3.771709976728957*^9, 3.771710819250382*^9, 
  3.7717117612541*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"045f74da-8973-4350-af6e-02af847fcf00"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"LinearModelFit", "[", "]"}]], "Code",
 CellChangeTimes->{{3.771711035486508*^9, 
  3.771711046638187*^9}},ExpressionUUID->"66d4097c-56dc-44d1-9170-\
50ecc5b463c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCovs", " ", "=", " ", 
   RowBox[{"Covariance", "[", "citiesFeaturesValues", "]"}]}], ";"}]], "Code",\

 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQfaXg6wN3yTeODZI9j0C0XnTfCxA98eoPMO1Uqf0f
RFfIiDJ6AOkn1p2aIHrS7Ylgeq+73hIQ/aVAfB2IDt2okuAFpN1m22aD6O8s
J697A2nRgg9g2s0g43A5kN6YrXwERO96bbjtLZAOK14Ipu/YZF8A0SfseK+D
6AR9Z/53QPpZO6cAiM4SUREF0Xe4X4qBaAVTOTkQzXTUDUxHMcbrgugtRgr6
IHrZFl5LEC126qU1iO79d9sJRG8PlnYBmxtzcc57IH1sMec8EB12NHoliG56
fh5MzzlvcRhEO/IFgGkAWOiTCA==
  "],
 CellLabel->
  "In[168]:=",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"Abs", "[", "matCovs", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.771691374454886*^9, 3.771691375723896*^9}, {
  3.77169441948938*^9, 3.771694436092937*^9}, {3.771694877613312*^9, 
  3.771694879872117*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
Fjo7r6vElOuvA0qrRKgZ8Hh2Yl43dByio4OacsXqmzh+E5dPt12fNPHhVxqF
Lip5Q6dFWPdYs3dsPBuXxp/o+36OwpL9UgdCVnNxZ9Sc4eLiKsg4P3BOzqRh
dGRuhct3ISROv3kxhnBfzNOdkltPMVA5c1HdmXCrw6qfp9d6i/D37Rir5G8U
Tr7XqK6R48N/SvmJqleNKL6gsFR5Co3V5xslZj/ng5/uUVK5sQVejocNV6VS
GL3H8/GhR1yUn7i/pnZTDQqP3HbW2EbmK9pdc1atAH4vDmvM0utE7Y+3sWdI
3vdb8e7WIw7h86BBi3v9LKiMudT+6j9+OJqmD5JjP90v9t6QycXSZ3ZHzmox
eCg8anWikcKNhC1jp0nyobN9V9W+tYQzU2c4Xt9Cw/BQy99Nm0jOWOyvlkb6
9+J2a+fzeoR7+k/Kbp3fBs69J9H/iK9dsFC7+4dwn3LSjQXTNgqgaJ0aWepP
421dt/PNaSSXLem5d4zbiZzEHIUikquDolNex01j4Jr7Xa9rnQi8hqlNe0Yw
0L4Z6/HTjPTZVW0t+jgXs8Oktq04S+N1+vhDJ/xJvno0J9+kqAstOl+KX0sS
vlr84n6CK4UP3Ijyug9cnOlaHt+wi8KV0ruc3484OKCqeHuo6guq5pfbvyc6
f6G9WdHGh4fV8vnXny2sB2vzUNIrUxrOg5mXTmwTYMrKB/UT+9pQYani5kZ0
195m3pTDW7hwfnfI8u6/KvQerMg7Qfx36Sq5yox5QlQ/7nvXK9WFZfZjz/dc
pXBifZp6FtEjRuqA3e7cary8KRVvN57GrJwMhdogPi72rotJ9GzGohOfVMNP
0Cg+IultbS8EP2bFhBVHu+A54XrRy1RSn3L8his1QlhfFGrFlLBgS418FTWK
gbLXi9g/NhSe0/vZX2K5SNv+Xnh9MeGw1JdzLi8nOnJVYl6iWxtkUqJX7Ein
sPagbcirfC5aAxvvbwiqwebi4vNus2jEb9jk9pniIyi19krH7FaEHlx89OJS
0kfH4mPy1gnwR99a6k96G15fCAjjTGfAmv9sz/BtCkG6BQ/nhPGA5K9clxsk
T8ZR9zXucmFhKMqbvLgGd/tcKyxLaKyLZWqMd4mwutP9pqc54ZabW54k6zJY
2pqp9FxEfEe07ZjyMj6ECzsvrTNisJzy7PkoScap7b52zhk+jpn7v8/cxWC7
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
818kKnu7DRisUZco7xqkUNnCSdT05GNTwb3rTQo0NuaNWbwwlQ/pJoWIyF/N
CK1+djjpNuEE5fpFS1hC6Cwr3J5OsyBrk7q0oJVGpUdXmhPJ/ZGdWpY7lDiY
mrT4keYIGh5Sc/20NvPRHvwmcWNjE0Luerd8ukgjdWrk368xQgQ8OsJeO4UF
iZR/U7dRpN89l6h5fBdhg6mda+9DDq60hfxUHUXqdfnUs+7EbyXtcp+nkVxV
M/vdL79FhNMSRsnvWyJAu8TQ1+1r2rDuzfUc93Iak84vfv8tQIS6W12PO7az
MTDyqHKFKtFB43z2l0ZSZ1muv0zqiQ/mjZFoIv279k/cnq27KUy38q7yZnOB
b5t0DxLOuat9bXxXIoOYqCztYZLrPsSOy6qKpTEt/fb2UTeFuOm2+3XdChYa
2rxZM2UZHDJq/bVkHwVsdzaY+J2LA4zqTIE5jUWyjZ7y+wXoNVyW1uLcjmfR
D4Zv+DPY7xkh49ZFY7rjq275F0JovI6xLYgifWWYwzU/LcRFiYXmZr+7MDXq
L7Na8r9zZ/QrrjMFdX+DqfveczEjp124pYjGqZ/mt3c6iaC5yLny63Q2XF3D
3UNSGHBl4p5kk9zWlSX61RJMfK+zJL+c6EJCzo2J/F7ij6wH8SyREJsHHVdp
BTJ4fZLreWsEg+wR9q4SsiSfXbo167AC0SWdYOPo4xQufC/yjJrOQ/8B20Xz
ljDo3DVCZYQMDUO7a+qTL/LxqXZZpWomjaOyK3xO9QgR3W/+xXBCN96PXsH5
S/Q30HbMxD7iM5E7a7aJRpA+UorVXfWU5PSxBiXXlUXwv33U4vnxbpzwKezV
msZgoPT+lgM3KDR6xCmo7udhaqGB4oW5NK5ULvwz+R8fe/WXfavY2wpen/nt
wxYMhj9f32G5gvgk+2Zy3QQBzqmPcL9gTfKy0yX1vtVEl3JGe5roCUDbLXys
VU9Bbsk3w/nXeWByF8uIeusxy/nY7LJqCnnqif5e0Ty4KXZ+rX1ZL1bfxPGb
uHwq7v2buPUFceun4vaHiNv/Jm5/r7jzC+LOZ4k7fyrufP3klS+q5cnnc2La
ZecpMlC/1r50vqkIbyT8Fu8l3NhxLV5tdagQbJcw2fVUF+TrzS7/INc9GnVm
5etICvufpL9rNOXhrXxtgikZl853cvtmvyT5+OSKIkmSq8ZNn1v1T53kzAz2
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
vpqYSPEqO+vxr8UsqqseFBj8E2LB45B7L1UYjChR91fw4OLSO+t3QX25mLDu
aE5cK1k/hvwMzc8SzBtq3i5axsPGsq93Vxqx+GhyZIl4iwhvwm9vGFX3DUqn
eIzqKime9jXf0CP90MW1yyxWVgRLqYoo5zbB1QW5xe8Jjp7cNtpzJqkH9Uv7
Nt7435wqDkY9JX36UXF0efurJoxK1WsqGE7+/ajpa4NOCrF8gfel+zsaMMHk
zNwjuxgYflPo6r3Fw5w8gXXVz1J4XTy5Jp7gxmvnspwaV/KQtzdYmnO4mOCI
ohzvFSyynFfVNe4VofG1XlyfdjNeR5ps83lF+P70N8kf//Lh8TPRp+N0FVjR
431XxpD6/qzI+u0NIaS79d89yGjACQNpbDf5uZvmR3svDeMhlhEY2w8rg7E4
58KRnSxGxbUfnFxP+NLX+0byRq1I2X53SeJpsn9vv2+bbiVG84/Aw+MPt6Ev
QC1sdguDwY1LPQKyBajLqTFIvV6L8PiDYXesWUySuWua/UiEo6UD70v3tmCV
lvyerJksRmzd7qDfI4T3oBlL6jc0wa8g6IHrLQaJK68eWeDFR2vvLr8rJyvB
de5KyCbrfrr1ho+BS7nwdL8d/HlFDkw/sMeOfpVg5y5eyud5HCie8t7w2yKV
Wt9o+I3GT2nnb7T7Bdr9KW0+hDb/RpvvpekXaPosmv6Upq+n+YfQ/JFo/m80
f0uaf+907f+qfUaxBD9N1nhzSYhtv42sdO424PzfbSPOkTo4aODVjgeyAkx6
/GFGQ3QVRv15sJB3iuB85Zm8/eP4WHjHJ9+KW45Z63suVyezKNit5dU3SYKN
43Mi/b05yNfqVprdRvr/7n9rVxUL4CaWk1dMrkXjIPHLymaCg2UULC7u5kBl
7MWumO3vkTnz4gbVdAa6XkEXVs4WoCrpypH2RdUw7O7eNN6cQaaTcmXuXB6i
jSYuyawoQunejdqL/kignKaixKni4J3qmswK/SyYn++WqTpC6uRqK18XLqnX
k05WzVpajlFfCi7/kJXisr/1/YB1pM41vhlWHcbHP50TY6xIv1gcXxXl1sSi
/XHaIO0EMcINOtvffJFg1tips/arcXCy8cDFqHUp2LHOMsmV4MJzB5u2niVf
75/QqvbVjof1K2/n/iT9T8VvS77XQRFefP73cI55My5oV79STSB9aGre/ch+
MY73xFz2XspBzjyvjuukH6UwG+ujUkn92Bx+dtBLAfJrE7b+m8JiTI1295kS
IQqCB/0pe9yIpXYnJqwbzCImm/duhr0QMj4HrvIk9eBoBs2VLCZ8qvVr1J5m
LhIfJEw7sLsAspZKsSG2DI7KDd1Y7EZ41qWoZWNiSvB4TGF90EnSdzJ2GKcv
EyNkh0pBpFEbOHs/XXcUEb7v6zRar0OAgNqu73tRB6He+19D1hCck2S5r9JX
hKnOcz3lw5sxOvv645DbpB+4pk/b4MvHnuUzix4GEz7V7vjJ14Xg3W/9Izo7
RHAWN30+6tUK2y6uyvtPDL4sTD9TsJL03aSRJ7aHVmPw3KwNX0oZeKdezI/1
FCDl0utUY9caiK4EvBs4T+qDUfFQ2b1iiJRSnsx50YZLuk+TUt+Rviy5M2yx
rgSDTww7ZvGa4PB1zncD7jM422Yl8I3lY9zr38OzNb8id5Fp0qk3EgyPfP3T
Pq4dWg0y6Wu7n1PrGw2/0fgp7fyNdr9Auz+lzYfQ5t9o8700/QJNn0XTn9L0
9TT/EJo/Es3/jeZvSfPvpfmTpxqZ/LI5I8VQS29bkTLhH5fSvC+vlcD46kvP
PTMZuLw0Y2eHcaGbENqmOzsPUmukycWwMF+W/vJonRhuvX9tDKvaMbspdJGz
HMH5jFqJFun/a2adzVa8y4e59/d13S8ZLJBvVzz8m4/O6afPNR2vgvZ61f1B
hGe+ttu6+cEjsp/mlgWMmiKG7QyPgLE6DIad4exa95qLoeK98zeMyUf8j/hz
3scJjxvU7b9NRwxmwuKiUMU2BEYfC5Enz+faQrbrrqwQOqKpY5Ov16HxoVuc
SjyLGWEfo1Z0i6FxQam0azIHx++H3XxhK8Wvr7crbc+y8HXt81BIE2GtZmJ6
sJYUdvfro8uqGFSoXrlwvp/wFA+leKNbLK503Uu4Ey1GtF/W1u8m7Rie4Hdv
YRCDA8q+d7Zv4uOQ7eHHtyUVeBmw+q57NYvJscNOJ0dKYFGjfM+3lIsD9bt/
6hH89vfL5jv7ciRo7Xgw4LyU4CP5gs26MVKs+hIYdiBaineXZ1UMekae+5lT
dqrhBFekP+uqDOJD7mLTpqTCShyU2z5eMp98njRe4mgtEQ7PdzwlHv0Nhzbv
QyJZZ3P8N63QtefhwiDPa9XGJVCOu7G60IDBXZO8g9YdXKw5+tjLk1+AzN1a
6ssJvk3W3GSR2EP6QvjJRrnz5chUvTnmLl+Cp+qPta6d5+ClmYv2xKMfsL4S
xlOcGSQUzTOQfcTDjVEXWtqOlcHzjVRlIVeC8UGK14eTvrUoYenEqyVpiHZP
du4k7zGm6e8HdbL+CsYVBl3QyUfgjb6dd+1Y/OeTmOr7QYSGL0/MRza34GzO
AtvPNQS3G2o0fr0vwEKdYA3HgRoYvx5Z/zCC9N3wDS2qflIMml5+8x+py516
t2RKVjLwHZYRuFWBB5WhiV+H/S2Ejk/dlYIeCU69EokSyjj48Shqws9hWdT6
RsNvNH5KO3+j3S/Q7k9p8yG0+TfafC9Nv0DTZ9H0pzR9Pc0/hOaPRPN/o/lb
0vx7af7ktPyFdLW3WScdpbjod3KOWhzBp5dV187WEKNzIPNE3FAGjtPV978f
yyX9Jr358bBspN1w6ncbILi622NnsJUQb890v9qVVo9cW4eizVwWFvtTvg39
H04vtVk5yJGH8x7RJ9JOMrAMH3zgxmDCqxuFPTUvyqGetUlG4w+D6smLLqsv
EiK4YWX6Zct6dIYfPtEnz8Cr9Nn7kbO4UOjX/zc+Mxu3PdxbXAsZjDRvjdnq
LMA2lyEe9pNr0GuoqXL3AIOk1OzruoU87Fnv37Eq/At21eaXX/FiCU9e+6dz
qRgmDrXu6XptMBqlOOki4QnrL2tP1yVf9y0K020ifGVayuKYmBFSZM/ZZdpH
eNKv2q3K8WV8BDtOkx9D6spfNLmbNfChcuawmkn/V8RxVp9XqmDQOm7frp8X
BDiS3fXj+v0adN0Jrv3vNovlR94sb4kVQ1uhXt3boh0ZE6J5F24y2G+06832
Y3z4Wr9ZdWRfJWxj58Unb5US/v9VLfMKi6PlWQNZBEeL5Sv8io4RHFV1/e8f
hgeTcKd68dZyyLnV6hY9ZeA+e0/UrnI+Tq50Pr2+9it0rA0DtxP8diNTNiGz
UAi1bXpcmbuN+CQVK3jJsbD7tTToqasQNYcud9mMb8DPqNEm5lYMxvq4vbDZ
wMMHhfXlbGExDnt9HWZFcPJWpbMBq3dx0NnblrBi6XukeG+smmlD+tOrGVo+
tjz4JJ/Z+N/IEhirHGl6JMOgLH/tNfefHGhUDzmbo/8JWxs3awjtCY5J8X7I
v8TDjL8n9t1/UIrf+/5VdIHgzJuXmW+uIsSHjvgVPa0ZJc9yng4n77GzsEk5
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
0fAbjZ/Szt9o9wu0+1PafAht/o0230vTL9D0WTT9KU1fT/MPofkj0fzfaP6W
NP9emj85LX+Bli9Dy8+i5QPS8k9p+c60/Prc+mn9TY4MVixZ8WNhJA9NKtF3
3mqWoaZbL6zbjAXz60zSlAsinKvz7+z62Iw2cczgrCwGYxv2zghcLkD6siFt
9y9UY2H20GN5DKkD7bL6HV0SyHHM6gaSeSgQdVmGlbB4+MS7boO3BPZDtzZE
e3LhuGab49A3DIKzi5XbhggQInJ2yYivQti084YVNlLcyheoZXqwkPUJnDPt
tghGiw+rPdRjcc3RbPvleSLE/vIbvW3ONyTYBhb+Xc3g/t6hi2M1eNDcZNkt
vlyEqtK2aYc+kOeg48ie1JfAcPmemv5SDsQWKxSXPCf9xen2nnn/xJjOyx4a
qsuBn3vjr1TCY++oWncpVAnxb/M7g/s5jTC4b9qa9kCKUf9klu++JUWhucWp
iZcYBJWe9fwRz6KrxV/Z45cYAWnVomXTOZja++jw8xIGMdvb9j49IsCi7wq3
YmxqYOcTt6mF8DWfxXK8TdsYpG9Zssb2Ix8KP2TnPuhlIBD67bZbJcSy7jeF
W6/UI17W2DVzrBSez/wnTyQ87Pz8lrb0kQLcs1qesVWBRf9Ds3n2MUIkPpc1
UZJpxKkPgyNtwxi8y6n4MeICH08Kw2LHPa9EzrYV7WFZEsSUuM60/NYO39Jd
XtcMX6Fo1zqOQy55Ljub/lSy7cjymR7iYZyMXw/Hr1ieL0GlekOZ0992bB3x
IH683GtozD+5chnpx97pT+Xvfm+HMGv+e6l3MrW+0fAbjZ/Szt9o9wu0+1Pa
fAht/o0230vTL9D0WTT9KU1fT/MPofkj0fzfaP6WNP9emj85LX+Bli9Dy8+i
5QPS8k9p+c60/Poi7ZK8iOVSnBs73327BvmclVf9DpSS/Zo5Is9xIdnvRxd4
fdETQfWm/AkD/W8od9yzvseNxa0hnwObZMTYvK/sh1dsK0xvjhhlZspit1VW
tIGnCMo4PTXtRDM8Hiad0LnDojJqP8crSQzl4N6amH3t0NsYcfP5e7K+s666
VC6QoH3XyD3J6RxEJeY7jRwvhd/trK+/T5F9r8tXPzpJgF9rA0+/+MQismSW
v6K1BOfG/3y9R54LHUfXioMWUsyJVtl8dyuLhccbe21tCY+3meI8cowUGWrM
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
   "], {{0, 0}, {51, 51}}, {
   0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{50.5, 
       FormBox["1", TraditionalForm]}, {41.5, 
       FormBox["10", TraditionalForm]}, {31.5, 
       FormBox["20", TraditionalForm]}, {21.5, 
       FormBox["30", TraditionalForm]}, {11.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["51", TraditionalForm]}}, {{50.5, 
       FormBox["1", TraditionalForm]}, {41.5, 
       FormBox["10", TraditionalForm]}, {31.5, 
       FormBox["20", TraditionalForm]}, {21.5, 
       FormBox["30", TraditionalForm]}, {11.5, 
       FormBox["40", TraditionalForm]}, {0.5, 
       FormBox["51", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {50.5, 
       FormBox["51", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}, {50.5, 
       FormBox["51", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.58984375, Automatic},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.771694421784465*^9, 3.771694436839675*^9}, 
   3.771694614094281*^9, 3.771694880734344*^9, 3.771703749525962*^9, 
   3.7717090247043657`*^9, 3.771709521020454*^9, 3.77170967253463*^9, 
   3.771710317592867*^9, 3.771711749314455*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"3b6acb39-0dfa-48fd-8287-316d2c4b4230"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", " ", "=", " ", 
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "citiesFeaturesValues", ",", " ", "citiesPositivness", ",", " ", 
     "citiesFeaturesNames"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.77135590634321*^9}, {3.771356050440531*^9, 3.7713560527164516`*^9}, {
   3.771356736256961*^9, 3.771356737540874*^9}, 3.771359010755967*^9, 
   3.771359171546298*^9, {3.771359211263359*^9, 3.771359234237255*^9}, {
   3.771359390294793*^9, 3.771359390770022*^9}, 3.771364051902135*^9, {
   3.771446959970146*^9, 3.771446960419052*^9}, {3.771447256988364*^9, 
   3.7714472578383904`*^9}, {3.7714486141367292`*^9, 3.771448616059444*^9}, 
   3.771448980094249*^9, {3.771494342712265*^9, 3.771494344069911*^9}, 
   3.771494429235093*^9, {3.771494529067401*^9, 3.771494544179295*^9}, 
   3.771495565394459*^9, 3.7714956915890503`*^9, 3.7716944908173656`*^9},
 CellLabel->
  "In[171]:=",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],

Cell[BoxData[
 TemplateBox[{
  "Inverse","luc",
   "\"Result for \\!\\(\\*RowBox[{\\\"Inverse\\\"}]\\) of badly conditioned \
matrix \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"16.4349033193492`\\\", \\\",\\\", \\\"24.10502001812643`\\\", \
\\\",\\\", \\\"21.08423764695406`\\\", \\\",\\\", \\\"15.09058272981636`\\\", \
\\\",\\\", \\\"23.512625137591847`\\\", \\\",\\\", \
\\\"17.74423788535924`\\\", \\\",\\\", \\\"23.92149102527723`\\\", \\\",\\\", \
\\\"19.66566536165658`\\\", \\\",\\\", \\\"18.02630709609349`\\\", \\\",\\\", \
\\\"16.64303643315974`\\\", \\\",\\\", \\\"16.306413443183853`\\\", \
\\\",\\\", \\\"16.172993295804122`\\\", \\\",\\\", \
\\\"16.923087686481832`\\\", \\\",\\\", \\\"16.374244854748653`\\\", \
\\\",\\\", \\\"19.67806699954506`\\\", \\\",\\\", \
\\\"20.982498804726056`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"20\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
\\\"15.392856320422936`\\\", \\\",\\\", \\\"15.383296540990738`\\\", \
\\\",\\\", \\\"15.240722233246084`\\\", \\\",\\\", \
\\\"15.48915023231023`\\\", \\\",\\\", \\\"18.195835312278344`\\\", \
\\\",\\\", \\\"19.743440366927206`\\\", \\\",\\\", \
\\\"17.908781545233275`\\\", \\\",\\\", \\\"19.89801717896629`\\\", \
\\\",\\\", \\\"20.48227821965922`\\\", \\\",\\\", \
\\\"18.424092716126232`\\\", \\\",\\\", \\\"20.6167607156658`\\\", \\\",\\\", \
\\\"19.97134795040547`\\\", \\\",\\\", \\\"24.259692167703456`\\\", \
\\\",\\\", \\\"24.428516831628844`\\\", \\\",\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"49\\\", \\\"\
\[RightSkeleton]\\\"}], \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"1\\\", \\\"\[RightSkeleton]\\\"}]}], \\\"}\\\"}]\\) may contain \
significant numerical errors.\"",2,171,5,18189172859146562179,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.77169114345396*^9, 3.771694491300901*^9, 
  3.771694645932941*^9, 3.771703749629182*^9, 3.771709024934712*^9, 
  3.7717095289809637`*^9, 3.771709674616291*^9, 3.7717117924719343`*^9},
 CellLabel->
  "During evaluation of \
In[171]:=",ExpressionUUID->"36bd4406-48dc-4fab-b348-62ab7c4cce71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"m", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", "citiesFeaturesNames"}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{
  3.7716944999393044`*^9, {3.7717095425263433`*^9, 3.771709543809411*^9}, {
   3.771709574086865*^9, 3.7717095878774652`*^9}, {3.771709626755397*^9, 
   3.771709631337878*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{0., -0.52}, {0., 51.5}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.34299999999999997`], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 0.5}, {0.44756038657940567`, 1.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 406.9529745373082}, {
            225.8107125531772, 235.76613324223865`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.44756038657940567`]& ,
         TagBoxNote->"0.44756038657940567"],
        StyleBox["0.44756038657940567`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.44756038657940567`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 1.5}, {1.1688525845218773`, 2.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 480.08120191081537`}, {
            216.35529186411577`, 226.3107125531772}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1688525845218773`]& ,
         TagBoxNote->"1.1688525845218773"],
        StyleBox["1.1688525845218773`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1688525845218773`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 2.5}, {-0.4370609846412836, 3.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{316.76561488109047`, 361.57705364627986`}, {
            206.89987117505433`, 216.85529186411577`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4370609846412836]& ,
         TagBoxNote->"-0.4370609846412836"],
        StyleBox[
         RowBox[{"-", "0.4370609846412836`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4370609846412836, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 3.5}, {-0.25396595009379386`, 4.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{335.3287094986991, 361.57705364627986`}, {
            197.4444504859929, 207.39987117505433`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.25396595009379386`]& ,
         TagBoxNote->"-0.25396595009379386"],
        StyleBox[
         RowBox[{"-", "0.25396595009379386`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.25396595009379386`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 4.5}, {-1.2535933595960032`, 5.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{233.98145979962794`, 361.57705364627986`}, {
            187.98902979693145`, 197.9444504859929}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.2535933595960032`]& ,
         TagBoxNote->"-1.2535933595960032"],
        StyleBox[
         RowBox[{"-", "1.2535933595960032`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.2535933595960032`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 5.5}, {-1.020901262382366, 6.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{257.5729538454491, 361.57705364627986`}, {
            178.53360910787, 188.48902979693145`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.020901262382366]& ,
         TagBoxNote->"-1.020901262382366"],
        StyleBox[
         RowBox[{"-", "1.020901262382366`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.020901262382366, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 6.5}, {-0.6574305651836507, 7.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{294.42343949353426`, 361.57705364627986`}, {
            169.07818841880857`, 179.03360910787}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6574305651836507]& ,
         TagBoxNote->"-0.6574305651836507"],
        StyleBox[
         RowBox[{"-", "0.6574305651836507`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6574305651836507, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 7.5}, {2.1593406042417316`, 8.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 580.5018543501828}, {
            159.62276772974712`, 169.57818841880857`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2.1593406042417316`]& ,
         TagBoxNote->"2.1593406042417316"],
        StyleBox["2.1593406042417316`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2.1593406042417316`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 8.5}, {-0.7854029835478511, 9.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{281.4489526844849, 361.57705364627986`}, {
            150.16734704068568`, 160.12276772974712`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.7854029835478511]& ,
         TagBoxNote->"-0.7854029835478511"],
        StyleBox[
         RowBox[{"-", "0.7854029835478511`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.7854029835478511, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 9.5}, {0.09812890596494128, 10.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 371.52585521073274`}, {
            140.71192635162424`, 150.66734704068568`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.09812890596494128]& ,
         TagBoxNote->"0.09812890596494128"],
        StyleBox["0.09812890596494128`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.09812890596494128, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 10.5}, {4.364531572161642, 11.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 804.0751953125002}, {
            131.2565056625628, 141.21192635162424`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 4.364531572161642]& ,
         TagBoxNote->"4.364531572161642"],
        StyleBox["4.364531572161642`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[4.364531572161642, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 11.5}, {-3.1419510016391756`, 12.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{42.53027343750006, 361.57705364627986`}, {
            121.80108497350139`, 131.7565056625628}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -3.1419510016391756`]& ,
         TagBoxNote->"-3.1419510016391756"],
        StyleBox[
         RowBox[{"-", "3.1419510016391756`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-3.1419510016391756`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 12.5}, {1.1077463202129634`, 13.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 473.8859417886696}, {
            112.34566428443995`, 122.30108497350139`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1077463202129634`]& ,
         TagBoxNote->"1.1077463202129634"],
        StyleBox["1.1077463202129634`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1077463202129634`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 13.5}, {1.1980736566832895`, 14.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 483.04378103646377`}, {
            102.89024359537851`, 112.84566428443995`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1980736566832895`]& ,
         TagBoxNote->"1.1980736566832895"],
        StyleBox["1.1980736566832895`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1980736566832895`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 14.5}, {-0.16525705065708785`, 15.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{344.32246346770904`, 361.57705364627986`}, {
            93.43482290631707, 103.39024359537851`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.16525705065708785`]& ,
         TagBoxNote->"-0.16525705065708785"],
        StyleBox[
         RowBox[{"-", "0.16525705065708785`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.16525705065708785`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 15.5}, {-0.27890394095391, 16.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{332.80037067698555`, 361.57705364627986`}, {
            83.97940221725563, 93.93482290631707}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.27890394095391]& ,
         TagBoxNote->"-0.27890394095391"],
        StyleBox[
         RowBox[{"-", "0.27890394095391`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.27890394095391, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 16.5}, {1.274882606758009, 17.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 490.83105834433843`}, {
            74.52398152819418, 84.47940221725563}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.274882606758009]& ,
         TagBoxNote->"1.274882606758009"],
        StyleBox["1.274882606758009`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.274882606758009, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 17.5}, {1.1719360988732115`, 18.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 480.39382408978395`}, {
            65.06856083913274, 75.02398152819418}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.1719360988732115`]& ,
         TagBoxNote->"1.1719360988732115"],
        StyleBox["1.1719360988732115`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.1719360988732115`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 18.5}, {1.2662580696605428`, 19.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 489.9566594368584}, {
            55.6131401500713, 65.56856083913274}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.2662580696605428`]& ,
         TagBoxNote->"1.2662580696605428"],
        StyleBox["1.2662580696605428`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.2662580696605428`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 19.5}, {-0.4846595884990781, 20.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{311.93982924871636`, 361.57705364627986`}, {
            46.15771946100986, 56.1131401500713}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4846595884990781]& ,
         TagBoxNote->"-0.4846595884990781"],
        StyleBox[
         RowBox[{"-", "0.4846595884990781`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4846595884990781, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 20.5}, {-1.0941072756887338`, 21.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{250.15096037117195`, 361.57705364627986`}, {
            36.70229877194842, 46.65771946100986}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.0941072756887338`]& ,
         TagBoxNote->"-1.0941072756887338"],
        StyleBox[
         RowBox[{"-", "1.0941072756887338`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.0941072756887338`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 21.5}, {2.3377131521976295`, 22.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 598.5861595476044}, {
            27.24687808288698, 37.20229877194842}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2.3377131521976295`]& ,
         TagBoxNote->"2.3377131521976295"],
        StyleBox["2.3377131521976295`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2.3377131521976295`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 22.5}, {-0.8360104411340663, 23.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{276.31811434224755`, 361.57705364627986`}, {
            17.79145739382554, 27.74687808288698}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8360104411340663]& ,
         TagBoxNote->"-0.8360104411340663"],
        StyleBox[
         RowBox[{"-", "0.8360104411340663`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8360104411340663, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 23.5}, {-2.9022062387793603`, 24.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{66.83680216473641, 361.57705364627986`}, {
            8.336036704764126, 18.29145739382554}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -2.9022062387793603`]& ,
         TagBoxNote->"-2.9022062387793603"],
        StyleBox[
         RowBox[{"-", "2.9022062387793603`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-2.9022062387793603`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 24.5}, {-0.6114946920802762, 25.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{299.08064912714246`, 
            361.57705364627986`}, {-1.1193839842973148`, 8.836036704764126}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6114946920802762]& ,
         TagBoxNote->"-0.6114946920802762"],
        StyleBox[
         RowBox[{"-", "0.6114946920802762`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6114946920802762, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 25.5}, {-1.615941981852187, 26.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{197.24473574741424`, 
            361.57705364627986`}, {-10.574804673358756`, \
-0.6193839842973148}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.615941981852187]& ,
         TagBoxNote->"-1.615941981852187"],
        StyleBox[
         RowBox[{"-", "1.615941981852187`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.615941981852187, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 26.5}, {-0.6355996092175009, 27.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{296.63677150548114`, 
            361.57705364627986`}, {-20.030225362420225`, \
-10.074804673358756`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6355996092175009]& ,
         TagBoxNote->"-0.6355996092175009"],
        StyleBox[
         RowBox[{"-", "0.6355996092175009`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6355996092175009, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 27.5}, {1.5429238125121358`, 28.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            518.0064226360511}, {-29.485646051481666`, -19.530225362420225`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.5429238125121358`]& ,
         TagBoxNote->"1.5429238125121358"],
        StyleBox["1.5429238125121358`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.5429238125121358`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 28.5}, {1.0583684241609124`, 29.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            468.8797625730616}, {-38.94106674054311, -28.985646051481666`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.0583684241609124`]& ,
         TagBoxNote->"1.0583684241609124"],
        StyleBox["1.0583684241609124`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.0583684241609124`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 29.5}, {0.16922773129032898`, 30.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            378.7342113793086}, {-48.39648742960455, -38.44106674054311}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.16922773129032898`]& ,
         TagBoxNote->"0.16922773129032898"],
        StyleBox["0.16922773129032898`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.16922773129032898`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 30.5}, {0.5670258470029284, 31.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            419.06498320460406`}, {-57.85190811866599, -47.89648742960455}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.5670258470029284]& ,
         TagBoxNote->"0.5670258470029284"],
        StyleBox["0.5670258470029284`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.5670258470029284, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 31.5}, {0.5812396391888629, 32.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            420.5060488778192}, {-67.30732880772737, -57.35190811866599}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.5812396391888629]& ,
         TagBoxNote->"0.5812396391888629"],
        StyleBox["0.5812396391888629`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.5812396391888629, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 32.5}, {0.6923674264484605, 33.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            431.77274234465017`}, {-76.76274949678881, -66.80732880772737}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6923674264484605]& ,
         TagBoxNote->"0.6923674264484605"],
        StyleBox["0.6923674264484605`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6923674264484605, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 33.5}, {1.7493810294372025`, 34.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            538.9380926932973}, {-86.21817018585025, -76.26274949678881}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.7493810294372025`]& ,
         TagBoxNote->"1.7493810294372025"],
        StyleBox["1.7493810294372025`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.7493810294372025`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 34.5}, {0.40630506508279995`, 35.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            402.77030274441086`}, {-95.6735908749117, -85.71817018585025}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.40630506508279995`]& ,
         TagBoxNote->"0.40630506508279995"],
        StyleBox["0.40630506508279995`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.40630506508279995`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 35.5}, {-0.8891177825871548, 36.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{270.9338252121803, 
            361.57705364627986`}, {-105.12901156397314`, -95.1735908749117}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8891177825871548]& ,
         TagBoxNote->"-0.8891177825871548"],
        StyleBox[
         RowBox[{"-", "0.8891177825871548`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8891177825871548, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 36.5}, {-0.7772241574640222, 37.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{282.27816316979545`, 
            361.57705364627986`}, {-114.58443225303458`, \
-104.62901156397314`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.7772241574640222]& ,
         TagBoxNote->"-0.7772241574640222"],
        StyleBox[
         RowBox[{"-", "0.7772241574640222`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.7772241574640222, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 37.5}, {3.384045487657632, 38.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            704.6685893229984}, {-124.03985294209602`, -114.08443225303458`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 3.384045487657632]& ,
         TagBoxNote->"3.384045487657632"],
        StyleBox["3.384045487657632`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[3.384045487657632, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 38.5}, {-0.37311499057306996`, 39.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{323.24878107529656`, 
            361.57705364627986`}, {-133.49527363115746`, \
-123.53985294209602`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.37311499057306996`]& ,
         TagBoxNote->"-0.37311499057306996"],
        StyleBox[
         RowBox[{"-", "0.37311499057306996`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.37311499057306996`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 39.5}, {0.2821140946385512, 40.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{361.07705364627986`, 
            390.17919812649023`}, {-142.9506943202189, -132.99527363115746`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.2821140946385512]& ,
         TagBoxNote->"0.2821140946385512"],
        StyleBox["0.2821140946385512`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.2821140946385512, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 40.5}, {-0.4867959234138448, 41.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{311.72323688041035`, 
            361.57705364627986`}, {-152.40611500928034`, -142.4506943202189}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.4867959234138448]& ,
         TagBoxNote->"-0.4867959234138448"],
        StyleBox[
         RowBox[{"-", "0.4867959234138448`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.4867959234138448, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 41.5}, {-0.3106440357634672, 42.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{329.5824003776935, 
            361.57705364627986`}, {-161.86153569834178`, \
-151.90611500928034`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.3106440357634672]& ,
         TagBoxNote->"-0.3106440357634672"],
        StyleBox[
         RowBox[{"-", "0.3106440357634672`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.3106440357634672, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 42.5}, {-1.634416161568808, 43.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{195.37173057876018`, 
            361.57705364627986`}, {-171.31695638740322`, \
-161.36153569834178`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.634416161568808]& ,
         TagBoxNote->"-1.634416161568808"],
        StyleBox[
         RowBox[{"-", "1.634416161568808`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.634416161568808, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 43.5}, {-0.8632702323214962, 44.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{273.5543797367781, 
            361.57705364627986`}, {-180.77237707646466`, \
-170.81695638740322`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.8632702323214962]& ,
         TagBoxNote->"-0.8632702323214962"],
        StyleBox[
         RowBox[{"-", "0.8632702323214962`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.8632702323214962, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 44.5}, {-0.2399579213771762, 45.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{336.7489138374754, 
            361.57705364627986`}, {-190.2277977655261, -180.27237707646466`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.2399579213771762]& ,
         TagBoxNote->"-0.2399579213771762"],
        StyleBox[
         RowBox[{"-", "0.2399579213771762`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.2399579213771762, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 45.5}, {-1.4526432018123963`, 46.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{213.80078661089328`, 
            361.57705364627986`}, {-199.68321845458755`, -189.7277977655261}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4526432018123963`]& ,
         TagBoxNote->"-1.4526432018123963"],
        StyleBox[
         RowBox[{"-", "1.4526432018123963`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4526432018123963`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 46.5}, {-1.4468675640026838`, 47.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{214.3863497934433, 
            361.57705364627986`}, {-209.138639143649, -199.18321845458755`}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4468675640026838`]& ,
         TagBoxNote->"-1.4468675640026838"],
        StyleBox[
         RowBox[{"-", "1.4468675640026838`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4468675640026838`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 47.5}, {-0.023975705747365517`, 48.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{358.6462761245833, 
            361.57705364627986`}, {-218.59405983271043`, -208.638639143649}}],
          
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.023975705747365517`]& ,
         TagBoxNote->"-0.023975705747365517"],
        StyleBox[
         RowBox[{"-", "0.023975705747365517`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.023975705747365517`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 48.5}, {-1.4777514861492005`, 49.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{211.25518258082317`, 
            361.57705364627986`}, {-228.04948052177187`, \
-218.09405983271043`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.4777514861492005`]& ,
         TagBoxNote->"-1.4777514861492005"],
        StyleBox[
         RowBox[{"-", "1.4777514861492005`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.4777514861492005`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 49.5}, {1.6930564563826511`, 50.5}, 
             "RoundingRadius" -> 0]},
           ImageSizeCache->{{361.07705364627986`, 
            533.2276244575415}, {-237.5049012108333, -227.54948052177187`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.6930564563826511`]& ,
         TagBoxNote->"1.6930564563826511"],
        StyleBox["1.6930564563826511`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.6930564563826511`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.34299999999999997`], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 50.5}, {-0.1296708074587647, 51.5}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{347.93037561676493`, 
            361.57705364627986`}, {-246.96032189989475`, -237.0049012108333}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.1296708074587647]& ,
         TagBoxNote->"-0.1296708074587647"],
        StyleBox[
         RowBox[{"-", "0.1296708074587647`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.1296708074587647, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], LineBox[{{0., -0.52}, {0., 52.5404}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], LineBox[{{0., 0.5}, Offset[{-6., 0.}, {0., 0.5}]}], 
         LineBox[{{0., 51.5}, 
           Offset[{-6., 0.}, {0., 
            51.5}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
           LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
           LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
           LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
           LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
           LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
           LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
           LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
           LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
           LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
           LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
           LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
           LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
           LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
           LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
           LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
           LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
           LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
           LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
           LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
           LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
           LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
           LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
           LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
           LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
           LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
           LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
           LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
           LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
           LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
           LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
           LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
           LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
           LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
           LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
           LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
           LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
           LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
           LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
           LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
           LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
           LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
           LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
           LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
           LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
           LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
           LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
           LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
           LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
           LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
           LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
           LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
           LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
           LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
           LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
           LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
           LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
           LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
           LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
           LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
           LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
           LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
           LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
           LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
           LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
           LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
           LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
           LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
           LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
           LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
           LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
           LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
           LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
           LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
           LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
           LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
           LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
           LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
           LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
           LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
           LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
           LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
           LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
           LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
           LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
           LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
           LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
           LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
           LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
           LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
           LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
           LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
           LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
           LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
           LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
           LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
           LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
           LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
           LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
           LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
           LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], 
          InsetBox["\<\"Population\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Latitude\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Longitude\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Elevation\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"MagneticFieldStrength\"\>", 
           Offset[{-2, 0}, {0., 5.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPopulation\"\>", Offset[{-2, 0}, {0., 6.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLatitude\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLongitude\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryArea\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterArea\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryBoundaryLength\"\>", 
           Offset[{-2, 0}, {0., 11.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryCoastlineLength\"\>", 
           Offset[{-2, 0}, {0., 12.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterwayLength\"\>", 
           Offset[{-2, 0}, {0., 13.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryContributingFamilyWorkers\"\>", 
           Offset[{-2, 0}, {0., 14.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGDPPerPersonEmployed\"\>", 
           Offset[{-2, 0}, {0., 15.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGiniIndex\"\>", Offset[{-2, 0}, {0., 16.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryInterestRateSpread\"\>", 
           Offset[{-2, 0}, {0., 17.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPovertyHeadcount\"\>", 
           Offset[{-2, 0}, {0., 18.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryUnemploymentRate\"\>", 
           Offset[{-2, 0}, {0., 19.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryBookTitles\"\>", Offset[{-2, 0}, {0., 20.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryIlliteracyFraction\"\>", 
           Offset[{-2, 0}, {0., 21.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryMaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 22.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryMaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 23.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryFemaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 24.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryFemaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 25.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryHospitalBedsPer10000Population\"\>", 
           Offset[{-2, 0}, {0., 26.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryArmy\"\>", Offset[{-2, 0}, {0., 27.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"CountryHIVAIDSPopulation\"\>", 
           Offset[{-2, 0}, {0., 28.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryElectricityTotal\"\>", 
           Offset[{-2, 0}, {0., 29.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryChildPopulation\"\>", 
           Offset[{-2, 0}, {0., 30.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryElderlyPopulation\"\>", 
           Offset[{-2, 0}, {0., 31.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryAnnualMarriages\"\>", 
           Offset[{-2, 0}, {0., 32.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryAnnualDivorces\"\>", 
           Offset[{-2, 0}, {0., 33.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryNetIncomeFromAbroad\"\>", 
           Offset[{-2, 0}, {0., 34.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGovernmentDebt\"\>", 
           Offset[{-2, 0}, {0., 35.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGovernmentSurplus\"\>", 
           Offset[{-2, 0}, {0., 36.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryImportsValue\"\>", 
           Offset[{-2, 0}, {0., 37.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryExportsValue\"\>", 
           Offset[{-2, 0}, {0., 38.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryLeisureArrivals\"\>", 
           Offset[{-2, 0}, {0., 39.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryNewspaperTitles\"\>", 
           Offset[{-2, 0}, {0., 40.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"Street\"\>", Offset[{-2, 0}, {0., 41.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Highway\"\>", Offset[{-2, 0}, {0., 42.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Water\"\>", Offset[{-2, 0}, {0., 43.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Park\"\>", Offset[{-2, 0}, {0., 44.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Train\"\>", Offset[{-2, 0}, {0., 45.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Interesting\"\>", Offset[{-2, 0}, {0., 46.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Building\"\>", Offset[{-2, 0}, {0., 47.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Annotations\"\>", Offset[{-2, 0}, {0., 48.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"MeanNeighborDegree\"\>", Offset[{-2, 0}, {0., 49.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"DegreeCentrality\"\>", Offset[{-2, 0}, {0., 50.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"ClosenessCentrality\"\>", 
           Offset[{-2, 0}, {0., 51.}], {1, 0}, Automatic, {1, 0}]}, 
         "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -0.52},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{847.60546875, Automatic},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.771694500664877*^9, 3.77169465172803*^9, 3.771703750504766*^9, 
   3.77170902625204*^9, {3.771709533678793*^9, 3.771709544454525*^9}, 
   3.771709632180335*^9, 3.7717096772392263`*^9, 3.771711794587517*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"0eeb186b-9d30-42aa-86f2-92362c5e6be2"]
}, Open  ]],

Cell["Lets compare the land use across region", "Text",
 CellChangeTimes->{{3.7716230389171543`*^9, 
  3.7716230649283113`*^9}},ExpressionUUID->"13ca92df-031f-49fc-8d35-\
f0d7e45c8ee7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", " ", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.7716230389171543`*^9, 3.771623065802146*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],

Cell[BoxData[
 TemplateBox[{
  "$IterationLimit","itlim",
   "\"Iteration limit of \\!\\(\\*RowBox[{\\\"4096\\\"}]\\) exceeded.\"",2,81,
   10,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709026833088*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],

Cell[BoxData[
 TemplateBox[{
  "Import","chtype",
   "\"First argument \\!\\(\\*RowBox[{\\\"Hold\\\", \\\"[\\\", \
RowBox[{\\\"CityDataPath\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"/Users/ashvardanian/CodeMine/WolframSummer19/Data/\
Features\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"CityName\\\", \\\"[\\\", \
RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\
\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \
\\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \
\\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\"]\\\"}]}], \\\"]\\\"}], \\\"]\\\"}]\\) \
is not a valid file, directory, or URL specification.\"",2,81,11,
   18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027006002*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,12,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027041771*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],

Cell[BoxData[
 TemplateBox[{
  "Lookup","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"$Failed\\\"}]\\) is not a valid \
Association or a list of rules.\"",2,81,13,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027103318*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,14,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.77170902715431*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,15,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027267667*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,16,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.7717090273824177`*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,17,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027626474*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"BarChart\\\", \
\\\"::\\\", \\\"ldata\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,81,18,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027778895*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Output",
 CellChangeTimes->{3.771671001693563*^9, 3.771703751554764*^9, 
  3.771709027824383*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Non-linear approach?", "Section",
 CellChangeTimes->{{3.771713042559826*^9, 3.771713056087331*^9}, {
  3.771713531989307*^9, 
  3.7717135359131517`*^9}},ExpressionUUID->"50d2f7c6-3d90-4674-8c7d-\
134ca91d9f53"],

Cell[CellGroupData[{

Cell["MLP", "Subsection",
 CellChangeTimes->{{3.771713548867407*^9, 
  3.7717135491509933`*^9}},ExpressionUUID->"c3071551-c538-4e23-a9ff-\
aeaae2cb1355"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildDataset", "[", 
    RowBox[{"city_", ",", " ", "rating_Real", ",", " ", "imgs_"}], "]"}], " ",
    ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ratings", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"ratings", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"rating", ",", " ", 
         RowBox[{"Length", "[", "imgs", "]"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "Same", " ", "for", " ", "all", " ", "images", " ", "within", " ", 
        "city"}], "*)"}], "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"imgs", ",", " ", "ratings"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695092612587*^9}, {
  3.771695420377442*^9, 3.7716954240693274`*^9}, {3.771695525490217*^9, 
  3.7716955427053223`*^9}, {3.77169557475178*^9, 3.771695608141577*^9}, {
  3.7717013125325403`*^9, 3.771701315713105*^9}, {3.7717013958100977`*^9, 
  3.771701472688505*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetMaps", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportMaps", "[", "#1", "]"}]}], "]"}], " ", "&"}], ",", 
       " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetSatellites", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportSatellites", "[", "#1", "]"}]}], "]"}], " ", "&"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695131022481*^9}, {
   3.771695179577177*^9, 3.771695215558429*^9}, {3.7716953433989143`*^9, 
   3.7716953529173613`*^9}, {3.771695495691889*^9, 3.771695521620345*^9}, {
   3.771695563051428*^9, 3.771695563864685*^9}, 3.7716969865035973`*^9, {
   3.771701456371614*^9, 3.771701489783415*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9, {3.77170385339028*^9, 3.771703857527769*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelMapsANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Panel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9},ExpressionUUID->"fa821b18-598d-4969-a5ce-\
d0cc2bc295df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 3.771702025299842*^9, 
   3.771702128773827*^9, {3.771702475598556*^9, 3.771702475949767*^9}, {
   3.771703862173395*^9, 3.7717038631782417`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"modelSatellitesANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Pwanel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 
   3.771702025299842*^9},ExpressionUUID->"b52d97d1-1f12-4f4e-927c-\
7e474525430d"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{{3.771701055607881*^9, 3.771701069093855*^9}, 
   3.7717017566127987`*^9},
 CellLabel->
  "Out[656]=",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "model", "]"}]], "Code",
 CellChangeTimes->{3.771696127001232*^9},
 CellLabel->"In[89]:=",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`model\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "Global`model", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`model"], True]]], "Output",
 CellChangeTimes->{3.7716961291480513`*^9, 3.771703764701326*^9, 
  3.7717090480979567`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CNN", "Subsection",
 CellChangeTimes->{{3.7717135654198103`*^9, 
  3.7717135656393414`*^9}},ExpressionUUID->"d0f91c15-f044-48eb-9e34-\
777ac2da01e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cnnFull", " ", "=", " ", 
   RowBox[{
   "NetModel", "[", "\"\<ResNet-101 Trained on YFCC100m Geotagged Data\>\"", 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771697076399399*^9, 3.771697086936078*^9}, {
  3.771701157745332*^9, 3.771701163246292*^9}, {3.771701236513834*^9, 
  3.7717012371068773`*^9}, {3.771701284764735*^9, 3.77170128529869*^9}, {
  3.77170207100424*^9, 3.771702074100959*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetFlatten", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NetTake", "[", 
        RowBox[{"cnnFull", ",", " ", "\"\<pool1\>\""}], "]"}], ",", " ", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", " ", "LogisticSigmoid"}], "}"}], 
     "]"}], ",", " ", "1"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771701679489496*^9, 3.771701725723916*^9}, {
   3.771701952576314*^9, 3.771701958218424*^9}, 3.771702088913781*^9, {
   3.7717023018480253`*^9, 3.771702412505938*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["43", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{3}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 3,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 3, 7, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{3, 3}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 1,
                     1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Outputs", "Output"]}], 
                    "7" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Outputs", "Output"]}], 
                    "8" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Outputs", "Output"]}], 
                    "9" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Outputs", "Output"]}], 
                    "10" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Outputs", "Output"]}], 
                    "11" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Outputs", "Output"]}], 
                    "12" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Outputs", "Output"]}], 
                    "13" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Outputs", "Output"]}], 
                    "14" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Outputs", "Output"]}], 
                    "15" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Outputs", "Output"]}], 
                    "16" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Outputs", "Output"]}], 
                    "17" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Outputs", "Output"]}], 
                    "18" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit6" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Outputs", "Output"]}], 
                    "19" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit7" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Outputs", "Output"]}], 
                    "20" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit8" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Outputs", "Output"]}], 
                    "21" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit9" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Outputs", "Output"]}], 
                    "22" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit10" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Outputs", "Output"]}], 
                    "23" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit11" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Outputs", "Output"]}], 
                    "24" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit12" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Outputs", "Output"]}], 
                    "25" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit13" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Outputs", "Output"]}], 
                    "26" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit14" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Outputs", "Output"]}], 
                    "27" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit15" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Outputs", "Output"]}], 
                    "28" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit16" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Outputs", "Output"]}], 
                    "29" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit17" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Outputs", "Output"]}], 
                    "30" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit18" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Outputs", "Output"]}], 
                    "31" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit19" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Outputs", "Output"]}], 
                    "32" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit20" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Outputs", "Output"]}], 
                    "33" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit21" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Outputs", "Output"]}], 
                    "34" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit22" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Outputs", "Output"]}], 
                    "35" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit23" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Outputs", "Output"]}], 
                    "36" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Outputs", "Output"]}], 
                    "37" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Outputs", "Output"]}], 
                    "38" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Outputs", "Output"]}], 
                    "39" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "40" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "41" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "42" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 2048}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], "43" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "43", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10", "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"25\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"26\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"27\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"28\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"29\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"30\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"31\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"32\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"33\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"34\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"35\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"36\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"37\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"38\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"39\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"40\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"41\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"42\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"43\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771703769226363*^9, 3.771709054798896*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703899626437*^9, 
   3.771703916305149*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"modelGeoCNN", ",", " ", 
    RowBox[{"Association", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"Keys", "[", "datasetTrain", "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"Values", "[", "datasetTrain", "]"}]}]}], "}"}], "]"}], ",", 
    " ", "All"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703646880005*^9, 
   3.771703704613678*^9}, {3.771703777811902*^9, 3.771703807402351*^9}, 
   3.7717038433808413`*^9, {3.771703926567396*^9, 3.7717039384147387`*^9}, {
   3.7717041901368637`*^9, 3.771704193396693*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{1406, 832},
WindowMargins->{{Automatic, 131}, {Automatic, 50}},
TaggingRules->{"Salvaged" -> True},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 184, 3, 98, "Title",ExpressionUUID->"112c77e2-f45b-4372-906b-a938d28da3f8"],
Cell[CellGroupData[{
Cell[789, 29, 182, 3, 62, "Section",ExpressionUUID->"2f1f3b8e-3200-48b9-b773-a77a1c396b17"],
Cell[974, 34, 538, 8, 81, "Text",ExpressionUUID->"c6307c66-135d-4af1-918e-b52e229fb589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1549, 47, 254, 4, 56, "Chapter",ExpressionUUID->"ac13fabb-576a-4a4b-8847-2bb61f653aef"],
Cell[1806, 53, 472, 8, 58, "Text",ExpressionUUID->"d7112578-2f96-4683-9976-1d246abd738b"],
Cell[CellGroupData[{
Cell[2303, 65, 216, 4, 67, "Section",ExpressionUUID->"627737e6-2c67-4101-ba9d-4750ebb8b851"],
Cell[CellGroupData[{
Cell[2544, 73, 165, 3, 54, "Subsection",ExpressionUUID->"15f0bbef-4baf-4ee2-8702-3e0092151fcb"],
Cell[2712, 78, 9922, 247, 623, "Code",ExpressionUUID->"701bc516-4588-4409-bd02-62356ee10634"]
}, Closed]],
Cell[CellGroupData[{
Cell[12671, 330, 167, 3, 38, "Subsection",ExpressionUUID->"c7b8b850-ca31-4d36-a026-92bed76431d7"],
Cell[12841, 335, 4815, 113, 376, "Code",ExpressionUUID->"acdb5163-89af-4011-8610-a985ea22ddfc"]
}, Closed]],
Cell[CellGroupData[{
Cell[17693, 453, 157, 3, 38, "Subsection",ExpressionUUID->"04bf9ceb-4ddc-4f18-bf62-54860b3d9d2c"],
Cell[17853, 458, 4903, 114, 300, "Code",ExpressionUUID->"ec5fa737-edff-4f2b-bcf0-57aa61e8bf78"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22805, 578, 209, 4, 67, "Section",ExpressionUUID->"63985375-fa23-4d09-a7dc-b6747739c560"],
Cell[CellGroupData[{
Cell[23039, 586, 131, 3, 54, "Subsection",ExpressionUUID->"fa1920ae-8e54-45ec-83bd-bd9f5d5988ff"],
Cell[23173, 591, 1895, 39, 91, "Code",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"]
}, Closed]],
Cell[CellGroupData[{
Cell[25105, 635, 175, 3, 38, "Subsection",ExpressionUUID->"ee1bdf2d-8e5c-4019-8ee5-eb9655578edf"],
Cell[25283, 640, 5819, 133, 395, "Code",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"]
}, Closed]],
Cell[CellGroupData[{
Cell[31139, 778, 183, 3, 38, "Subsection",ExpressionUUID->"9f81765d-48a1-412b-8f34-7c63eeb70cd0"],
Cell[31325, 783, 4116, 90, 395, "Code",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"]
}, Closed]],
Cell[CellGroupData[{
Cell[35478, 878, 166, 3, 38, "Subsection",ExpressionUUID->"1b2b8bb4-d2fd-410a-8140-48381fbfbec1"],
Cell[35647, 883, 15383, 321, 1155, "Code",ExpressionUUID->"ce916f56-0286-4291-9303-f08a2c807b22"]
}, Closed]],
Cell[CellGroupData[{
Cell[51067, 1209, 197, 3, 38, "Subsection",ExpressionUUID->"fcac805f-54fc-4ed9-8bb5-df26b8e9ddb1"],
Cell[51267, 1214, 6745, 125, 357, "Code",ExpressionUUID->"035f3fac-5785-4fb6-8252-b10aea312ea8"]
}, Closed]],
Cell[CellGroupData[{
Cell[58049, 1344, 185, 3, 38, "Subsection",ExpressionUUID->"3b7d840d-c9fe-49f1-92fe-dd9a50ebd8f8"],
Cell[58237, 1349, 2349, 55, 167, "Code",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],
Cell[60589, 1406, 834, 18, 91, "Code",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[61472, 1430, 231, 4, 67, "Section",ExpressionUUID->"1720891f-8e04-46f0-8ae9-4c3257b2a22a"],
Cell[CellGroupData[{
Cell[61728, 1438, 217, 4, 54, "Subsection",ExpressionUUID->"cd86ce5d-5f3d-4938-a2ae-9d0f8a94ab58"],
Cell[61948, 1444, 6094, 125, 395, "Code",ExpressionUUID->"20961709-7c7a-45d4-a981-9ac2574c6877"]
}, Closed]],
Cell[CellGroupData[{
Cell[68079, 1574, 168, 3, 38, "Subsection",ExpressionUUID->"7fff9ec0-f5cd-48b7-95b6-dc9d704181e7"],
Cell[68250, 1579, 263, 6, 35, "Text",ExpressionUUID->"13349771-2cbd-4640-86e0-2a496adaad4a"],
Cell[68516, 1587, 2520, 44, 91, "Code",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],
Cell[CellGroupData[{
Cell[71061, 1635, 2593, 45, 91, "Code",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],
Cell[73657, 1682, 65981, 1256, 796, "Output",ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],
Cell[139653, 2941, 498, 9, 58, "Text",ExpressionUUID->"04da58f6-384a-4c46-83b1-c68f03702b2d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140200, 2956, 216, 4, 67, "Section",ExpressionUUID->"d1be2ff7-0399-4fec-9761-8befa64c33fd"],
Cell[CellGroupData[{
Cell[140441, 2964, 362, 6, 54, "Subsection",ExpressionUUID->"1e314e11-051b-4643-8db0-01d456f6b7b3"],
Cell[140806, 2972, 8032, 161, 490, "Code",ExpressionUUID->"d54f38e5-c079-43b6-a6e9-599471a76047"]
}, Closed]],
Cell[CellGroupData[{
Cell[148875, 3138, 168, 3, 38, "Subsection",ExpressionUUID->"39f53ecd-769c-48bb-b96c-c03fe6430a5e"],
Cell[149046, 3143, 1152, 21, 52, "Code",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],
Cell[150201, 3166, 3429, 82, 130, "Code",ExpressionUUID->"b7ccaacb-4cae-4131-83bc-5988196d0d69"],
Cell[153633, 3250, 1629, 40, 91, "Code",ExpressionUUID->"e777ef22-5b22-4321-919b-5b5a555a01a8"],
Cell[CellGroupData[{
Cell[155287, 3294, 510, 12, 52, "Code",ExpressionUUID->"f41349f5-ce2c-42a4-936d-e2e8197ee805"],
Cell[155800, 3308, 239367, 4821, 512, "Output",ExpressionUUID->"045f74da-8973-4350-af6e-02af847fcf00"]
}, Open  ]],
Cell[395182, 8132, 187, 4, 52, "Code",ExpressionUUID->"66d4097c-56dc-44d1-9170-50ecc5b463c7"],
Cell[395372, 8138, 601, 14, 52, "Code",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],
Cell[CellGroupData[{
Cell[395998, 8156, 344, 7, 52, "Code",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],
Cell[396345, 8165, 55874, 929, 545, "Output",ExpressionUUID->"3b6acb39-0dfa-48fd-8287-316d2c4b4230"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452256, 9099, 1253, 21, 52, "Code",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],
Cell[453512, 9122, 2219, 36, 59, "Message",ExpressionUUID->"36bd4406-48dc-4fab-b348-62ab7c4cce71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[455768, 9163, 540, 11, 52, "Code",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],
Cell[456311, 9176, 63810, 1573, 546, "Output",ExpressionUUID->"0eeb186b-9d30-42aa-86f2-92362c5e6be2"]
}, Open  ]],
Cell[520136, 10752, 185, 3, 35, "Text",ExpressionUUID->"13ca92df-031f-49fc-8d35-f0d7e45c8ee7"],
Cell[CellGroupData[{
Cell[520346, 10759, 546, 11, 52, "Code",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],
Cell[520895, 10772, 408, 10, 24, "Message",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],
Cell[521306, 10784, 1342, 23, 42, "Message",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],
Cell[522651, 10809, 449, 11, 24, "Message",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],
Cell[523103, 10822, 431, 10, 24, "Message",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],
Cell[523537, 10834, 448, 11, 24, "Message",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],
Cell[523988, 10847, 617, 13, 24, "Message",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],
Cell[524608, 10862, 619, 13, 24, "Message",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],
Cell[525230, 10877, 617, 13, 24, "Message",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],
Cell[525850, 10892, 494, 11, 24, "Message",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],
Cell[526347, 10905, 564, 12, 34, "Output",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[526972, 10924, 216, 4, 67, "Section",ExpressionUUID->"50d2f7c6-3d90-4674-8c7d-134ca91d9f53"],
Cell[CellGroupData[{
Cell[527213, 10932, 153, 3, 54, "Subsection",ExpressionUUID->"c3071551-c538-4e23-a9ff-aeaae2cb1355"],
Cell[527369, 10937, 1122, 26, 110, "Code",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],
Cell[528494, 10965, 1436, 34, 72, "Code",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],
Cell[529933, 11001, 881, 18, 72, "Code",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],
Cell[530817, 11021, 699, 14, 36, "Code",ExpressionUUID->"fa821b18-598d-4969-a5ce-d0cc2bc295df",
 Evaluatable->False],
Cell[531519, 11037, 960, 20, 72, "Code",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],
Cell[CellGroupData[{
Cell[532504, 11061, 683, 14, 36, "Code",ExpressionUUID->"b52d97d1-1f12-4f4e-927c-7e474525430d",
 Evaluatable->False],
Cell[533190, 11077, 212, 4, 34, "Output",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],
Cell[CellGroupData[{
Cell[533439, 11086, 188, 3, 52, "Code",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],
Cell[533630, 11091, 8170, 206, 130, "Output",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[541849, 11303, 155, 3, 38, "Subsection",ExpressionUUID->"d0f91c15-f044-48eb-9e34-777ac2da01e6"],
Cell[542007, 11308, 517, 10, 52, "Code",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],
Cell[CellGroupData[{
Cell[542549, 11322, 691, 15, 52, "Code",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],
Cell[543243, 11339, 569441, 10426, 75, "Output",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],
Cell[1112699, 21768, 864, 19, 72, "Code",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],
Cell[1113566, 21789, 942, 18, 52, "Code",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

