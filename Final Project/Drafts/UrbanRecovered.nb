(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    975519,      18431]
NotebookOptionsPosition[    968185,      18315]
NotebookOutlinePosition[    968580,      18332]
CellTagsIndexPosition[    968537,      18329]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Impact of Urban Design on Quality of Life", "Title",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101323714347*^9}},ExpressionUUID->"112c77e2-f45b-4372-906b-\
a938d28da3f8"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Intro", "Subtitle"]], "Section",
 CellChangeTimes->{{3.771101273954318*^9, 
  3.771101340757436*^9}},ExpressionUUID->"2f1f3b8e-3200-48b9-b773-\
a77a1c396b17"],

Cell[TextData[StyleBox["Most of the population around the globe is now \
concentrated in cities. There are around 2 dozens urban areas with \
populations exceeding 10 million people, but we still fail to quantify the \
influence of various aspects of urban design on the quality of life.\nThis \
work is a stepping stone in that direction.", "Text"]], "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711015405664473`*^9}},ExpressionUUID->"c6307c66-135d-4af1-918e-\
b52e229fb589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["What is quality of life?", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017087241497`*^9}},ExpressionUUID->"ac13fabb-576a-4a4b-8847-\
2bb61f653aef"],

Cell["\<\
This is a very non-trivial question and we are not going to answer it in this \
work. Instead we will define a very simple approximation of quality of life \
as average sentiment across Tweets related to that specific city.\
\>", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
  3.771102550634573*^9}},ExpressionUUID->"d7112578-2f96-4683-9976-\
1d246abd738b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentimentWL", "[", "sentence_String", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "probs", ",", " ", "pPos", ",", " ", "pNeu", ",", " ", "pNeg", ",", " ",
        "resultPositivness", ",", " ", "resultCertainity"}], "}"}], ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"probs", " ", "=", " ", 
       RowBox[{"Classify", "[", 
        RowBox[{
        "\"\<Sentiment\>\"", ",", " ", "sentence", ",", " ", 
         "\"\<Probabilities\>\""}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"pPos", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Positive\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeu", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Neutral\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"pNeg", " ", "=", " ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"probs", ",", " ", "\"\<Negative\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultPositivness", " ", "=", " ", 
       RowBox[{"(", 
        RowBox[{"pPos", " ", "+", " ", 
         RowBox[{"pNeu", " ", "*", " ", "0.5"}]}], ")"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"resultCertainity", " ", "=", " ", 
       RowBox[{"Max", "[", "probs", "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"{", 
       RowBox[{"resultPositivness", ",", "resultCertainity"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences_", ",", " ", "func_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"{", 
        RowBox[{"#", ",", " ", 
         RowBox[{"func", "[", "#", "]"}]}], "}"}], ")"}], " ", "&"}], ",", 
     " ", "sentences"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EstimateSentiments", "[", "sentences_", "]"}], " ", ":=", " ", 
   RowBox[{"EstimateSentiments", "[", 
    RowBox[{"sentences", ",", " ", "EstimateSentimentWL"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EstimateQualityOfLifeWSentiment", "[", "data_", "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "sentences", ",", " ", "tweetsWSentiments", ",", " ", 
        "sentimentsWCertainity", ",", " ", "meanPositivness", ",", " ", 
        "meanCertainty"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"sentences", " ", "=", " ", 
        RowBox[{"data", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "\"\<Text\>\""}], 
         "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
       RowBox[{"tweetsWSentiments", " ", "=", " ", 
        RowBox[{"EstimateSentiments", "[", "sentences", "]"}]}], ";", "\n", 
       "\t", 
       RowBox[{"sentimentsWCertainity", " ", "=", " ", 
        RowBox[{"tweetsWSentiments", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], ";", 
       "\n", "\t", 
       RowBox[{"meanPositivness", " ", "=", " ", 
        RowBox[{"MeanAround", "[", 
         RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
       ";", "\n", "\t", 
       RowBox[{"meanCertainty", " ", "=", " ", 
        RowBox[{"MeanAround", "[", 
         RowBox[{"sentimentsWCertainity", "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
       ";", "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"meanPositivness", ",", " ", "meanCertainty"}], "}"}]}]}], 
     "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AssociationKeyRename", "[", 
     RowBox[{"a_", ",", " ", 
      RowBox[{"old_", " ", "->", " ", "new_"}]}], "]"}], " ", "/;", " ", 
    RowBox[{"KeyExistsQ", "[", 
     RowBox[{"a", ",", " ", "old"}], "]"}]}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"KeyDrop", "[", "old", "]"}], " ", "@", " ", 
    RowBox[{"Append", "[", 
     RowBox[{"a", ",", " ", 
      RowBox[{"new", " ", "->", " ", 
       RowBox[{"a", "[", "old", "]"}]}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationFromPair", "[", "strAndNum_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
    "\[Rule]", " ", 
    RowBox[{
    "strAndNum", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"AssociationsFromPair", "[", 
    RowBox[{"keys_List", ",", " ", "vals_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"#1", " ", "\[Rule]", " ", "#2"}], ")"}], " ", "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"keys", ",", " ", "vals"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RangeMakeAround", "[", 
    RowBox[{"num_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"num", " ", "-", " ", "delta"}], ",", " ", 
     RowBox[{"num", " ", "+", " ", "delta"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Integer", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Real", "]"}], " ", ":=", " ", 
   "number"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_List", "]"}], " ", ":=", " ", 
   RowBox[{"number", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_Quantity", "]"}], " ", ":=", " ", 
   RowBox[{"QuantityMagnitude", "[", "number", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NomalizeNumber", "[", "number_", "]"}], " ", ":=", " ", "0"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{
    "numbers_List", ",", " ", "numberNewSmallest_", ",", " ", 
     "numberNewLargest_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", " ", "*", " ", 
         RowBox[{"(", 
          RowBox[{"numberNewLargest", " ", "-", " ", "numberNewSmallest"}], 
          ")"}]}], " ", "+", " ", "numberNewSmallest"}], ")"}], " ", "&"}], 
     ",", " ", 
     RowBox[{"Rescale", "[", "numbers", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RescaleIntoInterval", "[", "numbers_List", "]"}], " ", ":=", " ", 
    RowBox[{"RescaleIntoInterval", "[", 
     RowBox[{"numbers", ",", " ", "0.5", ",", " ", "0.95"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsFindInImage", "[", 
    RowBox[{"imgPixels_List", ",", " ", "colors_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Join", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Position", "[", 
          RowBox[{"imgPixels", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], ",",
        " ", "colors"}], "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "redVals_List", ",", " ", "greenVals_List", ",", " ", "blueVals_List"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"Tuples", "[", 
    RowBox[{"{", 
     RowBox[{"redVals", ",", " ", "greenVals", ",", " ", "blueVals", ",", " ", 
      RowBox[{"{", " ", "255", " ", "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
    "red_Integer", ",", " ", "green_Integer", ",", " ", "blue_Integer", ",", 
     " ", "delta_Integer"}], "]"}], " ", ":=", " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"red", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"green", ",", " ", "delta"}], "]"}], ",", 
     RowBox[{"RangeMakeAround", "[", 
      RowBox[{"blue", ",", " ", "delta"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey_Integer", ",", " ", "delta_Integer"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"ColorsMakeShade", "[", 
    RowBox[{"grey", ",", " ", "grey", ",", " ", "grey", ",", " ", "delta"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ColorMake", "[", 
    RowBox[{"r_", ",", "g_", ",", "b_"}], "]"}], " ", ":=", " ", 
   RowBox[{"RGBColor", "[", 
    RowBox[{
     RowBox[{"r", "/", "255"}], ",", " ", 
     RowBox[{"g", "/", "255"}], ",", " ", 
     RowBox[{"b", "/", "255"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ColorMake", "[", "parts_List", "]"}], " ", ":=", " ", 
    RowBox[{"ColorMake", "[", 
     RowBox[{
      RowBox[{"parts", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{"parts", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
       ",", " ", 
      RowBox[{
      "parts", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EqualizeImages", "[", "imgs_List", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"smallestW", ",", " ", "smallestH", ",", " ", "sizes"}], "}"}], 
     ",", "\n", "\t", 
     RowBox[{
      RowBox[{"sizes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageDimensions", ",", " ", "imgs"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"smallestW", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"smallestH", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"sizes", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ImageCrop", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{"smallestW", ",", " ", "smallestH"}], "}"}]}], "]"}], " ",
          "&"}], ",", " ", "imgs"}], "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MapReconstructFromImages", "[", "imgs_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cntSide", ",", " ", "imgsTable"}], "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"cntSide", " ", "=", " ", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Length", "[", "imgs", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgsTable", " ", "=", " ", 
       RowBox[{"ArrayReshape", "[", 
        RowBox[{"imgs", ",", " ", 
         RowBox[{"{", 
          RowBox[{"cntSide", ",", "cntSide"}], "}"}]}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"ImageAssemble", "[", "imgsTable", "]"}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101723293976*^9}, {3.7711024759486427`*^9, 
   3.771102595812048*^9}, 3.771102630105879*^9, {3.771102663030601*^9, 
   3.771102675942957*^9}, {3.771102819347427*^9, 3.771102841217803*^9}, {
   3.7711492274460793`*^9, 3.771149259526984*^9}, {3.7711494968232927`*^9, 
   3.771149500439412*^9}, 3.7711495391273327`*^9, {3.77125210524156*^9, 
   3.7712521814760447`*^9}, {3.771252249246994*^9, 3.771252279427402*^9}, {
   3.7712523472315397`*^9, 3.771252349510272*^9}, {3.7713308537177467`*^9, 
   3.771330854042081*^9}, {3.771351310412696*^9, 3.771351311048148*^9}, {
   3.771352532684317*^9, 3.771352549949391*^9}, {3.771356337886156*^9, 
   3.771356338115733*^9}, {3.7714467936655684`*^9, 3.7714468327252817`*^9}, {
   3.7714477080950613`*^9, 3.771447709078145*^9}, {3.771447785236917*^9, 
   3.771447786651771*^9}, {3.771447949999405*^9, 3.7714479501103563`*^9}, {
   3.771453850679749*^9, 3.771453858089093*^9}, {3.7714943916639833`*^9, 
   3.771494395261273*^9}, {3.771603230447397*^9, 3.771603276204214*^9}, {
   3.77162270325916*^9, 3.771622703769059*^9}, {3.7716720354592876`*^9, 
   3.7716720953478203`*^9}, {3.771672415887467*^9, 3.771672441238475*^9}, {
   3.771672951222991*^9, 3.771672957381604*^9}, {3.7716730265330887`*^9, 
   3.771673027357678*^9}, {3.771673226849732*^9, 3.771673231141677*^9}, {
   3.771673519358794*^9, 3.7716736310995073`*^9}, {3.771691685199237*^9, 
   3.771691693779365*^9}, {3.771691831795059*^9, 3.771691867469315*^9}, {
   3.771691971381495*^9, 3.77169197881502*^9}, {3.771692016649796*^9, 
   3.771692046537582*^9}, {3.771692397520424*^9, 3.7716923999690723`*^9}, {
   3.771692660468504*^9, 3.771692762738967*^9}, {3.7716928504906797`*^9, 
   3.7716928766927843`*^9}, {3.771693062356737*^9, 3.771693078588234*^9}, {
   3.771693618478825*^9, 3.771693675965167*^9}, {3.771693772415101*^9, 
   3.771693808300001*^9}, {3.7716938646087313`*^9, 3.7716938728069553`*^9}, {
   3.7716939585609303`*^9, 3.771693982168026*^9}, {3.771695280962672*^9, 
   3.771695307549501*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"20961709-7c7a-45d4-a981-9ac2574c6877"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Which regions are we going to analyze?", \
"Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017068335447`*^9}},ExpressionUUID->"684ffadd-38af-4be8-83bf-\
99937c2f50b6"],

Cell["rer", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
  3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102706518423*^9}, {
  3.7712515519242563`*^9, 
  3.7712515525752573`*^9}},ExpressionUUID->"2c0225ee-0b7c-4924-8b64-\
a72ab5040bfe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "SetDirectory", "[", 
   "\"\</Users/ashvardanian/CodeMine/WolframSummer19/\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathTweets", " ", "=", " ", "\"\<Data/Tweets\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathFeatures", " ", "=", " ", "\"\<Data/Features\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantPathMaps", " ", "=", " ", "\"\<Data/Maps\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "constantPathSatellites", " ", "=", " ", "\"\<Data/Satellites\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityDiameterKM", " ", "=", " ", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantCityGridSize", " ", "=", " ", "5"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"constantShareTraining", " ", "=", " ", "0.9"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"constantColorsPerPurpose", " ", "=", " ", 
    RowBox[{"Association", "[", 
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{"\"\<Street\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"254", ",", "254", ",", "254"}], "}"}], "}"}]}], ",", " ", 
       "\n", "\t", 
       RowBox[{"\"\<Highway\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"232", ",", "208", ",", "174"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"227", ",", "160", ",", "54"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"242", ",", "196", ",", "99"}], "}"}]}], "}"}]}], ",", 
       "\n", "\t", 
       RowBox[{"\"\<Water\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"158", ",", "197", ",", "226"}], "}"}], "}"}]}], ",", "\n", 
       "\t", 
       RowBox[{"\"\<Park\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"201", ",", "224", ",", "185"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"196", ",", "211", ",", "192"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"walking", " ", "trails"}], "*)"}], "}"}]}], ",", "\n", 
       "\t", 
       RowBox[{"\"\<Train\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"148", ",", "148", ",", "148"}], "}"}], "}"}]}], ",", "\n", 
       "\t", 
       RowBox[{"\"\<Interesting\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"251", ",", "248", ",", "228"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"240", ",", "236", ",", "228"}], "}"}]}], 
         RowBox[{"(*", "sports", "*)"}], "}"}]}], ",", "\n", "\t", 
       RowBox[{"\"\<Building\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"232", ",", "226", ",", "212"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"235", ",", "233", ",", "231"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"192", ",", "186", ",", "175"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"207", ",", "200", ",", "188"}], "}"}]}], "}"}]}], ",", 
       "\n", "\t", 
       RowBox[{"\"\<Annotations\>\"", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"69", ",", "69", ",", "69"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"117", ",", "117", ",", "117"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"63", ",", "63", ",", "63"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"88", ",", "88", ",", "88"}], "}"}]}], "}"}]}]}], "\n", 
      "}"}], "]"}]}], ";"}], "\n", "\n", 
  RowBox[{"(*", " ", "\n", 
   RowBox[{
    RowBox[{"Ordered", " ", "list", " ", "of", " ", 
     RowBox[{"cities", ":", " ", "https", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{"www", ".", "timeout", ".", "com"}], "/", "things"}], "-", "to",
      "-", 
     RowBox[{"do", "/", "best"}], "-", "cities", "-", "in", "-", "the", "-", 
     RowBox[{
     "world", " ", "\n", "Other", " ", "lists", " ", "can", " ", "be", " ", 
      "found", " ", "in", " ", 
      RowBox[{"\"\<CitiesLists.nb\>\"", "."}]}]}]}], "\n", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityRowParse", "[", "cityRow_List", "]"}], " ", ":=", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Interpreter", "[", "\"\<City\>\"", "]"}], "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{
        "cityRow", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", " ", "\"\<, \>\"", ",", " ", 
        RowBox[{
        "cityRow", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
       "]"}], "]"}], ",", " ", 
     RowBox[{
     "cityRow", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], " ",
     "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesWRanks", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"CityRowParse", ",", " ", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{
       "Import", "[", "\"\<Data/Inputs/CitiesMercer2019.csv\>\"", "]"}], ",", 
       " ", "1"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"citiesPopular", " ", "=", " ", 
    RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityName", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"EntityValue", "[", 
    RowBox[{"city", ",", " ", "\"\<Name\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityBoundsAround", "[", "cityCenter_", "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"GeoBoundingBox", "[", 
     RowBox[{"cityCenter", ",", " ", 
      RowBox[{"Quantity", "[", 
       RowBox[{"constantCityDiameterKM", ",", " ", "\"\<Kilometers\>\""}], 
       "]"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityBounds", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"CityBoundsAround", "[", 
    RowBox[{"GeoCenter", "[", "city", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityDataPath", "[", 
    RowBox[{"directory_String", ",", " ", "city_String"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"{", 
     RowBox[{
     "directory", ",", " ", "\"\</\>\"", ",", " ", "city", ",", " ", 
      "\"\<.mx\>\""}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CityDataPath", "[", 
    RowBox[{"directory_String", ",", " ", "city_"}], "]"}], " ", ":=", " ", 
   RowBox[{"CityDataPath", "[", 
    RowBox[{"directory", ",", " ", 
     RowBox[{"CityName", "[", "city", "]"}]}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101735714161*^9}, {3.771101948449766*^9, 
   3.771101949271914*^9}, {3.7711027061183147`*^9, 3.771102789628256*^9}, {
   3.7711028769656677`*^9, 3.77110295393472*^9}, {3.771165070091775*^9, 
   3.7711650854638367`*^9}, 3.771165246245709*^9, {3.771198271950489*^9, 
   3.771198276482582*^9}, {3.771254152194386*^9, 3.771254159439356*^9}, {
   3.771255141608494*^9, 3.771255185697196*^9}, {3.7712555473089733`*^9, 
   3.771255547533888*^9}, {3.771255652408498*^9, 3.771255664396275*^9}, {
   3.771255707871517*^9, 3.7712557437705793`*^9}, {3.7713263576960297`*^9, 
   3.771326502260768*^9}, {3.771620294508806*^9, 3.7716203042475853`*^9}, {
   3.771622750063384*^9, 3.771622769400876*^9}, {3.7716233651292887`*^9, 
   3.7716234318215*^9}, {3.771670567290987*^9, 3.7716705676824827`*^9}, {
   3.771670646327095*^9, 3.77167064676192*^9}, {3.7716952524589643`*^9, 
   3.7716952557287903`*^9}, {3.771695648533807*^9, 3.7716956553990297`*^9}, {
   3.771696254457182*^9, 3.771696265487063*^9}, {3.771709397551697*^9, 
   3.7717094414883327`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"acdb5163-89af-4011-8610-a985ea22ddfc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Collecting data!", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.7711017068335447`*^9}, {3.771670664729755*^9, 
  3.7716706691030207`*^9}},ExpressionUUID->"f13af7f9-8d60-4430-b05b-\
364fe3261edc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"tw", "[", 
     RowBox[{"\"\<TweetSearch\>\"", ",", " ", 
      RowBox[{"\"\<Query\>\"", "\[Rule]", 
       RowBox[{"CityName", "[", "city", "]"}]}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractTweets", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportTweets", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{
  3.771103114668171*^9, {3.771103336765457*^9, 3.771103338095792*^9}, {
   3.771103900064671*^9, 3.771103953970173*^9}, {3.771104192105047*^9, 
   3.771104206425777*^9}, {3.771104623555089*^9, 3.771104634861293*^9}, {
   3.771104668974058*^9, 3.771104690035036*^9}, {3.7711047224932117`*^9, 
   3.771104799500358*^9}, {3.771104931900667*^9, 3.771104987366683*^9}, {
   3.771105022012245*^9, 3.771105218274828*^9}, 3.771105264350816*^9, {
   3.771150962719131*^9, 3.771150964531691*^9}, {3.771151012996887*^9, 
   3.7711510150931873`*^9}, {3.7711511401199427`*^9, 3.771151202612028*^9}, 
   3.771162598734274*^9, 3.77119823213085*^9, {3.7711984660326853`*^9, 
   3.771198471548006*^9}, {3.771255195206545*^9, 3.771255221452676*^9}, {
   3.77133068176521*^9, 3.771330710916729*^9}, {3.771330744590096*^9, 
   3.771330840917815*^9}, {3.771364487765592*^9, 3.771364489560156*^9}, {
   3.771448657237996*^9, 3.771448658832782*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapsGrid", "[", 
    RowBox[{"city_", ",", " ", "cityCenter_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "gridLats", ",", " ", "gridLons", ",", " ", 
       "cityParts", ",", " ", "MakeCell"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"CityBoundsAround", "[", "cityCenter", "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLats", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Latitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"gridLons", " ", "=", " ", 
       RowBox[{"Subdivide", "[", 
        RowBox[{
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "]"}], ",", 
         RowBox[{"Longitude", "[", 
          RowBox[{
          "cityBounds", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}], "]"}], ",", " ", 
         RowBox[{"constantCityGridSize", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"MakeCell", "[", 
        RowBox[{"i_Integer", ",", " ", "j_Integer"}], "]"}], " ", ":=", " ", 
       RowBox[{"GeoRange", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLats", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLats", "\[LeftDoubleBracket]", 
            RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}], ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "gridLons", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}],
            ",", " ", 
           RowBox[{"gridLons", "\[LeftDoubleBracket]", 
            RowBox[{"j", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}]}], 
        "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"MakeCell", "[", 
           RowBox[{"i", ",", " ", "j"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "constantCityGridSize"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "constantCityGridSize"}], "}"}]}], "]"}], 
        "]"}]}], ";", "\n", "\t", "cityParts"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityParts", ",", " ", "cityCenter", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", "coords_", "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", 
            RowBox[{"GeoRange", "\[Rule]", "coordsAsList"}], "]"}], "]"}]}]}],
         "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"ImageForCell", ",", " ", "cityParts"}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractMaps", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportMaps", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771255003628858*^9, 3.771255019385186*^9}, {
   3.771255054782916*^9, 3.7712550927175417`*^9}, {3.771255236405387*^9, 
   3.771255264912755*^9}, 3.771255515444641*^9, 3.771255703381096*^9, {
   3.771255752389967*^9, 3.771255777900586*^9}, {3.771255850554541*^9, 
   3.771255853952383*^9}, {3.771329317484642*^9, 3.771329333383959*^9}, {
   3.771329577085322*^9, 3.771329588111939*^9}, 3.7713311687251*^9, {
   3.771585825750794*^9, 3.771585835461856*^9}, {3.7715858909152803`*^9, 
   3.771585900586632*^9}, 3.771585932346272*^9, {3.7715860171344767`*^9, 
   3.7715860713139353`*^9}, {3.771586365243346*^9, 3.771586405924994*^9}, {
   3.771603548460307*^9, 3.771603652291589*^9}, {3.771603725684588*^9, 
   3.771603728770176*^9}, {3.771604534741798*^9, 3.7716046078725767`*^9}, {
   3.771605072996415*^9, 3.771605073369802*^9}, {3.7716051056407633`*^9, 
   3.771605106401538*^9}, {3.771623340038671*^9, 3.7716233434193363`*^9}, {
   3.771623510161605*^9, 3.771623529899592*^9}, {3.771673674224918*^9, 
   3.7716736753418007`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cityCenter", ",", " ", "cityParts", ",", " ", "ImageForCell"}],
       "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"cityCenter", " ", "=", " ", 
       RowBox[{"GeoPosition", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"cityParts", " ", "=", " ", 
       RowBox[{"ExtractMapsGrid", "[", 
        RowBox[{"city", ",", " ", "cityCenter"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{
       RowBox[{"ImageForCell", "[", 
        RowBox[{"coords_", ",", " ", "rotation_Real"}], "]"}], " ", ":=", " ", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "coordsAsList", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"coordsAsList", " ", "=", " ", 
           RowBox[{"List", " ", "@@", " ", "coords"}]}], ";", "\n", "\t\t", 
          RowBox[{"Image", "[", 
           RowBox[{"GeoGraphics", "[", "\n", "                ", 
            RowBox[{
             RowBox[{"GeoRange", " ", "\[Rule]", " ", "coordsAsList"}], ",", 
             " ", "\n", "                ", 
             RowBox[{"GeoProjection", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<ObliqueMercator\>\"", ",", " ", 
                RowBox[{"\"\<Centering\>\"", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{"cityCenter", ",", " ", "rotation"}], "}"}]}]}], 
               "}"}]}], ",", "\n", "                ", 
             RowBox[{"GeoBackground", " ", "\[Rule]", " ", 
              RowBox[{"GeoStyling", "[", "\"\<StreetMap\>\"", "]"}]}], ",", 
             " ", "\n", "                ", 
             RowBox[{
             "GeoServer", " ", "\[Rule]", " ", 
              "\"\<http://mt0.google.com/vt/lyrs=s,h&x=`2`&y=`3`&z=`1`\>\""}]}\
], "]"}], "]"}]}]}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
      RowBox[{"EqualizeImages", "[", 
       RowBox[{"Join", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "30.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "45.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageForCell", "[", 
             RowBox[{"#", ",", " ", "90.0"}], "]"}], " ", "&"}], ",", " ", 
           "cityParts"}], "]"}]}], "\n", "\t", "]"}], "]"}]}]}], "\n", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], ",", 
     RowBox[{"ExtractSatellites", "[", "city", "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportSatellites", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.7716037334248238`*^9, 3.771603763020352*^9}, {
   3.771603881125678*^9, 3.771603882562314*^9}, {3.771604351561441*^9, 
   3.771604362272173*^9}, {3.771604462858472*^9, 3.771604465769896*^9}, {
   3.771605111366535*^9, 3.7716051235802097`*^9}, {3.771618696238031*^9, 
   3.771618737002274*^9}, {3.7716190984180727`*^9, 3.771619167787113*^9}, {
   3.771619230094412*^9, 3.7716193140816317`*^9}, {3.7716194420009613`*^9, 
   3.7716194491737347`*^9}, 3.771619497044444*^9, {3.771619699793701*^9, 
   3.771619711850318*^9}, {3.7716203262336597`*^9, 3.771620356834854*^9}, {
   3.771673684187669*^9, 3.771673685879765*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExtractListFeatures", "[", 
    RowBox[{"object_", ",", " ", "props_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"{", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Normal", "[", 
           RowBox[{"object", "[", "#", "]"}], "]"}]}], "}"}], ")"}], " ", 
       "&"}], ",", " ", "props"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCityStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "props", "}"}], ",", " ", "\n", "\t", 
     RowBox[{
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\"\<Elevation\>\"", ",", 
         "\"\<MagneticFieldStrength\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", 
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"city", ",", " ", "props"}], "]"}]}], "]"}], "]"}]}]}], 
    "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractCountryStatsFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "props", ",", " ", "country", ",", " ", "\n", "\t\t", 
       "countryPopulation", ",", " ", "countryArea", ",", " ", "\n", "\t\t", 
       "propsToNormalizeWPopulation", ",", " ", "propsToNormalizeWArea", ",", 
       "\n", "\t\t", "pairsList"}], "\n", "\t", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"country", " ", "=", " ", 
       RowBox[{"city", "[", "\"\<Country\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryArea", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Area\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"countryPopulation", " ", "=", " ", 
       RowBox[{"country", "[", "\"\<Population\>\"", "]"}]}], ";", "\n", "\t", 
      RowBox[{"props", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Population\>\"", ",", "\"\<Latitude\>\"", ",", 
         "\"\<Longitude\>\"", ",", "\n", "\t\t", "\"\<Area\>\"", ",", 
         "\"\<WaterArea\>\"", ",", "\"\<BoundaryLength\>\"", ",", 
         "\"\<CoastlineLength\>\"", ",", "\"\<WaterwayLength\>\"", ",", "\n", 
         "\t\t", "\"\<ContributingFamilyWorkers\>\"", ",", "\n", "\t\t", 
         "\"\<GDPPerPersonEmployed\>\"", ",", "\"\<GiniIndex\>\"", ",", 
         "\"\<InterestRateSpread\>\"", ",", "\"\<PovertyHeadcount\>\"", ",", 
         "\"\<UnemploymentRate\>\"", ",", "\n", "\t\t", "\"\<BookTitles\>\"", 
         ",", "\"\<IlliteracyFraction\>\"", ",", "\n", "\t\t", "\n", "\t\t", 
         "\"\<MaleLifeExpectancy\>\"", ",", "\"\<MaleMedianAge\>\"", ",", 
         "\"\<FemaleLifeExpectancy\>\"", ",", "\"\<FemaleMedianAge\>\"", ",", 
         "\n", "\t\t", "\"\<HospitalBedsPer10000Population\>\""}], "\n", "\t",
         "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWArea", " ", "=", " ", 
       RowBox[{"{", " ", "}"}]}], ";", "\n", "\t", 
      RowBox[{"propsToNormalizeWPopulation", " ", "=", " ", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
        "\"\<Army\>\"", ",", "\"\<HIVAIDSPopulation\>\"", ",", 
         "\"\<ElectricityTotal\>\"", ",", "\n", "\t\t", 
         "\"\<ChildPopulation\>\"", ",", "\"\<ElderlyPopulation\>\"", ",", 
         "\"\<AnnualMarriages\>\"", ",", "\"\<AnnualDivorces\>\"", ",", "\n", 
         "\t\t", "\"\<NetIncomeFromAbroad\>\"", ",", "\"\<GovernmentDebt\>\"",
          ",", "\"\<GovernmentSurplus\>\"", ",", "\"\<ImportsValue\>\"", ",", 
         "\"\<ExportsValue\>\"", ",", "\n", "\t\t", "\"\<LeisureArrivals\>\"",
          ",", "\"\<NewspaperTitles\>\""}], "\n", "\t", "}"}]}], ";", "\n", 
      "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"ExtractListFeatures", "[", 
          RowBox[{"country", ",", " ", "props"}], "]"}], ",", " ", "\n", 
         "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryArea"}]}], "}"}], ")"}], " ", "&"}], 
           ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWArea"}], "]"}]}], 
          "]"}], ",", "\n", "\t\t", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                " ", "/", " ", "countryPopulation"}]}], "}"}], ")"}], " ", 
            "&"}], ",", " ", 
           RowBox[{"ExtractListFeatures", "[", 
            RowBox[{"country", ",", " ", "propsToNormalizeWPopulation"}], 
            "]"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"pairsList", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Country\>\"", ",", " ", 
                RowBox[{
                "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
                "}"}], "]"}], ",", " ", 
             RowBox[{
             "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "}"}], ")"}], " ", "&"}], ",", " ", "pairsList"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"AssociationFromPair", ",", " ", "pairsList"}], "]"}], 
       "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromPixels", "[", "city_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "imgQuantized", ",", " ", "pixelsList", ",", " ", "freqOfColors", ",", 
       " ", "imgMerged"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"imgMerged", " ", "=", " ", 
       RowBox[{"MapReconstructFromImages", "[", 
        RowBox[{"ImportMaps", "[", "city", "]"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"imgQuantized", " ", "=", " ", 
       RowBox[{"RemoveAlphaChannel", "[", 
        RowBox[{"ColorQuantize", "[", 
         RowBox[{"imgMerged", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"ColorMake", ",", " ", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{"Values", "[", "constantColorsPerPurpose", "]"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{"1", ",", " ", "2"}], "}"}]}], "]"}]}], "]"}]}], "]"}],
         "]"}]}], ";", "\n", "\t", 
      RowBox[{"pixelsList", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"ImageData", "[", 
          RowBox[{"imgQuantized", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ",
          "1"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"freqOfColors", " ", "=", " ", 
       RowBox[{"AssociationMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"ColorsFindInImage", "[", 
              RowBox[{"pixelsList", ",", " ", 
               RowBox[{"constantColorsPerPurpose", "[", "#", "]"}]}], "]"}], 
             "]"}], " ", "/", " ", 
            RowBox[{"Length", "[", "pixelsList", "]"}]}], ")"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"Keys", "[", "constantColorsPerPurpose", "]"}]}], "]"}]}], 
      ";", "\n", "\t", "freqOfColors"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractMapFeaturesFromOSM", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cityBounds", ",", " ", "osmData", ",", " ", "osmNodes", ",", " ", 
       "osmWays", ",", " ", "parsedWays", ",", " ", "graphWays"}], "}"}], ",",
      "\n", "\t", 
     RowBox[{
      RowBox[{"cityBounds", " ", "=", " ", 
       RowBox[{"GeoBoundingBox", "[", 
        RowBox[{
         RowBox[{"GeoPosition", "[", "city", "]"}], ",", 
         RowBox[{"Quantity", "[", 
          RowBox[{"0.5", ",", " ", "\"\<Kilometers\>\""}], "]"}]}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"osmData", " ", "=", " ", 
       RowBox[{
        RowBox[{"ResourceFunction", "[", "\"\<OSMImport\>\"", "]"}], "[", 
        "cityBounds", "]"}]}], ";", "\n", "\t", 
      RowBox[{"osmNodes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"#", ",", " ", "\"\<Position\>\""}], "]"}], " ", "&"}], 
         ",", " ", 
         RowBox[{"osmData", "[", "\"\<Nodes\>\"", "]"}]}], "]"}]}], ";", "\n",
       "\t", 
      RowBox[{"osmWays", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"osmNodes", ",", " ", 
            RowBox[{"Lookup", "[", 
             RowBox[{"#", ",", " ", "\"\<Nodes\>\""}], "]"}]}], "]"}], " ", 
          "&"}], ",", " ", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"osmData", "[", "\"\<Ways\>\"", "]"}], ",", " ", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Keys", "[", "#Tags", "]"}], ",", "\"\<highway\>\""}], 
             "]"}], " ", "&"}]}], "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"parsedWays", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"UndirectedEdge", "@@@", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", "2", ",", "1"}], "]"}]}], " ", "&"}], ",", " ", 
          RowBox[{"Values", "[", "osmWays", "]"}]}], "]"}], "]"}]}], ";", 
      "\n", "\t", 
      RowBox[{"graphWays", " ", "=", " ", 
       RowBox[{"Graph", "[", "parsedWays", "]"}]}], ";", "\n", "\t", 
      RowBox[{"Association", "[", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{
         RowBox[{"\"\<MeanNeighborDegree\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"MeanNeighborDegree", "[", "graphWays", "]"}], "]"}]}], 
         ",", "\n", "\t\t", 
         RowBox[{"\"\<DegreeCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"DegreeCentrality", "[", "graphWays", "]"}], "]"}]}], ",", 
         "\n", "\t\t", 
         RowBox[{"\"\<ClosenessCentrality\>\"", " ", "\[Rule]", " ", 
          RowBox[{"Mean", "[", 
           RowBox[{"ClosenessCentrality", "[", "graphWays", "]"}], "]"}]}]}], 
        "\n", "\t", "}"}], "]"}]}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExtractAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Merge", "[", 
    RowBox[{
     RowBox[{"{", " ", "\n", "\t", 
      RowBox[{
       RowBox[{"ExtractCityStatsFeatures", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractCountryStatsFeatures", "[", "city", "]"}], ",", " ", 
       "\n", "\t", 
       RowBox[{"ExtractMapFeaturesFromPixels", "[", "city", "]"}], ",", " ", 
       RowBox[{"ExtractMapFeaturesFromOSM", "[", "city", "]"}]}], "\n", "\t", 
      "}"}], ",", " ", "Total"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"CityDataPath", "[", 
      RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], ",", " ", 
     RowBox[{"ExtractAllFeatures", "[", "city", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeatures", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"CityDataPath", "[", 
     RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportAllFeaturesClean", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"raw", ",", " ", "keys", ",", " ", "vals"}], "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"raw", " ", "=", " ", 
       RowBox[{"ImportAllFeatures", "[", "city", "]"}]}], ";", "\n", "\t", 
      RowBox[{"keys", " ", "=", " ", 
       RowBox[{"Keys", "[", "raw", "]"}]}], ";", "\n", "\t", 
      RowBox[{"vals", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"N", "[", 
           RowBox[{"NomalizeNumber", "[", "#", "]"}], "]"}], " ", "&"}], ",", 
         " ", 
         RowBox[{"Values", "[", "raw", "]"}]}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"keys", ",", " ", "vals"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
   3.771101738955223*^9}, {3.771102348054689*^9, 3.771102377179801*^9}, {
   3.771151297276696*^9, 3.7711513406172113`*^9}, {3.771165996818695*^9, 
   3.771166090601877*^9}, {3.771166173108506*^9, 3.771166257114065*^9}, {
   3.7711663793332567`*^9, 3.7711664011443663`*^9}, {3.771166487336176*^9, 
   3.771166493613332*^9}, {3.771166547031842*^9, 3.771166548165827*^9}, {
   3.771166600953315*^9, 3.771166683297266*^9}, {3.7711667286702223`*^9, 
   3.771166759409555*^9}, {3.771166813508647*^9, 3.77116686156734*^9}, {
   3.771166913675415*^9, 3.771166915031599*^9}, {3.771167002660701*^9, 
   3.7711670324128647`*^9}, {3.771167084473464*^9, 3.771167085469692*^9}, {
   3.771167137989037*^9, 3.77116714854849*^9}, {3.7711966071075907`*^9, 
   3.771196664810173*^9}, {3.771196768138517*^9, 3.771196768956388*^9}, {
   3.7711972557665977`*^9, 3.771197296014269*^9}, {3.771197339836514*^9, 
   3.7711973411966457`*^9}, {3.771197432374444*^9, 3.771197524940136*^9}, {
   3.7711976763793087`*^9, 3.771197702854021*^9}, {3.771197803674632*^9, 
   3.7711979369634132`*^9}, {3.771197967398962*^9, 3.7711980033990593`*^9}, {
   3.7712540825875387`*^9, 3.7712541780295067`*^9}, {3.771254335770904*^9, 
   3.771254359501605*^9}, 3.771254530905891*^9, {3.771254785393812*^9, 
   3.771254808272388*^9}, {3.771255275230245*^9, 3.7712553239167128`*^9}, 
   3.771255878153738*^9, {3.771329391567483*^9, 3.771329411248989*^9}, {
   3.771329565046358*^9, 3.771329572203886*^9}, {3.771496168448968*^9, 
   3.7714962036277237`*^9}, {3.7714962447300997`*^9, 3.771496245963435*^9}, {
   3.771496311404038*^9, 3.771496321537601*^9}, {3.771496373822885*^9, 
   3.7714965489266853`*^9}, {3.771496600537525*^9, 3.771496657002174*^9}, {
   3.771496740056799*^9, 3.7714967412281446`*^9}, {3.7714967773729877`*^9, 
   3.771496816005433*^9}, {3.7714968682908154`*^9, 3.7714968697917128`*^9}, {
   3.771496918369812*^9, 3.7714969345000267`*^9}, {3.77149704823771*^9, 
   3.771497049699279*^9}, {3.771531573462158*^9, 3.7715316783804092`*^9}, {
   3.7715317921088057`*^9, 3.7715319320398483`*^9}, {3.771532053822135*^9, 
   3.771532068932446*^9}, {3.77160369579909*^9, 3.771603699299447*^9}, {
   3.771622717254788*^9, 3.771622744597303*^9}, {3.771622792645124*^9, 
   3.771622866807831*^9}, {3.771622943162854*^9, 3.771622977854175*^9}, {
   3.771623095313883*^9, 3.7716231559729*^9}, 3.771626854648131*^9, {
   3.7716699227396383`*^9, 3.771670136223054*^9}, {3.771670237325835*^9, 
   3.7716702494329853`*^9}, 3.771671175991432*^9, {3.771672127947584*^9, 
   3.771672150478457*^9}, {3.771672230501935*^9, 3.771672268757731*^9}, {
   3.771672315778051*^9, 3.771672366662242*^9}, {3.771672450181912*^9, 
   3.771672518746067*^9}, {3.7716728138915873`*^9, 3.7716728561259413`*^9}, {
   3.771673120085889*^9, 3.7716731965682497`*^9}, 3.771673311335342*^9, {
   3.7716733760174026`*^9, 3.7716734371914263`*^9}, 3.7716736642268753`*^9, {
   3.771673816967555*^9, 3.7716738200197077`*^9}, 3.7716738956763563`*^9, {
   3.771692271635406*^9, 3.771692289122738*^9}, {3.771692328660396*^9, 
   3.771692350779047*^9}, {3.771692435092806*^9, 3.771692466505422*^9}, {
   3.771692537906076*^9, 3.771692624393091*^9}, {3.771692775661364*^9, 
   3.771692789217929*^9}, {3.771692830199643*^9, 3.771692844244501*^9}, {
   3.7716929864537773`*^9, 3.771692987704947*^9}, {3.771693176982716*^9, 
   3.771693223617131*^9}, 3.771693304109569*^9, {3.771693405997867*^9, 
   3.771693411843594*^9}, {3.7716934485301933`*^9, 3.771693487163294*^9}, {
   3.771693563974257*^9, 3.771693605802772*^9}, {3.771693686709693*^9, 
   3.7716936883943577`*^9}, {3.771693815631466*^9, 3.771693817772654*^9}, {
   3.7716940022647877`*^9, 3.771694008168648*^9}, {3.771695318872908*^9, 
   3.7716953200695953`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ce916f56-0286-4291-9303-f08a2c807b22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Data persistence", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101697078874*^9}, 3.771101745126054*^9, {
   3.7716033918812017`*^9, 3.7716034128995743`*^9}, {3.7716707627012653`*^9, 
   3.77167077713202*^9}},ExpressionUUID->"31ec80d6-775d-4599-a9dc-\
de5307132f4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DownloadDataNeeded", "[", "city_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"Echo", "[", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<Processing city \>\"", ",", " ", 
         RowBox[{"CityName", "[", "city", "]"}]}], "]"}], "]"}], ";", "\n", 
      "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathTweets", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportTweets", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathMaps", ",", " ", "city"}], "]"}], "]"}]}], 
        ",", " ", 
        RowBox[{"ExportMaps", "[", "city", "]"}], ",", " ", "Nothing"}], 
       "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathSatellites", ",", " ", "city"}], "]"}], 
          "]"}]}], ",", " ", 
        RowBox[{"ExportSatellites", "[", "city", "]"}], ",", " ", "Nothing"}],
        "]"}], ";", "\n", "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"FileExistsQ", "[", 
          RowBox[{"CityDataPath", "[", 
           RowBox[{"constantPathFeatures", ",", " ", "city"}], "]"}], "]"}]}],
         ",", " ", 
        RowBox[{"ExportAllFeatures", "[", "city", "]"}], ",", " ", 
        "Nothing"}], "]"}], ";"}]}], "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7714486731894703`*^9, 3.771448746390979*^9}, {
   3.771454070202355*^9, 3.7714541042189007`*^9}, {3.771454145635871*^9, 
   3.7714541708185663`*^9}, {3.771531491849868*^9, 3.771531493954137*^9}, {
   3.771620391630314*^9, 3.771620417772552*^9}, {3.771620757115899*^9, 
   3.771620807232101*^9}, 3.771673776030848*^9, {3.771674120726346*^9, 
   3.771674129414414*^9}, {3.771683495381939*^9, 3.771683495665181*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   StyleBox[
    RowBox[{"tw", " ", "=", " ", 
     RowBox[{"ServiceConnect", "[", "\"\<Twitter\>\"", "]"}]}], "Code"], 
   StyleBox[";", "Code"], "\n", 
   RowBox[{"ClearSystemCache", "[", "]"}], ";", "\n", 
   RowBox[{"Map", "[", 
    RowBox[{"DownloadDataNeeded", ",", " ", 
     RowBox[{"Drop", "[", 
      RowBox[{"citiesPopular", ",", " ", "70"}], "]"}]}], "]"}], ";"}], 
  "*)"}]], "Code",
 CellChangeTimes->{{3.7714541818692417`*^9, 3.7714541855013533`*^9}, {
  3.771495717530364*^9, 3.7714957234432993`*^9}, {3.771585795840542*^9, 
  3.771585798253406*^9}, {3.7716709064736547`*^9, 3.771670909272904*^9}, {
  3.771674109863604*^9, 3.7716741413335667`*^9}, {3.771690331972289*^9, 
  3.771690337584732*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"],

Cell["\<\
Once we collect the data from Twitter, we want to see how the \
\>", "Text",
 CellChangeTimes->{{3.771250972015732*^9, 3.771250985754189*^9}, {
  3.771251369189413*^9, 
  3.7712513838841467`*^9}},ExpressionUUID->"13349771-2cbd-4640-86e0-\
2a496adaad4a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tweetsPerCity", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ImportTweets", ",", " ", "citiesPopular"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesEstimates", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"EstimateQualityOfLifeWSentiment", ",", " ", "tweetsPerCity"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesCertainties", " ", "=", " ", 
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", "[", "\"\<Value\>\"", "]"}], ")"}], " ", "&"}], ",", " ", 
      RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.77149406487798*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"citiesColors", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RGBColor", "[", 
       RowBox[{"0.2", ",", " ", "0.2", ",", " ", "0.8", ",", " ", "#"}], 
       "]"}], " ", "&"}], ",", " ", "citiesCertainties"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"citiesPositivnessFromTweets", " ", "=", " ", 
   RowBox[{"citiesEstimates", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", " ", "1"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\n", 
 RowBox[{"BarChart", "[", 
  RowBox[{"citiesPositivnessFromTweets", ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Map", "[", 
     RowBox[{"CityName", ",", " ", "citiesPopular"}], "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "citiesColors"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.771105232661023*^9, 3.771105236965727*^9}, 
   3.771105343619289*^9, {3.7711053807205553`*^9, 3.771105391254448*^9}, {
   3.771148444770472*^9, 3.77114848020079*^9}, {3.77114867624708*^9, 
   3.7711487402579947`*^9}, {3.771148883971727*^9, 3.7711489144674997`*^9}, {
   3.771148997447256*^9, 3.7711492080155497`*^9}, {3.771149309499318*^9, 
   3.771149370219907*^9}, {3.771149482508939*^9, 3.771149521955628*^9}, {
   3.771150211561305*^9, 3.77115029995325*^9}, {3.7711505430475483`*^9, 
   3.771150609282713*^9}, {3.771150988266674*^9, 3.771150991458864*^9}, {
   3.771151028119976*^9, 3.771151057770471*^9}, {3.771163302479371*^9, 
   3.7711633359953957`*^9}, {3.7711635116575327`*^9, 
   3.7711635121821203`*^9}, {3.771163678045841*^9, 3.771163682514146*^9}, {
   3.771163773443185*^9, 3.771163774340561*^9}, 3.771198337174004*^9, {
   3.7711984782794237`*^9, 3.771198526204817*^9}, {3.771236837224044*^9, 
   3.771236854482362*^9}, {3.771236898953055*^9, 3.771236899145274*^9}, {
   3.7712369642273407`*^9, 3.771236972069683*^9}, {3.77123711843121*^9, 
   3.771237126588648*^9}, {3.7712372284663773`*^9, 3.7712372657079153`*^9}, {
   3.771237329811762*^9, 3.7712373529329977`*^9}, 3.771237395448209*^9, 
   3.7712509586175137`*^9, {3.771252292119206*^9, 3.7712522972388*^9}, {
   3.771352556865284*^9, 3.771352559235721*^9}, 3.771364499937711*^9, {
   3.771364603202607*^9, 3.7713646056179457`*^9}, {3.771453567368411*^9, 
   3.7714535761202927`*^9}, {3.771453655058641*^9, 3.771453658320343*^9}, {
   3.771453694224032*^9, 3.7714537221911077`*^9}, {3.771453768885117*^9, 
   3.771453825290695*^9}, {3.771494049186705*^9, 3.771494079411756*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],

Cell[BoxData[
 GraphicsBox[{{
    {Opacity[0], PointBox[{{0., -1.5}, {0., 100.5}}]}, {{}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[Opacity[0.]], 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7176754314465787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 0.5}, {0.7094780254912796, 1.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8279510201653612], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 1.5}, {0.6212207674326337, 2.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5858226737572596], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 2.5}, {0.6756641062959441, 3.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7814289899911246], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 3.5}, {0.6271725928863408, 4.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7481383163139589], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 4.5}, {0.6601309524686282, 5.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7692042146215119], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 5.5}, {0.6075730642972501, 6.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7327042772441816], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 6.5}, {0.596770622020753, 7.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8404387158825382], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 7.5}, {0.5771232505198457, 8.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8312557630917399], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 8.5}, {0.6228594834244057, 9.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6260961199901336], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 9.5}, {0.6152352433003037, 10.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5652934326911856], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 10.5}, {0.6421578707973884, 11.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7555854739895107], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 11.5}, {0.6081083005439462, 12.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.672642655021958], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 12.5}, {0.6119525994424226, 13.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6118940931807957], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 13.5}, {0.6258592853246716, 14.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6486521858581383], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 14.5}, {0.6144830048531488, 15.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7684505417702913], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 15.5}, {0.6556192762962432, 16.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8153390503569053], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 16.5}, {0.6560237091036722, 17.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7274560316754648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 17.5}, {0.5904025661158773, 18.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7728082876660456], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 18.5}, {0.6179754290700187, 19.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6742572811121245], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 19.5}, {0.6187137861652968, 20.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5921630768565032], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 20.5}, {0.6692109538724832, 21.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7374151666926428], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 21.5}, {0.645390985328293, 22.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6195342056686642], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 22.5}, {0.5886012686753667, 23.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6725989818973247], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 23.5}, {0.5448160664477556, 24.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7913772216245962], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 24.5}, {0.6354121176869114, 25.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6401448961760818], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 25.5}, {0.6394968932809129, 26.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7184410608116257], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 26.5}, {0.579597980593741, 27.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7542241346663416], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 27.5}, {0.5989295024826079, 28.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7460133050581996], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 28.5}, {0.6619629406513258, 29.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7531623047682412], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 29.5}, {0.5827312202237238, 30.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6692408355294145], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 30.5}, {0.6118390321474525, 31.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742632421619231], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 31.5}, {0.591228890984654, 32.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7929508183457274], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 32.5}, {0.6893609002730704, 33.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7949320958109738], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 33.5}, {0.6194426043074048, 34.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7469149591329476], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 34.5}, {0.6807395187456539, 35.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6836051160749707], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 35.5}, {0.6203486508741834, 36.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8477249347423831], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 36.5}, {0.6064128564217263, 37.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7407656316527769], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 37.5}, {0.6513873815366721, 38.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7352908639700706], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 38.5}, {0.6430268477412946, 39.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7063532001478714], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 39.5}, {0.5822887528259318, 40.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740515442818265], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 40.5}, {0.7181963600080368, 41.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7004134452611186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 41.5}, {0.5933273561474978, 42.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.742482340274929], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 42.5}, {0.6411733052568453, 43.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7477321635209921], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 43.5}, {0.6455747219833612, 44.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7364030307446516], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 44.5}, {0.6427329190005487, 45.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7711372358933629], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 45.5}, {0.7078756726789222, 46.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7767654036241787], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 46.5}, {0.6686434667623472, 47.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.64904303211438], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 47.5}, {0.6033673765841746, 48.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.700770727279793], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 48.5}, {0.6410998023559015, 49.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6190907426891815], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 49.5}, {0.6178391396997895, 50.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6943890910053617], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 50.5}, {0.6042482536796245, 51.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.740609838770277], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 51.5}, {0.6169263018799168, 52.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7581725625908038], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 52.5}, {0.6314432779959939, 53.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8469636685406186], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 53.5}, {0.7693070541839633, 54.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 54.5}, {0.6494507487080535, 55.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6925963047038273], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 55.5}, {0.6915183102232182, 56.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7195621589716865], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 56.5}, {0.668408747790416, 57.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7617675690591228], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 57.5}, {0.6122542954549197, 58.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7876596909353499], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 58.5}, {0.7291236152289445, 59.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7049546378372464], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 59.5}, {0.6037592118143658, 60.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8008400976864876], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 60.5}, {0.665425377890306, 61.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5955252519404673], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 61.5}, {0.5918609488721753, 62.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.785407626612701], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 62.5}, {0.6590054983662713, 63.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7569534814195289], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 63.5}, {0.5732692378453028, 64.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7755731169205828], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 64.5}, {0.7226632958240885, 65.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7455556063723131], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 65.5}, {0.6442027645871149, 66.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6825007689146033], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 66.5}, {0.7552147912593619, 67.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7498187964692874], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 67.5}, {0.6731402126966803, 68.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7989882431141833], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 68.5}, {0.6688696022390684, 69.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7704104618124417], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 69.5}, {0.6099620245815766, 70.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7456155941250098], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 70.5}, {0.7208262198633335, 71.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6472504473406332], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 71.5}, {0.7308789359809917, 72.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6324738586128064], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 72.5}, {0.7473671856270511, 73.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7299857772669577], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 73.5}, {0.6341843233597266, 74.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6015452509722727], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 74.5}, {0.7126700149778475, 75.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6595532891969377], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 75.5}, {0.6672353553106399, 76.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6351817346421648], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 76.5}, {0.7139325409556403, 77.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7017515750446992], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 77.5}, {0.6299217123238716, 78.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7515518834107192], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 78.5}, {0.5876020259044288, 79.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7215243102595766], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 79.5}, {0.6122906910805411, 80.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.734098908056747], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 80.5}, {0.6190112425319902, 81.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.759992249665873], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 81.5}, {0.6606208248101461, 82.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8731319695294444], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 82.5}, {0.722870721151543, 83.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7625087537129647], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 83.5}, {0.6755916260057354, 84.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7206750226099803], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 84.5}, {0.6643699915041464, 85.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.95], EdgeForm[Opacity[0.]], 
       RectangleBox[{0., 85.5}, {0.5237996092979674, 86.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.8117160663836445], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 86.5}, {0.6221696104079373, 87.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7320533133145954], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 87.5}, {0.6200590250592407, 88.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.776464122562469], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 88.5}, {0.6357645924191135, 89.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6182973242042902], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 89.5}, {0.6143173468333734, 90.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7292569783728212], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 90.5}, {0.65166268538485, 91.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6713750940951166], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 91.5}, {0.6729218411962753, 92.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6349591384084473], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 92.5}, {0.616087851021887, 93.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.7289144007390973], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 93.5}, {0.6880512175065494, 94.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.5487575926839616], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 94.5}, {0.7254583695530306, 95.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6312680449376111], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 95.5}, {0.5697888833456759, 96.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.653432779770862], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 96.5}, {0.6158174798109485, 97.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6876826203094999], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 97.5}, {0.6150705800784589, 98.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.715921450091501], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 98.5}, {0.6161860342693534, 99.5},
        RoundingRadius->0]}, 
      {RGBColor[0.2, 0.2, 0.8], Opacity[0.6448723365833492], EdgeForm[Opacity[
       0.]], RectangleBox[{0., 99.5}, {0.6575215137668566, 100.5},
        RoundingRadius->0]}}, {}, {}}, {}, {}, {}, {}, 
    StyleBox[
     StyleBox[{
       {Thickness[Tiny], LineBox[{{0., -1.5}, {0., 102.54}}], 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, 
       StyleBox[{
         {Thickness[Tiny], LineBox[{{0., 0.5}, Offset[{-6., 0.}, {0., 0.5}]}],
           LineBox[{{0., 100.5}, 
            Offset[{-6., 0.}, {0., 
             100.5}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 1.5}, Offset[{-4., 0.}, {0., 1.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 2.5}, Offset[{-4., 0.}, {0., 2.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 3.5}, Offset[{-4., 0.}, {0., 3.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 4.5}, Offset[{-4., 0.}, {0., 4.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 5.5}, Offset[{-4., 0.}, {0., 5.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 6.5}, Offset[{-4., 0.}, {0., 6.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 7.5}, Offset[{-4., 0.}, {0., 7.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 8.5}, Offset[{-4., 0.}, {0., 8.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 9.5}, Offset[{-4., 0.}, {0., 9.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 10.5}, Offset[{-4., 0.}, {0., 10.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 11.5}, Offset[{-4., 0.}, {0., 11.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 12.5}, Offset[{-4., 0.}, {0., 12.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 13.5}, Offset[{-4., 0.}, {0., 13.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 14.5}, Offset[{-4., 0.}, {0., 14.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 15.5}, Offset[{-4., 0.}, {0., 15.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 16.5}, Offset[{-4., 0.}, {0., 16.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 17.5}, Offset[{-4., 0.}, {0., 17.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 18.5}, Offset[{-4., 0.}, {0., 18.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 19.5}, Offset[{-4., 0.}, {0., 19.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 20.5}, Offset[{-4., 0.}, {0., 20.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 21.5}, Offset[{-4., 0.}, {0., 21.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 22.5}, Offset[{-4., 0.}, {0., 22.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 23.5}, Offset[{-4., 0.}, {0., 23.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 24.5}, Offset[{-4., 0.}, {0., 24.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 25.5}, Offset[{-4., 0.}, {0., 25.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 26.5}, Offset[{-4., 0.}, {0., 26.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 27.5}, Offset[{-4., 0.}, {0., 27.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 28.5}, Offset[{-4., 0.}, {0., 28.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 29.5}, Offset[{-4., 0.}, {0., 29.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 30.5}, Offset[{-4., 0.}, {0., 30.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 31.5}, Offset[{-4., 0.}, {0., 31.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 32.5}, Offset[{-4., 0.}, {0., 32.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 33.5}, Offset[{-4., 0.}, {0., 33.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 34.5}, Offset[{-4., 0.}, {0., 34.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 35.5}, Offset[{-4., 0.}, {0., 35.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 36.5}, Offset[{-4., 0.}, {0., 36.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 37.5}, Offset[{-4., 0.}, {0., 37.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 38.5}, Offset[{-4., 0.}, {0., 38.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 39.5}, Offset[{-4., 0.}, {0., 39.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 40.5}, Offset[{-4., 0.}, {0., 40.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 41.5}, Offset[{-4., 0.}, {0., 41.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 42.5}, Offset[{-4., 0.}, {0., 42.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 43.5}, Offset[{-4., 0.}, {0., 43.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 44.5}, Offset[{-4., 0.}, {0., 44.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 45.5}, Offset[{-4., 0.}, {0., 45.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 46.5}, Offset[{-4., 0.}, {0., 46.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 47.5}, Offset[{-4., 0.}, {0., 47.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 48.5}, Offset[{-4., 0.}, {0., 48.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 49.5}, Offset[{-4., 0.}, {0., 49.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 50.5}, Offset[{-4., 0.}, {0., 50.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 51.5}, Offset[{-4., 0.}, {0., 51.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 52.5}, Offset[{-4., 0.}, {0., 52.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 53.5}, Offset[{-4., 0.}, {0., 53.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 54.5}, Offset[{-4., 0.}, {0., 54.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 55.5}, Offset[{-4., 0.}, {0., 55.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 56.5}, Offset[{-4., 0.}, {0., 56.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 57.5}, Offset[{-4., 0.}, {0., 57.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 58.5}, Offset[{-4., 0.}, {0., 58.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 59.5}, Offset[{-4., 0.}, {0., 59.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 60.5}, Offset[{-4., 0.}, {0., 60.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 61.5}, Offset[{-4., 0.}, {0., 61.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 62.5}, Offset[{-4., 0.}, {0., 62.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 63.5}, Offset[{-4., 0.}, {0., 63.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 64.5}, Offset[{-4., 0.}, {0., 64.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 65.5}, Offset[{-4., 0.}, {0., 65.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 66.5}, Offset[{-4., 0.}, {0., 66.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 67.5}, Offset[{-4., 0.}, {0., 67.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 68.5}, Offset[{-4., 0.}, {0., 68.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 69.5}, Offset[{-4., 0.}, {0., 69.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 70.5}, Offset[{-4., 0.}, {0., 70.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 71.5}, Offset[{-4., 0.}, {0., 71.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 72.5}, Offset[{-4., 0.}, {0., 72.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 73.5}, Offset[{-4., 0.}, {0., 73.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 74.5}, Offset[{-4., 0.}, {0., 74.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 75.5}, Offset[{-4., 0.}, {0., 75.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 76.5}, Offset[{-4., 0.}, {0., 76.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 77.5}, Offset[{-4., 0.}, {0., 77.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 78.5}, Offset[{-4., 0.}, {0., 78.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 79.5}, Offset[{-4., 0.}, {0., 79.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 80.5}, Offset[{-4., 0.}, {0., 80.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 81.5}, Offset[{-4., 0.}, {0., 81.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 82.5}, Offset[{-4., 0.}, {0., 82.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 83.5}, Offset[{-4., 0.}, {0., 83.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 84.5}, Offset[{-4., 0.}, {0., 84.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 85.5}, Offset[{-4., 0.}, {0., 85.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 86.5}, Offset[{-4., 0.}, {0., 86.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 87.5}, Offset[{-4., 0.}, {0., 87.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 88.5}, Offset[{-4., 0.}, {0., 88.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 89.5}, Offset[{-4., 0.}, {0., 89.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 90.5}, Offset[{-4., 0.}, {0., 90.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 91.5}, Offset[{-4., 0.}, {0., 91.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 92.5}, Offset[{-4., 0.}, {0., 92.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 93.5}, Offset[{-4., 0.}, {0., 93.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 94.5}, Offset[{-4., 0.}, {0., 94.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 95.5}, Offset[{-4., 0.}, {0., 95.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 96.5}, Offset[{-4., 0.}, {0., 96.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 97.5}, Offset[{-4., 0.}, {0., 97.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 98.5}, Offset[{-4., 0.}, {0., 98.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}], 
            LineBox[{{0., 99.5}, Offset[{-4., 0.}, {0., 99.5}]}]}, {}}}, 
         StyleBox[
          {Thickness[Tiny], 
           InsetBox["\<\"Vienna\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zurich\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Munich\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Auckland\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vancouver\"\>", Offset[{-2, 0}, {0., 5.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"D\[UDoubleDot]sseldorf\"\>", 
            Offset[{-2, 0}, {0., 6.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Frankfurt\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Geneva\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Copenhagen\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Basel\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Sydney\"\>", Offset[{-2, 0}, {0., 11.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Amsterdam\"\>", Offset[{-2, 0}, {0., 12.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Berlin\"\>", Offset[{-2, 0}, {0., 13.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bern\"\>", Offset[{-2, 0}, {0., 14.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wellington\"\>", Offset[{-2, 0}, {0., 15.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Toronto\"\>", Offset[{-2, 0}, {0., 16.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Melbourne\"\>", Offset[{-2, 0}, {0., 17.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Luxemburg\"\>", Offset[{-2, 0}, {0., 18.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ottawa\"\>", Offset[{-2, 0}, {0., 19.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Hamburg\"\>", Offset[{-2, 0}, {0., 20.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Perth\"\>", Offset[{-2, 0}, {0., 21.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montreal\"\>", Offset[{-2, 0}, {0., 22.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stockholm\"\>", Offset[{-2, 0}, {0., 23.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Nuremberg\"\>", Offset[{-2, 0}, {0., 24.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Singapore\"\>", Offset[{-2, 0}, {0., 25.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Oslo\"\>", Offset[{-2, 0}, {0., 26.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brussels\"\>", Offset[{-2, 0}, {0., 27.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Stuttgart\"\>", Offset[{-2, 0}, {0., 28.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Adelaide\"\>", Offset[{-2, 0}, {0., 29.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"San Francisco\"\>", Offset[{-2, 0}, {0., 30.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Canberra\"\>", Offset[{-2, 0}, {0., 31.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Helsinki\"\>", Offset[{-2, 0}, {0., 32.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Calgary\"\>", Offset[{-2, 0}, {0., 33.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dublin\"\>", Offset[{-2, 0}, {0., 34.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Boston\"\>", Offset[{-2, 0}, {0., 35.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Honolulu\"\>", Offset[{-2, 0}, {0., 36.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Brisbane\"\>", Offset[{-2, 0}, {0., 37.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lisbon\"\>", Offset[{-2, 0}, {0., 38.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Paris\"\>", Offset[{-2, 0}, {0., 39.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Lyon\"\>", Offset[{-2, 0}, {0., 40.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"London\"\>", Offset[{-2, 0}, {0., 41.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Milan\"\>", Offset[{-2, 0}, {0., 42.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Barcelona\"\>", Offset[{-2, 0}, {0., 43.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seattle\"\>", Offset[{-2, 0}, {0., 44.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"New York City\"\>", Offset[{-2, 0}, {0., 45.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Edinburgh\"\>", Offset[{-2, 0}, {0., 46.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Chicago\"\>", Offset[{-2, 0}, {0., 47.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Washington\"\>", Offset[{-2, 0}, {0., 48.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Madrid\"\>", Offset[{-2, 0}, {0., 49.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tokyo\"\>", Offset[{-2, 0}, {0., 50.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Kobe\"\>", Offset[{-2, 0}, {0., 51.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Birmingham\"\>", Offset[{-2, 0}, {0., 52.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Glasgow\"\>", Offset[{-2, 0}, {0., 53.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Philadelphia\"\>", Offset[{-2, 0}, {0., 54.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Yokohama\"\>", Offset[{-2, 0}, {0., 55.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Rome\"\>", Offset[{-2, 0}, {0., 56.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Aberdeen\"\>", Offset[{-2, 0}, {0., 57.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Osaka\"\>", Offset[{-2, 0}, {0., 58.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Pittsburgh\"\>", Offset[{-2, 0}, {0., 59.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Leipzig\"\>", Offset[{-2, 0}, {0., 60.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Minneapolis\"\>", Offset[{-2, 0}, {0., 61.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Nagoya\"\>", Offset[{-2, 0}, {0., 62.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dallas\"\>", Offset[{-2, 0}, {0., 63.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Belfast\"\>", Offset[{-2, 0}, {0., 64.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Atlanta\"\>", Offset[{-2, 0}, {0., 65.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Houston\"\>", Offset[{-2, 0}, {0., 66.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Los Angeles\"\>", Offset[{-2, 0}, {0., 67.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Miami\"\>", Offset[{-2, 0}, {0., 68.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Prague\"\>", Offset[{-2, 0}, {0., 69.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Saint Louis\"\>", Offset[{-2, 0}, {0., 70.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Hong Kong\"\>", Offset[{-2, 0}, {0., 71.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Point\[Hyphen]a\[Hyphen]Pitre\"\>", 
            Offset[{-2, 0}, {0., 72.}], {1, 0}, Automatic, {1, 0}], 
           InsetBox["\<\"Detroit\"\>", Offset[{-2, 0}, {0., 73.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Ljubljana\"\>", Offset[{-2, 0}, {0., 74.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Dubai\"\>", Offset[{-2, 0}, {0., 75.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Budapest\"\>", Offset[{-2, 0}, {0., 76.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Seoul\"\>", Offset[{-2, 0}, {0., 77.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Abu Dhabi\"\>", Offset[{-2, 0}, {0., 78.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Montevideo\"\>", Offset[{-2, 0}, {0., 79.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Bratislava\"\>", Offset[{-2, 0}, {0., 80.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Vilnius\"\>", Offset[{-2, 0}, {0., 81.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Warsaw\"\>", Offset[{-2, 0}, {0., 82.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Port Louis\"\>", Offset[{-2, 0}, {0., 83.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Taipei City\"\>", Offset[{-2, 0}, {0., 84.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Kuala Lumpur\"\>", Offset[{-2, 0}, {0., 85.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Lemesos\"\>", Offset[{-2, 0}, {0., 86.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Tallinn\"\>", Offset[{-2, 0}, {0., 87.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Durban\"\>", Offset[{-2, 0}, {0., 88.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Athens\"\>", Offset[{-2, 0}, {0., 89.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Riga\"\>", Offset[{-2, 0}, {0., 90.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Buenos Aires\"\>", Offset[{-2, 0}, {0., 91.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"San Juan\"\>", Offset[{-2, 0}, {0., 92.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Santiago\"\>", Offset[{-2, 0}, {0., 93.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Busan\"\>", Offset[{-2, 0}, {0., 94.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Cape Town\"\>", Offset[{-2, 0}, {0., 95.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Johannesburg\"\>", Offset[{-2, 0}, {0., 96.}], {1, 0},
             Automatic, {1, 0}], 
           InsetBox["\<\"Panama\"\>", Offset[{-2, 0}, {0., 97.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Zagreb\"\>", Offset[{-2, 0}, {0., 98.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Victoria\"\>", Offset[{-2, 0}, {0., 99.}], {1, 0}, 
            Automatic, {1, 0}], 
           InsetBox["\<\"Wroc\[LSlash]aw\"\>", Offset[{-2, 0}, {0., 100.}], {1, 0},
             Automatic, {1, 0}]}, "GraphicsLabel",
          StripOnInput->False]}, "GraphicsTicks",
        StripOnInput->False]},
      Antialiasing->False], "GraphicsAxes",
     StripOnInput->False]}, {
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6931560262371375, 1.}, {0.7094780254912796, 1.}}], 
        LineBox[{{0.7094780254912796, 1.}, {0.7258000247454217, 1.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607094289536996, 2.}, {0.6212207674326335, 2.}}], 
        LineBox[{{0.6212207674326335, 2.}, {0.6353472453282714, 2.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6626990001926303, 3.}, {0.6756641062959439, 3.}}], 
        LineBox[{{0.6756641062959439, 3.}, {0.6886292123992575, 3.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.611925978309487, 4.}, {0.6271725928863408, 4.}}], 
        LineBox[{{0.6271725928863408, 4.}, {0.6424192074631945, 4.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6460870639090937, 5.}, {0.6601309524686281, 5.}}], 
        LineBox[{{0.6601309524686281, 5.}, {0.6741748410281625, 5.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962777591805315, 6.}, {0.6075730642972506, 6.}}], 
        LineBox[{{0.6075730642972506, 6.}, {0.6188683694139696, 6.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5823675022695207, 7.}, {0.5967706220207534, 7.}}], 
        LineBox[{{0.5967706220207534, 7.}, {0.611173741771986, 7.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5663558216809923, 8.}, {0.577123250519846, 8.}}], 
        LineBox[{{0.577123250519846, 8.}, {0.5878906793586998, 8.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.609306240623761, 9.}, {0.6228594834244063, 9.}}], 
        LineBox[{{0.6228594834244063, 9.}, {0.6364127262250516, 9.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.602589516913655, 10.}, {0.6152352433003045, 10.}}], 
        LineBox[{{0.6152352433003045, 10.}, {0.6278809696869541, 10.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6243519348133741, 11.}, {0.642157870797389, 11.}}], 
        LineBox[{{0.642157870797389, 11.}, {0.6599638067814038, 11.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5962786054454714, 12.}, {0.6081083005439467, 12.}}], 
        LineBox[{{0.6081083005439467, 12.}, {0.619937995642422, 12.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5973894087981311, 13.}, {0.6119525994424233, 13.}}], 
        LineBox[{{0.6119525994424233, 13.}, {0.6265157900867155, 13.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6107708292821119, 14.}, {0.6258592853246725, 14.}}], 
        LineBox[{{0.6258592853246725, 14.}, {0.6409477413672331, 14.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6003538775350705, 15.}, {0.6144830048531489, 15.}}], 
        LineBox[{{0.6144830048531489, 15.}, {0.6286121321712272, 15.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6383251182735634, 16.}, {0.6556192762962425, 16.}}], 
        LineBox[{{0.6556192762962425, 16.}, {0.6729134343189216, 16.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6402367918194223, 17.}, {0.6560237091036711, 17.}}], 
        LineBox[{{0.6560237091036711, 17.}, {0.67181062638792, 17.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5792577349766397, 18.}, {0.5904025661158769, 18.}}], 
        LineBox[{{0.5904025661158769, 18.}, {0.6015473972551142, 18.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6029986181541211, 19.}, {0.6179754290700181, 19.}}], 
        LineBox[{{0.6179754290700181, 19.}, {0.6329522399859151, 19.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.607561314375463, 20.}, {0.6187137861652978, 20.}}], 
        LineBox[{{0.6187137861652978, 20.}, {0.6298662579551326, 20.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6525039814250775, 21.}, {0.6692109538724829, 21.}}], 
        LineBox[{{0.6692109538724829, 21.}, {0.6859179263198882, 21.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6323408491114471, 22.}, {0.6453909853282944, 22.}}], 
        LineBox[{{0.6453909853282944, 22.}, {0.6584411215451418, 22.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5732056294699852, 23.}, {0.5886012686753652, 23.}}], 
        LineBox[{{0.5886012686753652, 23.}, {0.6039969078807452, 23.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5329560968633658, 24.}, {0.5448160664477548, 24.}}], 
        LineBox[{{0.5448160664477548, 24.}, {0.5566760360321439, 24.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6151323036093927, 25.}, {0.6354121176869114, 25.}}], 
        LineBox[{{0.6354121176869114, 25.}, {0.6556919317644301, 25.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6270185786480234, 26.}, {0.6394968932809135, 26.}}], 
        LineBox[{{0.6394968932809135, 26.}, {0.6519752079138037, 26.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5609547623451583, 27.}, {0.5795979805937392, 27.}}], 
        LineBox[{{0.5795979805937392, 27.}, {0.5982411988423202, 27.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5870883811481669, 28.}, {0.5989295024826085, 28.}}], 
        LineBox[{{0.5989295024826085, 28.}, {0.61077062381705, 28.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6438315328996005, 29.}, {0.6619629406513248, 29.}}], 
        LineBox[{{0.6619629406513248, 29.}, {0.680094348403049, 29.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.572425284795667, 30.}, {0.5827312202237245, 30.}}], 
        LineBox[{{0.5827312202237245, 30.}, {0.5930371556517819, 30.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997928165660724, 31.}, {0.6118390321474507, 31.}}], 
        LineBox[{{0.6118390321474507, 31.}, {0.623885247728829, 31.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5791223061268234, 32.}, {0.5912288909846524, 32.}}], 
        LineBox[{{0.5912288909846524, 32.}, {0.6033354758424849, 32.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6732903202081246, 33.}, {0.6893609002730727, 33.}}], 
        LineBox[{{0.6893609002730727, 33.}, {0.7054314803380208, 33.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6043150315818124, 34.}, {0.6194426043074017, 34.}}], 
        LineBox[{{0.6194426043074017, 34.}, {0.634570177032991, 34.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6648449502564873, 35.}, {0.6807395187456535, 35.}}], 
        LineBox[{{0.6807395187456535, 35.}, {0.6966340872348198, 35.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6079208557048972, 36.}, {0.6203486508741847, 36.}}], 
        LineBox[{{0.6203486508741847, 36.}, {0.6327764460434722, 36.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5922896194692697, 37.}, {0.606412856421727, 37.}}], 
        LineBox[{{0.606412856421727, 37.}, {0.6205360933741844, 37.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6377319288732863, 38.}, {0.6513873815366722, 38.}}], 
        LineBox[{{0.6513873815366722, 38.}, {0.665042834200058, 38.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6293688606094037, 39.}, {0.6430268477412966, 39.}}], 
        LineBox[{{0.6430268477412966, 39.}, {0.6566848348731895, 39.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5714504588434224, 40.}, {0.5822887528259315, 40.}}], 
        LineBox[{{0.5822887528259315, 40.}, {0.5931270468084406, 40.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7010851947862093, 41.}, {0.7181963600080365, 41.}}], 
        LineBox[{{0.7181963600080365, 41.}, {0.7353075252298638, 41.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5815781739533534, 42.}, {0.5933273561474977, 42.}}], 
        LineBox[{{0.5933273561474977, 42.}, {0.6050765383416419, 42.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6271108959506861, 43.}, {0.6411733052568422, 43.}}], 
        LineBox[{{0.6411733052568422, 43.}, {0.6552357145629983, 43.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6299308561489241, 44.}, {0.6455747219833583, 44.}}], 
        LineBox[{{0.6455747219833583, 44.}, {0.6612185878177925, 44.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6292783323557103, 45.}, {0.6427329190005509, 45.}}], 
        LineBox[{{0.6427329190005509, 45.}, {0.6561875056453914, 45.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6927886940793755, 46.}, {0.7078756726789237, 46.}}], 
        LineBox[{{0.7078756726789237, 46.}, {0.7229626512784719, 46.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.651774791587421, 47.}, {0.6686434667623473, 47.}}], 
        LineBox[{{0.6686434667623473, 47.}, {0.6855121419372736, 47.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5933338838894073, 48.}, {0.603367376584174, 48.}}], 
        LineBox[{{0.603367376584174, 48.}, {0.6134008692789408, 48.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6284559513894123, 49.}, {0.6410998023559031, 49.}}], 
        LineBox[{{0.6410998023559031, 49.}, {0.6537436533223939, 49.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6048896989249286, 50.}, {0.6178391396997895, 50.}}], 
        LineBox[{{0.6178391396997895, 50.}, {0.6307885804746505, 50.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5896378073164854, 51.}, {0.6042482536796214, 51.}}], 
        LineBox[{{0.6042482536796214, 51.}, {0.6188587000427574, 51.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997231691138012, 52.}, {0.6169263018799143, 52.}}], 
        LineBox[{{0.6169263018799143, 52.}, {0.6341294346460273, 52.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.617183207082185, 53.}, {0.6314432779959915, 53.}}], 
        LineBox[{{0.6314432779959915, 53.}, {0.6457033489097981, 53.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7522961627444431, 54.}, {0.7693070541839617, 54.}}], 
        LineBox[{{0.7693070541839617, 54.}, {0.7863179456234803, 54.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6394597468001137, 55.}, {0.6494507487080554, 55.}}], 
        LineBox[{{0.6494507487080554, 55.}, {0.6594417506159971, 55.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.673977709853304, 56.}, {0.6915183102232163, 56.}}], 
        LineBox[{{0.6915183102232163, 56.}, {0.7090589105931286, 56.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6531908043624526, 57.}, {0.6684087477904157, 57.}}], 
        LineBox[{{0.6684087477904157, 57.}, {0.6836266912183788, 57.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5997613166035691, 58.}, {0.6122542954549175, 58.}}], 
        LineBox[{{0.6122542954549175, 58.}, {0.6247472743062659, 58.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.714377631184874, 59.}, {0.7291236152289429, 59.}}], 
        LineBox[{{0.7291236152289429, 59.}, {0.7438695992730118, 59.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5925146944734934, 60.}, {0.6037592118143635, 60.}}], 
        LineBox[{{0.6037592118143635, 60.}, {0.6150037291552337, 60.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6497570523106688, 61.}, {0.6654253778903083, 61.}}], 
        LineBox[{{0.6654253778903083, 61.}, {0.6810937034699478, 61.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5816489707111003, 62.}, {0.5918609488721742, 62.}}], 
        LineBox[{{0.5918609488721742, 62.}, {0.6020729270332481, 62.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6422076264530645, 63.}, {0.6590054983662696, 63.}}], 
        LineBox[{{0.6590054983662696, 63.}, {0.6758033702794748, 63.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5560470449513986, 63.99999999999999}, {0.5732692378453024,
          63.99999999999999}}], 
        LineBox[{{0.5732692378453024, 63.99999999999999}, {0.5904914307391991,
          63.99999999999999}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7065082158336509, 65.}, {0.7226632958240913, 65.}}], 
        LineBox[{{0.7226632958240913, 65.}, {0.7388183758145317, 65.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6286383699081171, 66.}, {0.6442027645871207, 66.}}], 
        LineBox[{{0.6442027645871207, 66.}, {0.6597671592661243, 66.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7413000728510326, 67.}, {0.7552147912593625, 67.}}], 
        LineBox[{{0.7552147912593625, 67.}, {0.7691295096676924, 67.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6551862255091407, 68.}, {0.6731402126966799, 68.}}], 
        LineBox[{{0.6731402126966799, 68.}, {0.691094199884219, 68.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6463920133120951, 69.}, {0.6688696022390701, 69.}}], 
        LineBox[{{0.6688696022390701, 69.}, {0.6913471911660451, 69.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5968182929156427, 70.}, {0.6099620245815771, 70.}}], 
        LineBox[{{0.6099620245815771, 70.}, {0.6231057562475115, 70.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7046769634126235, 71.}, {0.7208262198633406, 71.}}], 
        LineBox[{{0.7208262198633406, 71.}, {0.7369754763140577, 71.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6977079224091227, 72.}, {0.7308789359809964, 72.}}], 
        LineBox[{{0.7308789359809964, 72.}, {0.7640499495528701, 72.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7333973890230396, 73.}, {0.7473671856270556, 73.}}], 
        LineBox[{{0.7473671856270556, 73.}, {0.7613369822310716, 73.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6218319786978981, 74.}, {0.6341843233597331, 74.}}], 
        LineBox[{{0.6341843233597331, 74.}, {0.6465366680215681, 74.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6985158103175308, 75.}, {0.7126700149778458, 75.}}], 
        LineBox[{{0.7126700149778458, 75.}, {0.7268242196381607, 75.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6526980686446393, 76.}, {0.6672353553106376, 76.}}], 
        LineBox[{{0.6672353553106376, 76.}, {0.6817726419766359, 76.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.697828385657786, 77.}, {0.7139325409556392, 77.}}], 
        LineBox[{{0.7139325409556392, 77.}, {0.7300366962534923, 77.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6161548514941018, 78.}, {0.6299217123238776, 78.}}], 
        LineBox[{{0.6299217123238776, 78.}, {0.6436885731536535, 78.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5769676913913457, 79.}, {0.587602025904431, 79.}}], 
        LineBox[{{0.587602025904431, 79.}, {0.5982363604175163, 79.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6000718332992534, 80.}, {0.6122906910805455, 80.}}], 
        LineBox[{{0.6122906910805455, 80.}, {0.6245095488618375, 80.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6072573886117851, 81.}, {0.6190112425319967, 81.}}], 
        LineBox[{{0.6190112425319967, 81.}, {0.6307650964522082, 81.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6417502598538931, 82.}, {0.6606208248101524, 82.}}], 
        LineBox[{{0.6606208248101524, 82.}, {0.6794913897664117, 82.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7063442694693549, 83.}, {0.722870721151537, 83.}}], 
        LineBox[{{0.722870721151537, 83.}, {0.7393971728337192, 83.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6588306323458539, 84.}, {0.6755916260057404, 84.}}], 
        LineBox[{{0.6755916260057404, 84.}, {0.6923526196656269, 84.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6500478008457975, 85.}, {0.6643699915041452, 85.}}], 
        LineBox[{{0.6643699915041452, 85.}, {0.6786921821624929, 85.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5202163656607297, 86.}, {0.5237996092979671, 86.}}], 
        LineBox[{{0.5237996092979671, 86.}, {0.5273828529352045, 86.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6067654704210526, 87.}, {0.6221696104079371, 87.}}], 
        LineBox[{{0.6221696104079371, 87.}, {0.6375737503948216, 87.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6011939060913676, 88.}, {0.6200590250592342, 88.}}], 
        LineBox[{{0.6200590250592342, 88.}, {0.6389241440271007, 88.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6204098559094007, 89.}, {0.6357645924191075, 89.}}], 
        LineBox[{{0.6357645924191075, 89.}, {0.6511193289288144, 89.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6015694747329121, 90.}, {0.6143173468333742, 90.}}], 
        LineBox[{{0.6143173468333742, 90.}, {0.6270652189338364, 90.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6387277043256177, 91.}, {0.6516626853848493, 91.}}], 
        LineBox[{{0.6516626853848493, 91.}, {0.6645976664440809, 91.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6604144565054071, 92.}, {0.6729218411962705, 92.}}], 
        LineBox[{{0.6729218411962705, 92.}, {0.685429225887134, 92.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6045387278791168, 93.}, {0.6160878510218879, 93.}}], 
        LineBox[{{0.6160878510218879, 93.}, {0.627636974164659, 93.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6684423853504313, 94.}, {0.6880512175065547, 94.}}], 
        LineBox[{{0.6880512175065547, 94.}, {0.7076600496626781, 94.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.7128052088890229, 95.}, {0.7254583695530243, 95.}}], 
        LineBox[{{0.7254583695530243, 95.}, {0.7381115302170258, 95.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.5590620488308247, 96.}, {0.5697888833456801, 96.}}], 
        LineBox[{{0.5697888833456801, 96.}, {0.5805157178605356, 96.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6051117211993216, 97.}, {0.6158174798109428, 97.}}], 
        LineBox[{{0.6158174798109428, 97.}, {0.6265232384225641, 97.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6024952581233975, 98.}, {0.6150705800784522, 98.}}], 
        LineBox[{{0.6150705800784522, 98.}, {0.6276459020335068, 98.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6004694940719304, 99.}, {0.6161860342693473, 99.}}], 
        LineBox[{{0.6161860342693473, 99.}, {0.6319025744667641, 99.}}]}},
      Antialiasing->False]}, 
    {GrayLevel[0], 
     StyleBox[{{}, {
        LineBox[{{0.6456382017611304, 100.}, {0.6575215137668522, 100.}}], 
        LineBox[{{0.6575215137668522, 100.}, {0.669404825772574, 100.}}]}},
      Antialiasing->False]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -1.5},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{597.9642859438488, Automatic},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.7714538701095057`*^9, 3.771494004367584*^9, {3.7714940668059607`*^9, 
   3.7714940808827353`*^9}, 3.771494470980624*^9, 3.771670999214221*^9, 
   3.771690382504343*^9, 3.771703748413437*^9, 3.771709022107864*^9},
 CellLabel->"Out[67]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzU3Xe4ZVWVLvzt2ZVRshjIORpau+/t2337tt1qowiSU5GDiIBQJElV5CCo
iDmDbcCAiAoqUEBRREUkVY5kJAmmtrVV1jd+Y62xzz4F3X2/779vP8+aZ5+1
V5jzne8IM425w0EnHP6e9x90wvsOOWiDbY87aNrh7zvk+A3+5Zjj4lT/Zb3e
yB693sv23qDne9PrVTL62UsyfOb/+sQ/+DPSvPDCCxPzRL/585//XNf0TujO
xc+DczNe4rr/23PjX+Lcym1G/nf+eXnzk5/8pLnwwgubiy66qJk7d25ec8st
tzTf/OY38/uDDz7YXHLJJc0FF1zQ3HDDDW0OX9HcdNNNzQc/+MHmIx/5SF7i
86Mf/ai57rrrmoULFzbnn39+86EPfShvO/fcc5s777yzd1zeO6n5y1/+0vzg
Bz/I+z/+8Y83Tz31VN7vlbfffnu/y/Q111zT/PznP8//jute+x//8R/Nt771
rXzsZz7zmebXv/513nrZZZc1999/f36/7bbbskSydu+99/aO7+79/e9/33zl
K1/Je13/hz/8IZ/nOcuXLx88u+6N5xVYf98hJ6ennnpqZgtIZ511VvOb3/wm
b7/nnnvyER6vdAsWLGhOO+20ZsmSJcd1t7vs5JNPbubNm5dgAeCPf/xjXgq0
p59+unn/+9/ffOlLX8r/58yZ0zzzzDN1uzfMmDGjWbp0afONb3yj+dSnPpVY
Oq8OfvWrXzVPPvlk84tf/CIL8O1vf7v593//97p99uzZzdlnn52XfuELX2i+
/OUvJ14//elP85aHHnqo+cAHPpA4OudVQ2///ve/nzXq9o997GPNVVddlTyN
Gss3//jHP87Hewxs4BS3v2IYwQnNHXfckVSrzxlnnNE88MADI93Pjz76aHPm
mWcmqFWvV1xxxXHdz0BTXT6AO+mkk5qHH364GAMvr42SdqI0IUt55ZVX5i3P
P/98c+KJJza//OUv64Wf//zns5bgdeyxx+YTo3rqhZ/4xCeamTNn5t3xoqy9
4FHd/b3vfa/59Kc/PSgNpgfl6m5UuPvuu/OnKGQWNkRx+N1QrNJ0dbsCYtde
e+2gzD7qICheD8ETr42Kzp9l6dJLL60sIPTll1+eP+GKGgqYxnWILVq0KOv8
hz/8YScnE7JAVWYyA55HHnmkXnjrrbfmC4Hp0quvvrr505/+dGz+PDEp8eEP
fzgZ5BMUyCc8++yzvXrE17/+9UTy8ccfT1mYNm0aWtUjYHHOOedk0XyIDej+
7d/+bfAInHdObjzuk5/8pMyugB1OkpL6EO3g6zB2AFFKHzwJxhV29NFXv/rV
AXbeFyqylOqyZcuSTVFlvbrFy6jAwu6UU07B6Zag41Kw6YaoIBAfN4QZoQgl
mXfSA+4MnnYFHt985zvfSVA++tGPpoRE0Xp1P8Ccmz9/ft5PQZx++ulyMLj/
t7/9bRbAdccddxztOla7TWjuuuuuhMOHJps+fTqCFFp0BOmSOx+QB2+q6ChD
inyoZZIUt9TdwaCURQ/2wZGgdt2tDkshPfbYY3l3KIECzgNJ0wknnMD0FFU/
+9nPNt/97nfzLoUnQfGCeic1RFUFcfCv+dnPfgaHYaqCnS3zoZvYrTg/4Bka
w8GH1kflgHsFnv3ud7/L7GGMOr744ouZl3oI8tBktAk1CsUwJVX25557LquG
6AL1c5/7nFvqboLmDg/G0OOPP14NH9dVLLTkim5UmsjDwO4TroMOOqi58cYb
O/Een6T3OHoFoYh+v3sVtcumqQ2m0nPjXL0KfiDGcH8D38GthFTtKAQaUFlR
iA6o/93VI/NEJbkqij2uO01U6BFWLRTBCd1pGpfyiiyCuK5GRED4KUpTVyvY
1772NV6KKprQYYAEixcvzv+O7y5l4ki230J31YMxG53kMHRTIYYneOAOf6NY
vbqF6fZSWQxqdRLVDD7/3z3F/9nlH/XDpqQ7Mkk6wpas9//mW2camSD/rfvf
nIPO/1/PrSx9GcBepj5eNhZLSpBMhK4ILKX9FMjrr78+/1u3O0fZ0mfD58IN
IUdjziHKzTffPOYcrwuvhs9hKrd0+BwZo3GGz2EShg2fozgI3vC5L37xi+lY
rHiOhho+x83DneFz1Ai0hs/xRDBhxXOQHT5HMxV+w++le/23svRlLnkZpduh
/88d+t7KaPpv3e4cU9UZlMG58JhTXQ+f46jQk8PnNF26tsPgnJx0zuOYczT0
8Dml6FymwTlqbcXrINqZrDHnQmuMOac2qPnhczRy1/IanFOT3ee/PMcWr3iO
jqlzq42FljtUSq4aglwjxmH4nEewJ8PnCIC20PA5+rlrhNartul+UvL66RUv
ca7/X2QJ6lWzdU7pC/U6RwYK9TqntlfI0sbdT1oNDHeYjs5wj0vR1J5VsjAr
I+xzb/XkoFOkimvqwyNTpx7D6qlHJSIpbA2pZ92xn3SHNI90b24pvST/awaf
NcZmj+Y47LDD2I8ue69OE6lEOHfeeefle1QYd+WJJ55IN62rvPRy5IEM8Lzl
Dzp8hvvuuy99JVzj7R511FGs+ogf4tUf+cjXw6W7PRySxyN/F1/8yI8l+cMj
8e3RaNr/ojc50360LJ6I1lvL6+3bImyUfyZlBXEMKDtZ0ODzkd2owBGOb2/N
1HEuQR/tRJcqjQ9d5DecqIavmuBx0gq8P04FBxfa4SCOMK+RsRkzvt685z03
Nu9739Ioxfvet+jHkvjhyCOXNXvvfW2z+upbRSmk/WbVVbdqttjijc2b3/zm
yLi03+y7774Dyfmn4ZKtl5UgOyr2ve99b4KqQrTDfZe9Qw89tDn88MPjdUdm
RQKdU0hl+vB1+HYUzTHHHJOVq5nGU1OpmkkorRJVUJCvCHTRRbPjtTfG65ZF
0d7//sUfksQPRx21ON65yNHbMtN+FHpxc8gh9zY77PDVKK6037zjHf8a0P4I
tFFcab96TYaLu2H+WT8lSHcO74/fu//++2dRqimk5tTSIYccklZLi0mRiRKv
kduuI0FbGWz03gEHHJC15rnvec970pqCTCtHVlwbkPSKlMcdd2mz007XNe9+
9/wo87vfPedsyaQ4p7J33HFB1NfisCtPh48uZWOeCpAfd0RJpP2QiifCRj3j
iIJL+wH0UyE1fxlmcBWcgGmt+evDbMkseuIAzxRl+bCoyJVXYH4t3UIIKQRK
QGH1TnG3CTBlQt3hA8HlnOLD0UcfzcRHwQPeyN7JJ3+t2WOP6+NYGAXfY495
Z0rihz33XNi8610zm9VW2zrKvNpqLY+3bF71qq2bv/3bN8c5aT+4vtugYk9r
y7dB/tkgjRnlpYK0dygLhlA7EP9UivypYJJMuTC8vjPzOuJYB3hwaomuMjqv
7aaiialrNQuqzYw84WIUn884Y1az++7XKVEUcc89o4iRZBHnN7vt9vPmn//5
X6M40n7zj//45QDgG9EkvyXOSfvxrLtfuoivyuaArgJWhFjhneokjlo5sqy4
xO6II45IccVzWeRZKYrzuh5mzZqV1aNY0dSOKgrhj0wcfPDBeS3O4y/jSBaC
AnGN7sR+84EPXDaWv2dJkrpzm513XuSIFpG0H78sjEc/GMblhXi8tB94/jkc
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
ftU7i16h4FpHcrWEhqAxyCVYWEfvgZ3wu1010PngwzDCjckh3FHUcIl6K6dO
w3R2C7u10+hd3eAUBXjAS396DgYO7TZt8nk7c6VDyqLdJeM6aITfO+CAG/Sk
BgzS1pmppsqErqkyvPB/DDRt/+bQ3PSUvGRb+34+HRj8NznTzbIILjO9ATwE
hnC6jjDzXSDMTIJD0St4Pl3GnJQviHGYVIG7mRk6Vvx48HhPRQbBKAIOLrAy
Gaee+slE4IADFmeMmzOH4mQdeOAiR5BG2q5q0eQ+7TTrpKSCpT4Uz7CPuVlH
95nwdU+2uu8OS/Tof8evDfPPJoON6chVaW1auZYMV7TTCnKl9Dzjik5Wy48R
CJIQRDjn/MVdz6CmKjpbzfiHMotw8cXC180ORB/m2i0/swvwf+qpS+L5P3fk
nu3WskybZi3LA6nXx3fa/bHHno1G6fOG7wMXaT/7ezp1UtqpiswXqCAFNYVX
NmTZOdliy6mG2gGI3ICpJtPqgalQj6xE7WDgt9ochqGkipCsgtJXY+STn7y1
29HnURv6PHTGYGOjRwOKW01hyXgYfIBVVlmHN8APyKm3xOLtbx/1AU4fLt7o
2i5DuO0shfWyVmSPAVFM/9ceLAwTntamRRXajF9eO1ypWZrIdVSK53uea2rX
LNoZt2fM+GTuom4DNyvpT5JMDsRrSuY558xzRPVJtXrmBh6Luh3/WjU7tEK+
yrd5VxZGVvVxx2pJVS2bIpM0POODmawKTa7MZSRrWnpt5oSRqodL7D5VpvOF
l3/++VdnyNijjmo3rPtAt2HdkUeabXJXyP1dkWWpzhd75t4b9+oVePxxvQJP
PPFsFaU2sWu11/p5utqGDsyqSLSMU8Ujqb4vLGMsu10h83ttXe57LX2h9vTA
1H1UG03t+aopqjE0fCiyjCs8I4vufZ6FElQctntmTWKrldL0CAlhJGtZU7mK
qqLmj1L9bfyShzJ+yTIdQ/yIE098KJe8WnA1qaP3mmuuq+GajdfxXRN28803
Srf3rW99a20/2uL2d4NJl+hYKle5eO0VzQoNaykyuigXX6Q2FqaQams0ZarQ
4sP3oQu663qh+KoXi6JD/dqagghUnDrfa1iypvdqZakLJsL7vaN24OPDeQdz
4fwpp3wiA7ZOnbooF/V9oFvUN3Xq3Gj5/8QRCi7SkWb33e/KppbdC+8OFbM0
sJOOy76UK654MAkW5BgD32hE49FQoH8zCIlA8sHA6lVgMY3ImlJRAepRRdek
83w40qeIKGO4xce1JEzviuv4dKAs28B20Dyor6HkO4kFI8hUI2hQtCKx13Pd
79kVOhblicQ551wdUnjD6HwCu3MuHJeLZ/tpP81633ffn2THgHSffX4S4OaR
MIN3r73uZEqzhNEQmPQScwymj6Wk9/MSiB9tU14DLwNNClPW34dY0zQasAyF
8vFPXYvKRNZ3Whe2REzTw1/3MUq10xgq0Vx+q0jaxgNpNlT1TtjDC556ZuBN
LGopGRrCEg21vlxb44AGZNoJmkvNt1t0WrdQ5KijhIq5KQ3V5Bzx6ueI1+qr
rzumM2rjjTds3va2NFa1m2kL25sTtgrjUgFLazNgkgVOsLlGUfmeaIJqXH3S
VbNdavehChpbg/y1axgoUIthQzPSTFJpONJa1zKChl85eBXBmG2vYEZ83Vqn
VbummDc04s0hgrXi76STPpGRZduh2N13n3uapGcdUQ3F3hm4SXXH35Ezpb70
pWVhOaSCQCwNLj2Tc5NPH0u32rmwOjk1pfgmLAHjx42DF0rU5nK0ZJWDliJ2
qARfv9HqfqcKKmJMrdWlLjwX5SpqpHpwneepAxbA+2CGtjXXkzYtR7v67NVN
TV2r0HiUFRE+++yrs3lqJMOy7hmSlXJDo9Yz3nPPOx1hdaXmguc0geyZm9jN
EhgW1RNa7Nr20d9nA4BoqDtuLjGgbqq/hqVkxVhiKoiVIHqwxU0codI4ULW4
HSbKTSyJMg5Qdc5VGG/f4VV7f1dnMj/SfTAj8sRVfcFneOMLDQb1g/d+U984
UNGj6lqr5sdEdb5gKHDj3nvfmAu7Jnby+opXDEaoc7kneR3eYWwMdm0YFnIT
9Rl8tzrzf2T5amEy+aDayK08Ok+eeC4VxYg8aWZzPCu4gCZCDS5U4AHtWGqp
22BjMGbddbbnM2rnIsspqv3K4XOe6uW8+k4dul+9wbLWWKoDz3d/u8D44xn1
aMcd52fQowu6oEc77TQ3YBEM2gwVqWbpHVGeB6LcC+OctB9YLMk4LXH0/kk6
JbQ6Pl522VPxguwzjjboizBVj4jbLo7768RBnn1gSX9Ve57Ml5dWXhD5h4fn
8FpKxrU1am4uz4X84jU1797aD1invXok+7UbOK+PHqkFS7XRekUhp1/IUe0L
zH2AMceZR3XKKd8L3K4VQSqxvFAi8Mm8BHRe6Ly5zfbbzw3wpDo15+Si1Dh6
b8nUVIl7wgO82RH2RNpv/s//mRVK4y6Zzl0MnlpB3l87Vt7pSvlSJjqIDDOH
PnDGsVp5XTjDiZtRu5niPPNYYSc9D2fLfeEoqBPYlj6oQDLwU4fw80w6A/e1
O7kKOM379nw6UFHUAw9evzxPnPxwD+jp2viswp1Mn359rm/eeecFGXNl7rLB
8u5FzT//85VmqAUY0rYhSd71rEzq+ld22223l8auje9A39FncFLfFQaXnsIt
+NSkCOWvEKD46Xdc4R3T9eVF11SomqNdAafIYH2ne/2mDtiNCqvq+erBX7/X
hpi5CZ4BuEmDjQE8pvYjcYvLMt5gK3nTp98Q7PxxEM+Y5Q47zPmUpCdsygO+
xY/zwspEOkEkp/xh7oCi/7Oj6DvfeW+0xe9wxKul/eYtb7k9yn9ftmcnZ9of
NDpfBHOrAtBndIz4r1L8qCVjX7UqDoWIF4/R/6qFCkONrmxJSRTxF61qj2Zq
DxYgREfUrP4AZq9ixHsOCjPbNe3eMyrufsUaY45Q0zOIjaqu4Jiwb02EdWx6
+j4W1908ukvcp4Z2iZs2bWEuSBnXLUs59NA74+KfRsH1D0jFuVqUexLG0ftb
6ZRIdGtdddUvQ5h+82K9+j8SVLaGrLHx/uKuTLOzWmcKXZEbgFqb1gBal1cN
tCsk/tEfPrWxIP2K/wrNRiEeW66p5P01TleRrslvt4Yo5QnYKsB9Nc+TjXIt
3VBLIivoR9jWkY5On//89VGnd7Isgemllz7xKUn88OUvPxPvu6N59auNIUn7
Oal8q602zvWA47pVgTvv/M4BH48chm6TVEGy4/VUEJOAI1ortbyeidHa86HW
cII7BRruUm1jVpGV3efjN9z2wSvqoFo/3lMmD0+9P6BrxXrV9JQ0pFi6miPF
ykG3bkN719SectBHx6jlEvsvfOH2UBq3BqhPBHIf//ijn5bED5dc8nA0fPSe
64Rt0wsumB+1tjhq87lcUKpn6sknNav/7IhzUtL9l2gwveAIiZf2m9F4VE1v
zxbhGh5BEGg6XnjhhRqIx8GKRA+Uig+PW/hHx/qrica30kyjc2sT3NZ/bieF
0M8Vu859tdqBMsRDlQVRNrA2aXIOurWHXUUp8bwKZFP9/4TdvWSjnb/XCvsJ
J3y86/zrtlf+tKTXhtQMTzS90XGdT3rEEYtzZCmOgDLSiZHnNugXz+2njtCq
Ul1u4vzemwGzJndhs4YXrHWT+NrotX+Twknr0XQ+nHxUqQ5fzg3BI2iUs8EQ
4NGwnACOZnW1cZhQrfowGH+FpxGxlOFmHAHEQcJympmGBj6AKR6gdVu7Z+XV
7h+1CL7bfiCVFSfKcy+44IddV1qnPb/UaU/jTccem0fgEanNE1q1amTlulxV
MjnT1tO3yt0U1MndRNTh8GBjwGtXNmJi4Vsd+OE9dV3KkweirNC8b1oTgDxv
xG53rmAINhi0HGvdSM21qwUSrDmmanlVF3VtG+N5vLMKCIuJ3kX9GGrBZh5w
PaOmBF144c0Z5kJMW93ONn9pZyUuyl7oo45aGtyK1OzdpdmjgZ33O5Kh94f1
P+yw+2pVYR4HHfTzsNXzpnSTpYet+hgI+9n46LpzO6v+xuSGYqlbA3D6zlh+
cOOCRmVFWaxtgBRXo9W1DBcDUtGVNLZoWtdQFoxFxVz3lwdQjajaMAD0qkxV
4VqN6Ptf3x2jpKp+8IPvp0M2bdrHbGFhDykTaxaYK7cge86slbslV8lNGFor
Z13pN7+5IMoc6YQQu4W51/CyKPyvBsesWXbH+V0XtPKV+WflLKIsVqh4f2WF
GCiySQc+YGV3iXT8PpJUWzklsrprqhuJxJFQzWMS7fdayoto6Q8K4LhqXlbD
Cf6qAJ6uysB9fJcDoPEa5Or8838YNuem4OuDubfY+ZJXdyOc06Y9lCse9JBN
zLT1wK2yFGBpUqZaQ6PTtfZtEVmrswi1yI8cUmY1ECzr5iX46A1DgtpHjZIi
Lyq6AilXrwO5Kg8agjW3trblq8DMSMBku9df7l4NcSIKK4JEtX9ADdzrLDzk
kOp9OPzwxfhWO9TYp89quFUy7ec6G1bBVjWrDPatM/Z5jyNoIzXF6OdhDtvV
7ZNeYpXCCpgRCkJFIAhGbduIQdwNmBIGeDEGhAWudIqy8MAIAr+BhawFGjCi
f1g/rkut3MbC6nXEkZoiVyF7tZQr7Ft1wspXDZdNm3bJ0B5Ue+wx77QuOu6e
e87LPah22OHmwEKqlWzq6q3R7J+f8ckMDnz724ujMM87gsaRTiJf8cNNN/0q
VEgb+eC9LUjtqrhNUklSXhUGE/kRBAFoG1oIYMDS9YdUSKjZSXtRugpYq2H4
gIhU8d65MrVhvMJzzvwOqCIk0gIsXIwRTAwhwXXZwu9yHeEZRjIUSrtcVA+h
Hq6Bh3Fa52Hgkx6uduh0tEd6jTXWTad3Quf67rDDi7YSGF7VjNM1joUjepl5
RlQJhcwzUizGnT6oIBZ+r51bwKZXgJwppmLTZq6pCDa1n131Klecdu/X+sct
trJmMoO4PD358Mx2r7ummwLJHl5vOkG7Z870wZ45Nju+2xFelrSNGDFtmlH0
53NlfEVK+fWv/+SIBpTUMKzIKfbIeSGqR0r2mgF+/zgWP9VOtio2NyOHOtQv
OsFRWZWRj8DTJT/0KZWt1aW8qEP3khPyw9jVlme1x4T/UY1c1fRVfCHL5NPv
cCwuwcx9tbcR3dfOYA8N3zNX55Kh6LU77zxnuiSt2lwLH3Lxw/ihJRB68g87
bHEubVj8t90g0yGHzE0BjSMXPYupuNdet0QOcmejUGBtqKhCqHVWh0AcnyAq
pIJTYqZw1N6jZBRIvNdq+ACRkqrpOWSZO49MgHVdbUXGlfcMMg0slaWCKMza
nxZJSxCAyCPW3HAtj8J9yO8ZHLSAb6RTy2eccU3Qzd71OHjggQtscLRAYKkF
/9j5DQccsCQk8AcZcHBSF3ZwOF7HxM473WmnnV4aoNcNNkSuDoky5iwyrQwg
7KmVIlqKFeCc9q1AtNXBUUvtAEQBAoEFrJ1xtMX87hkVDJcEl3bCtprtZ4RX
fioQqGfb6L2k9Mwz2wDRbQCnvfeef4pkkoDREwX9+D+d8t99dyFvfuYIHkn7
ucT3+OPn5PLdSZmODUE3Bqb1k0caweqSjteSUUQ6t6ZtUVSKgR/lpFdIBwa+
9gusRfMUEKMGwtrDseLJczq6PYOjuHZffHnChieex2ZUk5RXSgHiHZi7re5K
Fo855pIcBx9Etz1pEE5/QW5eutNON+f+A7MSllkZtvTSS+fEucsuI7Nf/eqC
DMYQR+8fpLoFKblrr33OjkkJ0VterPyVpWwaG1hRkPDfeWVWBr4kpaTK5d/v
unXILJkrT7v2qoQ3StY8Mpiyp+7z/FLwtX07mWQzNdl1KcEQlp7vvDxYYlmC
d8EFP4rfbxqNEnXSUJSoQw5p99dZMUqUIB/jB6E+RqN8frDFZaWOVHjDAaTM
GUay77v845IGGnFSJpQvp5AYcpgYUS2bmlgBN9fV5jp+Iz7E1zk8wws8YVy9
m8jVYk1DHvw/LXJi7164wUQLSUveeXrO++FWC+d8Dz9kKLpWBcjtcDt5EEZH
C/EBR04sfiCH0O6Pgi0IYfp94PbnPws7/sILf3hp3P5uEPFDs0YdT506NWdT
qHM8o1fxg0GHl/zxr/AIDvBz3v3kV/lhgU8aA373Fw7aNDWEXXuj4oy/bAH5
qn1CvVN91RqgWhhYGzAzurXTWYWFrx3R1H3bIPp457QuyIXGJw8tNK6tHsZl
2o54H3zwwpDJp0KVRfrK5itfeXJKfKuxsUcfbef/Hz4M4OqDMRi2UkVSSCq/
tttzvhZh1jQLH90nSOa6DChuwf1mqcvwlQMAc483XOhyviksXAM39eMRrq2l
9tWhWCFJyTOuaSz4jelQR3SE7/SA91RXM73qnW2Ut6tzY04R8C0+ObNbgbLX
XmYHzM3IDq/uoj3Ab9dd7wsRtZ2k1C4ZM8P5yTWnYQraMM3D0Sf3G0tFr61l
/bKOmjW6VAjKOhVYnViFpP91iKkJzQXuP5rpuEKN2qeZ34syRJH1rA3ZUAdl
+GlUBHEFR8UrRjm1SuXp01GTzEP193i+/PuuOlQB0S7LZ8uFqVOvt5ovV/6c
PLTypw2apakU6Wu7rRj0ZOywgy1Z9I9JbcmydkY3HQ6fv9122/1XeNYuIdXV
wLXynQmEp/JVhK8a/asQFZgJL6JOjH3XTq1ud6JGXKtTEN7KX3PPiHwFAKiZ
LDUjoHYyqcm5MIUzUZbn6tL3TnVR89s8Uz0ZBd9999GgI8dJhF9Z0Gt3bBGF
7JhjbEQW6TqDtb4a+Pc7AkCpyA73hbHKwB9xTjp2m4YxoK42aLArULc+Mgla
U4SMS+hl1bAio+SuNiIFdBuO1XLU12bhEZBNIYe1mTy10YZZO3VMQ6w2ylJZ
tUMV8GqAgeBowHgmwAhCjk2Y9bNS3s6VUj+471Ycp6Go74997Nqow9khQ4+E
mTn77AenSbIxa73i0ijzHaEvpcbLbo/zdzVLlz4cZmbZsod77bYgf/yjjQFf
6K0tXSnckxU3mnrvWDzZF2VW1hIWeJSO950vQR9VB05Fm/IZjfUyJQlLAWic
10a09Bw8a2JpxgjRjl8jVRG4cI1M1A49zIfXq17uQ838qj3OakIf3SL7kfVe
LWIZjhr46U/bW312c+GFjwkh+LABXjBddNFjgfMdzVprbRBwvvKVdhN85SvX
a1796vWbrbfeJOCUjt2d9JJh1NohBeolLG3X1d1O6sI2iCmOyRqT8rfNB7tZ
6DZSNN1PWmEoUEvveb6u0XWk6OAg1hUzqAZfarUjthHXssCKXpOtapcazzcq
V5M4iHL7vE+Etb8xZ0yJs7JgWrd6lAk+6CArIQVMlVKF9wZn748MGoCRGlp8
KAqpPf5kBrV9cnJQ2wTIr3zl6eaaa9pZLF3gilpWOhwctr/COTRql19slHVa
e78yoz70X4WdAQx9jxe1wzQTW6FzAcFMk6uyHRV5kC6taIvuAaZK424RbfcT
h3A5R7rGk+Yq0zFoZhwnmZALQ/u5jZUIi4JDj5e+arCZ4PxQhDrmbgwaSM0D
0Ot5a24uMrnbYmR434SDWsDWGwJCZuggRrdGp5wr/YfslAf/uMLd8WMZnYqe
Slfp8HCutgkhPJ6l0ATQM7Gn1rYAFxghv8PLZ/ff//rRdvv7u4ACFoS1y2fn
B9dbw6oFv+OO145pwds4YJVV1k3LOfkl7OcKxSdkSKxuQCHbmjrIrX79T6Xz
Jaho/gXfgRDxDWrSa23lVGp8eK2cvjlNDpzgz3SbESbfCGLGJmqbmyee+LGa
+NUuXz9IslJ2BfVzOthhhy3JzTgnd3vD2t+uFnutM+jvzx1iw9bMyYGlOdlk
mJM7r5htPfkldirqcKmVKbBgN6qphR6qihupbHQlNaxs9CvuUyQUgaqGBR+g
Zl9SJLDxTNfCuPb9q2a735gAqh3dzjnnmi5Q0+LUHwd0+uOQQ+gPm8vcFAZh
jz1uSmhuCDmek3tXTe52sHrooccGO1itJ53c7WAlVFi3i1Xpj7bc62czsLYr
U1ZlLt+yellquVUFmO5GngfNGeWvfQ9hAxd+rlZBLWcnEn6rnasCi6HNIGfl
ZpDWqZg5ufAASdevvM8+torZIAreboq58srtVjE2J5vcbVE23IT+zHD51k5d
V8Gayo2oSDu1IxBTXJtOly+H6zVzSt7hQG5wGD58Snyv3R/aqD+hKHoTcxZz
Bb5r/bqPjd2d68Bud66ddzYb+e7m3e++O8oiJbvW6C8MAcL5z38e57/whVHD
sO2KhqGmN75tbMVyajmnHCRtr4oNwEo6V7t7KoBzCK5iXOc+4NTyw5oOw5fj
01WE8dodtPpjCPf/U9udx1tWVXcCv10PqooZZZB5LAqqoJgdcOBjDBHFhIBG
hBjgA4gxRlASCPMMoRjCmOTTmk4bo+AQB6KGqaoANXanjREKsKyiBqCKMCgQ
o9GQVrm9vvuc3333VWHnn+77+dz93j333HPO/u017bXXXqsM6QKiq9Jw6aV/
1xzjo73rJ2k27r3jPEpd0cIlA4k/lhw+VrHtPe95sABRnFALlntaDdDx4oTj
Uv6Qrvfb9yRFgvdlt3sy26W5wkn3ZEdIMlNPTjJgBSrM7FJvDbHhhhCyJc6Q
CBsj32Nb18HuSIYY7bfejqrvQqU0Raj9iivurUP3TJoJH+vZXIz1iScu8R7s
3lrHlhcAfLY7Nom/Y5P4O7aCY+NFLMd9tmtBYcD6lLU9FJu32WXKhVNS/s/y
NShY1MwnnO647if4qAhjmtEfbDpKrzA+0cz+L4YBdCACWQKBIKhbRfjji3e9
654+d0lyHUn/sKQxx5K29cHO85mtpS5WteiLeg+2bS2FoC6VnEjfrfO0Agq6
MnXjxU3Ha4SvBVHC+ich2mVUTgut67b+EeT4JtknQUOIp5ouyiAknYeXkpEe
BVGgMbb49cBpgcs8B5WgwoSr1XdhoSuuuGPqxpok6jz11GVFN5TColbac1GD
bGEZZw+3ErkzR4Vyn1QetxXK3X68UO54WcM+bU5nLG7YFog8I2PBm9GXdV9c
ZU7Scmt18NGZDnVbACYh7YMjRpDSf0jGqkCKDus+kZM8r74XZZCchq4DQhQY
vZQk8HQx0kKtHo+LTlwKRgSp+yE79mqJqEl1A86FtEtbKl92/ZR0kwubopk5
Ujc7DXfaabfh7Nmz6pjWHGbSvPr9ceQ2H62+ZrlMNzwOFws4IkkFOyazXyim
1EUeEc8imuLbQq+evdDDwwgum0bjNUJYSX2fem20MoRpNsyIQJNcRvQCQzQz
AZoqiw0UhOvwhsTZian//M//fFx8TRqsJ530vRvGSvccf7zyJYtLB2otdj5Q
o/JM9effCj0tZ9lPirgsivxssH9r7ZL+eRHWS94tOfHaaeL2HUf5jU3yJo2d
tQKsjSgYagbdBAjqIGKEIC7f94p6JApMlkEFat3G8wxXMz9EasSIRI4xMs53
ruXeDDc+TLLBX8eMPHmXtJ9Z3spuMTLGtZxLnoAX/GaeiQGO0SA4QfmYk056
tMF8o2aDVnWxUxXSzQvf26C6tOqAvmZn/VtX+V4RydcKSK3A3vvLtFvClVjH
tFPr+u4xDu7EKJHs5OLnRs0BlAUtL6SLZNEprgO8jqiJN62/aBZjso8BID5T
AixeNMYjh7txsRknTs1iBYBdk2Tx22RLzmp9PHIWZLMyHU9n6iCY/hsg/MKt
EKl67bV3ttqEZ59tl2xB97Eev7POWlH4tXdxc7VzxEo3XfVEqeSvUrwtpIhs
KAnRZAMVPKNXxONB/b8EWPulAmxyoSbAih2RKbXOOk5WlIXW/6ZLausc1ANE
ccnTSJZuktcAQkUkOFDMUHEDceqYqR9AAAS4FDWKW9PfFJ31OeEWKZNuwFzL
NXFIXSfC4Zpr7i+5s9AWxcL1tNMelQCUk/K001QgV/RwZQkCrWV/lcpXtSwV
G7bWTG6lX7Rf7dD/9kMfWlb3U/xTzmVtV738gQdeaLWQZrR2YlQH5z+BfqJX
cmY7up/CiGaqaC1B0ei7ZGXXta2azPA1cvNV1piy2TvL3EYFguQQ/0DWHckF
x2kCIlrO7mmEdNlRWebGGkyzrIcg32zzQQXOyZ75Gu9pfaIBomKyNNFxxy35
q76s1nves7iUlXLYdxfqWu4SuboWlaX7QMtxwhn1+c8vKTn5r96DHbUzq7G4
+c1v/muTzcMW37UOpCgXpOO1xcC4YsWKnlrXa5jxncCt7Iru1N2biQEScOFY
hJl94ubiCNjlESnpYQrjM13fL8E2zQcaRjvx6nPEqFv6bJSNMO2H2VLayVyQ
Buzsk85Dztbq0lD3MXQf72PoVK467rh7iu13rv5rO+bfcstdhnPn7lE4au0J
P3JEge9ZF64+Pd7glT0je0ZMxQbyrJOZErdvGDiGapmhyA/zJe1JoiGQBUbN
vNUx/UrcLkGReEMOU3hhXoZIv6N3Siq3449PHFPpmI+NVfa1LbTeg4lR+2iL
b6p3m/J+t/mnZIoljlcONjacx00FgQ4mfZTiCwgGxVzVQheAJtXOLo0YqBZ8
QT97GWyTcR2gd3Umu7oNPP3K9KEyzPbwHABd2/9ARCy+R3SICph0LqI7/fQb
MilpDqmP9vkUxSIdeeR3hocddkc9dbUzq7mzCPzNb76jbv4/ispYo4s30sPB
RBvAtWghAfIRwsyP+GoJL6xCsxpra33+9pPY9jk++NQRIJTzm1Tn1UUObRrb
3ywv4zPdJpbQCn5iGomgwQvYNoWV0CVaypqB4/GdMFU8P3v74otN78dKy1+h
2WrMWXnUUXe2+vKbtFby9p2Gu+66+3DvvWdjmY2Gs2Z1pX5/Y22sNm1/Dmx9
Nt1CAkkabp5gakmxmXZ5NmSSzHvkiaWqbNvyim8yy+76hWR8hhFFim8oXZ+T
+5eFkV1zcIM3UuxnwqMiIMlvAVM853u/tfzflqs6DrjookXDd7/77smQ0/P6
qKNjjnmkLeEfe+zSwWatJb6/N1qS3mhUgEB00gPexWJa7q9/Kn7/QSuOs3Ff
ImdcGU6BdK/GbbpHIsdP4tFZv8mlYDUKvLgpG2BBCuZsjolHKdor4tfxuJNB
YAYN6tgaxJJjSM5Q+E0ywPzjP/5jV85ik6ZMjDgFi+ogahQSDDXJsDe21Ovv
epd9mIXSeWO1Gt75zgeHb33rHWU3aCeGb3mLDT1/X30T3PUXfyG46xOfWDyK
4t1Yu2kfxbtwoUKrUxIkdhi+trEcVgrrwmi8SDg8kWFyRpjSpggqdvIZ7lQT
7JLAEHn3tTraPbI25fpY2qqsWYxxApCXcUO2jGi4O88YuncKRfldkpXD3182
n2fAypddFjfDiuZmWHZeX+1dKqFjj723uWCnj1TfzmXtzhruu++edUzLATW5
q+3ycay2ah4EfUNLLJ8sK2BXz5XQ24THY2EsmILi2XivH4igWK40RKFWGsJ1
EjKc5Yy41b2ITXTIEkNzcEKTWJdIpD7d02+IVX8RnIkxnFLc09/MGi+9dFHW
rtrS1XmjCLnmyyxL4aGCRTvR6O8rX1Ey5Sd1TMs18tPC5H97Dw5orbXPn9W4
veRd2lSr4sJLw17iD35tHNJtWleRDcWGREDMWatLFrSwJemFNQ01KY93DEGC
ucDgu+zvx4qkVV2nk1abNmol4CiDIJotbanSko1/qNB5hd40pFccTCdhBIDy
ULibJyB8ML0pNg4Wc3jccQtL3hGKxx773Qs0M6z2NSm4BC22PUSv70uO/e7v
PtJq5da74NKSoHcX1IuxRXN+Le+trlDl66dCmEAQFOCVlCgUAaMxQToMTVNS
sCYm0NTWnJ54YryhTLaI/qOU+n0H4Y6jasRxs9PZkMe8fgKH1E1wbsL3kjEA
cyJKv8Xcbuex2HEELuIXYnDllXemWGcrevToFaNqna1qX6vZ97q1KvcVIzdH
187N0bXzcOeddx/uuecepai16w9nz95juMcek+93vvOdgzd2MM7sFRoG4xKZ
LMf62gaPPocZ9RFFxtRKeWS/ZcYlwwHqRUYEg3MoKngkHh3d0AQEAoEYZxvK
zt4hQ+eFWd2PkiNcUxmN2xVDoz1DT/EYB3QJ88TFu28YnsuLXTxao71/ZBcv
KYvnYe9mA7MTjztucXVCBdWfFo7PPitg8fnnu8T4eavYsxaO+kL4d+UAO/OX
fajP8EhyzHgA9QXXEpQJUkC6+oPWCEru5SSF6ndsjWwfv3EOumIEkCIJC6WA
irwz8zVUWepzaXI55agy3TBc2YWSZPAuT3cxI7H5GWfcWL+7r2hwRVvmW2bd
flnLj9KcrytaphSfZvbHaiJWV8QUouwuuUR74YWrix+bxM8eiGA4ntEjASTY
Gn2kqGjx2KCLlXlVozffk5I6aSrCeCH847C1Lopn0Ytls6S+IwrQqt+6r+vz
GvQu/0FnxbyqzV/zihfC3MzUJHulstUfH1P8SQ1v7BxPbQXfX3/93XXlr9V1
VrcUxo8Zm8eaZcl1sVQscsk4LUxNZgmFRS0ufFFT6AsLyW80j9KWrZ0qJvca
x3SjUS0Iz4h3DL7nSdbrPs0njdSHnu/f5BRjMSEWXsSmvjE4GED6Axt4wpw4
Togo4kLn+o94kpzL1A8/pLixZ8HbxiV12JyPF7wQJdFMPlFbySBi7PCJ52Bs
eN14o2Jp948SYd7TJ8K8+GLlRO4ZbrHFroMtWjtR7S7DbbaxBL1n4aSdGO6z
z54lNGcTkzXd1QoffffLw7pNgxWvcJ7SnsmNS6xjd3A5h+Zh+yA1jwtW/AYa
KgT5+X1K0Tle0Hasu3vTKE6BHtOb4k6eFOintG7WFJLHPDlEUGiqlhhVpifn
uOv5LsEw0PSI2dvB3MLy55+vHNu9kzVlFmq2VGWuuRAeKd2wtHTaMwXMF75g
RVspgqefbnK3ROpwFM9kQiKYeO66LO9BqJ+u01s0zU1NmqbqDNw8kM9WspAL
a4aoTzIp/xODWUQhAgug/pqvbI+QIphEJ99nxCqxzO5P3lbqDCDEN9CQI3Da
wmkhX/O75LUhMTgOfcbpSCDpld2OBuoqzNzT0rRecIHE5eefv4rrctVWLVv0
REtHe9ZZKr4saluisLl9enfeuZgOrWPaqWw+BcdWhLwRBTFIjhto7FL0OKpW
MF7xgcFJjP28X0VMfB68qeiUViFCmTOGjwjFoqKpqDqiw/3i/qJjnMMIjV5J
fb649bBxQmdcA8HhGe4Av/Wd+wPS88C+S7vZ0cstt9gQ9rWmUYZ1lcflXnq8
qZXHcHzj+tf3vH/RRU8WmnfWrGeX5vPfpc19dikzaVbj8Bkvw+dr4crEwcto
xEAzg4kspLx+fw5jHv0lQW1qu5dMqOcuyinhQeRGxyYnML53XczKVHIMnScL
j2uiSVigx1jt8E2VB+ZAElW5DnplChCx2QKZ8l7GhMwyXh1z3zw88cR7Rwnj
rukXp7pqpEtb0dLpre3iGC6/fE2Nv9qIf/qnz7SxeLroZI334NXamUX7xuLq
qx8r4fZvzUxq9aAHEyNCG8N4m35M43rpIgsd27PRH7rAzzGBmJH6SG4mqhnf
EmhohekTk5XaoJpDg1QGpsyOLJ8xaBLBMc+yaZ66ya6NxYsfbKqOeX7KKYsm
bZ9relPc1uxTT7WMf1dLrHdXczXeUXLw22WfqpKhnajJ6ao2Gaz34GDthhZI
X7MuElm665DYbQoSxI0XpWeEs8aJirKxE5KZ75gRo8TM3KkC/0MJJzNAHUfl
hEvKI0Ipac5QYCn5MOD8+fe1ecrv//7KVsft0Wv65BDy/FqX2HzzXZujYdee
2XbbbQ/KtYDQAmcyd8aZ/3n3ETSGQbBJrIpZDFC2KDFUx5ZVWjcRPELBLFYl
DbLjmC6rmBja1iLXcU62O6WmXYRVQZqlmnPPvbnldDj++Eeby/R712lmVM95
rI499uEai9VFQc+22GcZ1m6//ftFac95D3Zq7US1z9f1fuhdWGknSlr8sLRb
cyYPjpiKC0NibQaBBwHMCsiek8T2Gs6sJcBDxADhj+iRkzkV+8x5psGG2PkE
MibCaBRrKrQne3dssARH+Jzi3jffrFrH14uknixgLr/8iWs0bVGC5+yJ9mlG
f+zSS80JHm+ie1YvwC+5RDZ1boKFdZ6WrbugOvpA2683oy+MyNAM/fTbELv8
BTs3gUAQGE99J0zjHoAN+kka+WAGPwoHNtl7AxNCx+/Rn+MEjWtSBs4nHJLh
ssv8X2eX4U7goGNGSjye/pqHwNb3KYIjFv/88239/GcJIFbbNLp6y2pgVP8W
mHB7fLB5a1UCfaoGYOHwla+021erzMmuw1122aPm+rPrmNY61rteHqP9RsrJ
s+izcfaZsDSe+AK94AFYxdBlLKCBZItFj5QhfJPD2twdv7lm9qNz2mUPDZHE
ioVnKmd7BgYFfqMciR6Yeb5uDVEG2vsm/SIf12xQBLJq0KXmvPbap2pUJA6v
aeVAFP6zhew/e5car3ZmyTQzz5tuWl3TvJ803d3q9A4mxm2iqUhNqqXJdM9z
GzegHAKX7e0FLQKXSUm4enEShKNQDC6ESGrtoDoUlI1nuBLFUelJ8YwSjQiq
ZhIkCR30TSMIb9OOcOB1191dv72/KOzxYTUr1ZI1CT/77FV1r++V+rKIrBWc
fleNyrdLEiwpKEoe1LEVK1a2mJ16D16h/fVxPLZrCsIzGOVkE2Py8Xww07KH
MEE4TFCcEjxghyKScB6lGHUmTdbtC4dp7JNipFihKV03XmkBg2c7ult1aTNb
MojoqRtu+FrRNVnO4j7vvFV/qWmG4pqWeGbLLe1X05oQ7lam4OzhvHl7FRxa
RuFkRObxU3koqjLbnvyfvWzoF697QQqPkNPJkEde0ENZOEmCoeSB0m3xx0nS
jRcii3WfCZDc8qlzia+gSyYzDVw32Sdj6J188r19Ffr3vW/pxzUb1Ocl/aLv
LbesrvF8tjr/uc8x7ep/87k2p5vez+y+8IXnyuD4F+8CTuu8F4bf/35jocHb
1xU0fW7GBkbiLZAzQcJx5cWRYhbtRcik8kzsFmPLzsnqAZZwXWBgsTgVsZbz
gZ5iP66LDN0Xy6asofsA3jUJOCx0/fUL6p5jUzRRJas2VMpn0FXxEZtV75r+
aSdanFax0zqM9eUvf7ux1MyesVKxCS6HdiC9oqdSWqnf1NDLmE2a1zgah0TM
BtpsRONRBh4ZQJNYjM80V0eyBKJjOpqoeB6u5B1FMaiX8ZdpH23m3nX+NIgX
MRBJZorJuuaU3vUwmpHddNN9dexrNSYcWhdd9NhNmjm9V+uSS3DbAhw22KC1
E6W3VCiYPdxzT+4X7VSNtRZGZKLnHceI6U7jJFFOlnkQUzITpVAeQuq8hsMW
mWGapmM4kOWDU2IpwS85+0zraKc+9mwUuUGDk12wZFGk0hRcPRPryfjddttt
I5Cuu+7+sljvq+OPtVR0K67qw9LOPHNlC02rdzGaVgwbp8/qeog1NQYXXGBD
1Pnnrxbh1qLcdtZuWCd3u+2XDx9++MctUH4D7ZvH0XvlKBGadQashOKSjgS7
mAx6oTYyhfxIQD05p0eF3kSvBNAyUZWaU7iadMahiJJZjsOyY8ol4vY2KI5T
XG5HtBGJCDnF2HsCnUarDsSG3zh1S94fj23JO/FEuy++XBhpLaP/bUujdeut
/6uO3XqrugSf//wD9aw/9i7cqt2wGhGE3/nOj1uKnjHJlUpwCATVJ8OT/zEd
gjL4CCVbhShy2ojJiPAsBZEylD2CMO1N6Y+k96MOMCNCQXgUqakKMwkxZ9cs
HD0D5Qkf13ZdxAZTjiZDy9Wd+bBzmZ4p6lp4T+vD66655u5Wfss2rKGoe2lY
ukQXK5ISsfRuF5TfJb+4rzhWaOQk386atWfpxzlNS85ZazZ31lQYk4OAa0d3
8Al7RzdTOh6UScvne9qqq6L8kQYrMsNLroHX8B0eN9sDbyKsXI+cAAdLE5lF
zvk96zbLHlEaSNBMIAYGuGhWEOMMJIv6KZ2yUCfLbFOkCyY9AfZGLpvRr3iY
BUtpd/rpqwbraTeqL5ZZD+k8K0vq8j9sGztnas8eh2ynBhmnO51JJBNvDAbU
ARLM7BHj9Ka/Up8WN/ETmBz7nRBdHOd7TO66KJSIS61BsLaa80Wegy1Hc8Xs
KEmNZQSboPjUlWaHGFW3zf7QZN92qyLSMPFHPnLD8LjjFrSgmLY8fFq/G9QW
0WOOeXB4+OG313T58MO/VMd+9Ve/WKpEMRTbuj/+cdu6b7vt29X1H9X9flRy
TTtRMP6oBEdzuA0uXpfw8IhHQQRicZlp5JNHR1jkTEKvkmoM0ehuQrmSnQbv
gQWKYKAgWBjxEycilLmFQBGdyQBCQ6jEKqI1MmSf6yRVIB52zyzReA4Ti2zz
LGsn/Nu5oBZOEt5pvQvKytt734tXZ7Xil7u1WaEtD3sNDzhgbsGoFeIxue3h
lnUhc2vzCbwIAo/FwkwCAPygu7qKJ0ALFtuj8CnInItKEClYQzUILlkVXcsx
10gucsPFf54t3zkGksw4ncvIc38w+8zL47k8Mzunn/WHVy+7bNHUctUf1kyv
pssS+HB1QP2zF1tUNpCfeeZ/l6p8ybuOaeXIH45wu2Ycty7PiiFNGSCvbPJ3
3DFY+ByHG0ySzdDnxinVmcEOzVRJiYJ4JrOwjgod103aI2VcUBcIeKWdg3FR
OHhdHiU6TsSZLJie4YT6f5qLlSg3In5iNL0x7PHHL5wsCXzWWGIQsQinnba8
0NGivkeKkb9a768UpWkh+5W6313NTpze2olRMknAXTaV+lhaiSlJMFDWfSGn
u1l3xczEHwZOwR2Ug8FYvOZbyRkJeV3FsI4nHoGDHNOmInDyu4De9ZOzJStr
qXZHQGB654leY0th9qxpgrieaVofwjd//t19ilP5hz/84eV/pJneR8WLnj/x
xEmu3b1x7e7DrbeeNdxnnzltSXJOSzo+ZzhnTvc+4ogjrhiH7pC27qObupJQ
VDYGzZB0iGD1OYVjwMGuIcOSSgB0NA0oCQGU51gqqGNe3XQMXBiQUUwpp+C8
oWCjJBsessLwhg0zh6lBBV73iRLPNt0sE1x55b19Oe/lrZz30os0tlJzqdtQ
feqpK9r75JOXizEY2Jj0i+Ys/cWwj51M3bjkWrAaR6BP7iI4qNEbLjbzQQvo
AJ14ODxBXSZphA4mbj27WJJJXMeySwtQrBvr3dlamCC2TEEZjomJyTYjsxKg
Oc+zojt0714pOeBckgPddbwq39uiyUQMF2paCoaBdmnp2sXDt73t9pqLvO1t
Xyp2POKI20vrfmX0Pvrov61h/5/TjV39JLYFePrqSVu2Pwc0Yz85KhmmjPfk
ukaIvkcA+BmujGImi8++Z4ERZ+YeCAwPMlrxE8LLND778xEv4slmFuMBG3gg
PIY1aw2+xpDJhDBhzahmAsHxqqvuLhF5b/MZWrNYfolmYFfLqpqx48E9mhdo
1kTPiJtvvvtw9933Khac2xYuqM/f/M1ff3lguhXA1JGgshKgNLl7uasfr/PW
Eab19p6pNw5gTAHW/wggeiAlyvvkG80s1UHcE0cp1UudUreIj/CjGwDud3HW
IjR/x3b7XHGFhQw5J5e3rYBLr+5XAG3gvvPO5+saL7bk/S9aYP6PjUo7hsNq
ytYu8qFxINYfTW8QkbfEQt2Okb1GW7cpMC8jk/l5sguzL3ANytcpD03Ho3jT
Gt5kIgwn+C3pTKHpdErFAQiFsUdSKyVgUoBAwt2458MfvqH4Y4HIxaGswZdp
ZvTmqSzCNuqdeurSwYb9rl2BjCedtLiY5vY6pkUYtsPeYSQGG7V2Khed0GG0
RY860dvnMO2XkNdv3ELq0DCkQFcEpHpQRIKgmK+oGrYIC6GQCPqEE4hu/YYV
XGEJO7iFE2jA1FKFGzOTtmNcsLl8D3NYld0SLXbFFXf1SYNXtKTBy2ykX7Zx
Q6ULL5bNrjRX4aHtmGfrrfeoGeLehYdWLPfRvwyPJNtUkKijlZmjVTq0gmZo
ehhgsJY0tVi97CVfpWoAzcQCN/1LuRz/gwc59ElrR6ZaNhIlDyVNBZIEHIEt
5IK3257u7okvvVSdybt7+6iMok9qGt98t82mV69+sZROtUJwX2xrCbwpL5ZV
8/OWdM7Sw+rVP2+mpmse9vKQTCqqfdqwZo96Su5iAeyS5GSe32fDaA5J4FJQ
KddFWKbMV0oMZSE0iZYFyznX72j+JIShrAhzsxd2J7+q6yMlU3rsdNpp1w/f
8Y67hr/2aw8Ph29964P/VbNxNRTL4YfL+6NA0EODbVs70YoFHXHEt4aHHvq5
wkU7MXz96z9beuvLtMdgg9ZONR5fN47VgU3OIZWUq8H2jDWuUaRMSXj+7MnD
IimS4DuiAJ3ES4tzkx2K1yfVO/U9G9coNjSEDWHur+PINptMYO48LAtPrOi8
RLsYz3PPvaOkxx0Fw3eHwyOPfOhWzfY9Nup/vfnNtw833liaCK0y37uVhppV
RuHcwkYrbvqYl8dmXjOc0b1xTOIWmGArPMKw8X8WzjOd85kIyVQsYon+oYAZ
O9ZhYOdFpOEj/fXCO1lURlMsUwYR0Y223RNfuSee9FwMgBqzkb4899wFBcEd
rYCUIlMPfbHHRZGpt79dTbnFg1doN6jGF4cdtrjuunxdhprXdA9ZmfU2OsPK
f5K0IwB6wkSKT4i8yf7kBFakZiXhkBKgBhsB+D87drL7ymBnzuw+hAnrBoEh
CISLIH3HlHYt9/GbElqDcR8opnrrWx8pIIqL/lozUOMNEEu8Bxu0lj9uaasP
LyvrzNbyv6xqZTvEaWzWR2uYxV199RPrYrVd61sy5OgTyws+phj0r/4QuISP
z1nvM2NDcDE4nIfYMQbB7Bgm8rsimLjyk/2NKgIHWBIZ5S9bJ+Wieq1a0MhS
M6PRNXpKXPbllwtvXFgya0WbNSz7hKap7Ufri4eGRx31pYJKS/Zwt36VcKhj
Wmr7eyNeOqaDpdNJzcY1eiVWs9hi0CjjxHkCCHGYcZMcrDuUrvPx8SKWOE96
Z8C0tiFmo1HtVZfDeIw4TEu4ubxjaLQEfR8BvW0DLnlenMsZABCPBTQWNgEf
lxiBnSyh2TrDZkLjCRpKIRA0XOM8YshuSiYAdEWLBS1wu8Tt73//yrIB7int
v0edrGVG7zHcbLNZw002mdW2DdoluMkmu7O0h3vvvXfL/LT3Wus+AbxF1rdH
RkoppGNiQZbRXwnyINfBw3TBds6Pb4Q5RKZHlpNbZBQ9EZcWXUDvEQu9t62x
OHI3GckogYweBG+W4Q1H1hDjWCDTU9uN3Pc8ZGdyzrPzU7QHi5GNJ5xwwjQX
KXJO5SgEQxTLryOf6Ghn3F+O7Yw75phl3k0BLGOsPtq+eLR+Ja0iu/vKK59q
TrCnqvMNxMHJPcRdui0cCz4LMAJA3Zsq9yKWs46N0D0bitF9EpMp4X/sShqA
KnNa34MTTI6nIqdlRJIVRZrWGBKLPsl5ybSI+eKz4WPGub+5JTMnyZlcm3Qh
MqhxS5OGN8WhSGvcZMioHeLFNT0LPnY+kdHNDcfi2f7bqNjR8hrfh2oAvlhQ
VgvoLzU36hdKWX2jiO+f6osSX9XW/02QeRdKfW66LotBY8js/EepHilbU8Zh
Zsl6dI8FXi6mBHOPl2tH6Sgp3xEAqFD3QMKFwaKj8EDM2mDtIilZJiZawbFX
teewuGzYM2Suh3vikosH0ncRUNkHahh9Z9hxCY5E+eJ1k0bo6qvvbbsYrIcM
aedf1wzkqV/elNLv/d6ywW+0ttvWZGNeCY5WaJfQ2HTTWcPddpvTxMWMXmgc
ffTkZOLEHurp7WOf+XQ0ES5DrBNfb2q9xftR/6Q14qVf8CenYDYNJ5jC//g0
HvtkHkVM2fiRhICmUaR8qr7jd0TunOTFTvI6siTJh8mQhMQkBzn5A1ldSe6p
7N7RB8in7gA5l5qXRvjMM28s1XZ3WQfsprKM3tHMo/XLzl5ShsOSEkCP11A9
LW5qcGRd+omZYs3atObxevouGOH3eli3GwkKmPgLtxSb8XLPzHbhiFnZe6gU
RaRWjRfsEsOamgfwbVM6N5wzSqiCcA0B8e1U4h/RRcG6NGKnClL1yqVAhDH6
FB0NLr9Nstik2CfqyQBDE8VtuNwrObl1M3LijDO+Wtb4V2t28lDB+oY3PHCE
pkjykEO+Ndxvv9uGs2fTSQtLBHy71K5NQy8NvtajOHOk0Yyo2ZtuohgIlPjt
UujOaE+TSlUBHuF0KWI6hJgWLqOHWUvAmhSjnnmRnIjERMjtHIdYaq9TQqn+
klQ1qXdIAodgM8iQ4H+BdtZhDCo7Iy7bP/iDu4dvectXh298I4Te9KYH3q6p
vr/pTYuHr33tguFGG+01nDmTY23u8KCD9i1D/vD62S+mgkQXYTdCy0sPPFUJ
x4BklhGV4rVu2PBeTa3oEM7ScZ0CCu6jhqhY5ICLfDbrYaCi1myzi2uWzPa9
a3oU3I2kGOrAo/F7Kh7F5ac2HLDCmZxNhx12Z+FR1HHooQ+8Q1OMeeihDxZZ
Pdhy59x8s9nRPw8OaFH1Sms+WZ+fqbfgLK1gkqfLyumWPvvlgFf14vbloEjd
djAYQ3YhmvC/SVeKFjCGAhV6AR0oqBePT8UwyMHhOMGWzC/uiQ5ZCboNFjSE
G9GO+9DUrAzcdPHFd/VJ/Je1hDe/0Se86RL2t/dg/2ofaSbid0vnfqe47zNF
I1o+gk+XOry3bW+Z2dqJUW1qvT53Kixx7vOndC632c1oYJuR8d5Im+1IhmEt
5J3t2NgrshwcDJaU/3SMwEC0hBDdgmpAwdhxX90HaQLYzaXHN6hefPHCKXBc
0sNhh/qRRy4cbr757LaBhWW92WZ7DDfccNZw113nlBW9zz77NA/kb/6yrjOf
PZq8WV3Xd25aMnYV40PXSAUQZHO94yiExGCMoApE7nq6TT5iFtAYZRTkd5gq
7mbM5nfJtV9UMeh2UK3fiiSiqrPOkjTynlJZckgeeeTDF2nWqxFfOqO+UPH0
qKMeLXRWlLB6siaTP7uy6+DOfQd1pt/f3ovIHRpXuykONT5eJK6xSD3rhOoi
eceIMvobeccvosN+4zpoAW0Qnakv7fsCZ1q/x+WP//ieqYkJLxglJrRJ5KHh
O9/5N4MNW6tXn6tjt5f0+BYC3rDtOp0Y3286OGe8p7uOekr2EIvM4CQL0FuM
TN0lm51LYcJEyKJqTGhY9R7z4gB6Sc9RqaHzHWuIqjTcet2b+oPJbSA2BS6U
4LO6+sEPVleraQEwK9uSypZb7lld1VpYmT3cdtu9hgcfvF+RrHaiVOa+w3nz
5kl8OjhvvJ+zWz89q74iXc/iWSGfxAdJTIfTjKY++j4VluLZjLU1vkuGgydL
USk3mPKqznceGxh5nn22KZhC8UuGJYkevlDThJK0Lku8q0vaiVbp7IQTlpVg
eq6Eklbw4vdLKHdO3vPX7abHpX7ITEIFERqCZMqiZ3GnITOZNFc3TAzJZIDS
VTKWzB3fJR7zPEVWCB9DS325vntiCvrgssvuzg75tkH+6rHEUb/zO1KwfLq6
pJ0Y/sqv3FZwLzIsJZS0E6MMCHp2xrpU61GyOyvLFkYr9RU8dmojkYso2AsE
WQJIzqfE8eoOCmUgWg4ie40qGP1O94xsVwCxo9rLL18wNXXvVZppfQLMU055
tMZ64fAVr5hdndVay5g9nDVr7+G+++5bndVOnX5M6ewOTRcmnjbpYLCp8TGO
XjqLLQn/bIFk9RAwxjsJaenjZOXGtsmPiAV6aTuNt6K5Zrp1wzKMx8qlSchx
lzo5Lancdy/qC+WIulLIpd6D6a1dr+V6OumkFXmvV7CIcD7ppJVtCbnedV3t
RKP6f/iHH49T9G7tz2T4GkPLk7NeE2+KqiOY9M4Q6qkZc3KfQUwvXcOxCIHY
9SyM1GuBCMauoY+j9A//8MairPtadsKWvPDCUajF8pZO/uijP1s91vKuy3/+
d8URC+qYdqIMvL+v5/mxd3VXO9Hizl544Wfj3e0WqV7VDBld1t2k448T2AyI
B4jsZGylaKFBT/WjGNeMoni5fC+FxLQWI9jFjjNsJrXbTs2fEAgS94GRs3Mv
4TKIBaFhTsIClXgOcg3UVDxIrVZkGT17q2k3nEq39JUMo+VuuWVRMe7XawRt
wb3yysetWz/e1N+a4vRvDnfYYW5Buv32Yli2224Orhm+7nUH1DEtApzkn0vG
Id1s5HbI6KMizG3Ow+THC0m6yh1CYBAKpcALnurM4BWjTMKZR7GJCYrYwZkW
gIADIEaa66IoxNRBvU1zpWRbPmhT9xAPJpYNdOQyijbkKWhleJJk3ZCQvbgg
m1ea4dDx6nXX3dcqlZ91ltDcM89cYXvDihl90uwzzlhZnP2jGnfbaatdvy0w
WkH8j0LsF94FrnaieG4y/OWMcXB3G6WveKEPaAMIAcQnjXayC4NNAFydx64A
RV+Ek2uQuNmTa8BYT+Y7Bit0nOoarGHf8T8BvK490bOP2Xsy2cEfOaY6VnzV
HsnY0VFIEm7wSz6EZJdEKz73lXBGaydnnHFDqeRF9e63a16l6dfxbd2VH3K6
dr3eVPvAB5bXl1YKPltgawWWf7pkw0JA1cnaiZGK0pcPjOO8+yizJmxoNw59
HeOtRnjZOMZDAmcGAPEWyxOBmeNycyB+MoRyR4BsIWOo44gKvjpO6wEsVQGc
L2x0Wg+254hZnrkt8CmsRI4YM/dLHgWepZTD0B8D5rk8K8L3t6uk2O2lu+qq
e+q42Q9f34c+tPwqzSa9P1WszfHH23dlj5WWYbjXcK+95g0PPHD/AlbLkf1b
vwzYJAhDHR4aN6KKRKvGkQpYYBgj59PA2fdoBsvpycWW0nK4ObHMru2aCc7F
DCQAIQl8pkyXgtkzbd0kSnIFmib4Pnoqu1IcJ/RRbiwz5yesx+8Nvmc0KEuW
LJm0WBb2ITp96qI/6y0zG/SFvtW7oNMKz1xW3MMX/vMalKefNijPPPOLoZDK
etexasXv0CxPPfXSsGfWwfum4px1gUT14kJ9QkQUTnb6kcgImNLy/AhXH1k/
CIXygC+iwsX6i2ARYlJpW24xHpiCuYYBfO94Vwuow5lBjuBIa+POOvIbUhi2
jvs/af2z9zZjkrS8pDTa6NOBjy+yvu99901GuXy8lVVfv/mpzzprZduoo3rB
hz/8yEC52c81Uv1sXedL6K7GQDtVLrx3HNYu67nhTdbzLM7Ryfg3Li9yOQvV
BJ/uWXpJJVq8n63biWbge0rpdeSKfJNCH3lbWyB/+hyNIxuFAiSzM3SGDEm7
B9LFFrlGnH4x09gFyNl9s8E1KZSqrxEL11+v6tD9LUhzaCPd/Jb2fKLfT7fS
e7BFa6e3Y/Y5/dEfde9zznlC6N6M4dZbMye22mpOmRRza/a4X52snRr/MAXx
LitK6s4RGKn9IC6v8ybObdYU4k2NSkSSAkmIJLVZIYu4kkg02SKgwQVqdJIQ
CoMkRN35UInhitihRyOY7iU3Q5Zys3jlGMbpQ9/GJ95T1qsuGeVfkKH7ce8i
W63dZU/UfewcW12YaLtE6FLP17uMJS01aQfQY971W+1Ey+x93XVPrSsf1m/E
q5usHW/5uroY2/2bMQtK3US4CEjXyBE8aAhiz/trtpQ8rMkDR9aEQFOoJZuc
TO3IEbPg+JcwjvNAhnjJdlaB5yDzUwM9MynDnMjCLJl88IP3t5BsUe0X96Ht
p5++os0bjjrqM61k8qdb1MBtNfRfKdlxTx3TTtQzCT36ifdg29ZOlNL+SRnv
/z4O31Y9RHjbo2TVhF5FbSaB5gREnVEnXpMmEAVHtRDHSSnIs6mbhiPVyFEr
aPCqY3R3VE5y0GQrsf+Ja7NvlEwdkTWeEUxWtlH3TTfdW/TzdXl3Wtqdi/us
DZddtqZVXdxhh30Kju23tzy37bZzy+bff3jIIQfWMS2bf3Kd/5KpcDA3TDs8
ZmqIs+kxAmrxGEbJYzCVEjWMwnyX7IS6CAoSn6UAJswMEszIfW+26TfJIqjL
NBLNQbM5jgpBhzEd83JPFJSKRddcY/tiKxo9xEOXaqZbWustnQUL2Os/bzXp
f968lD+rsfp371JmWs76F5u5Xu/Bhq11zJ7DDqff7nDqPLn7NkHFFDQkmR8Z
KtSPdGjhpPpDArDDXUgNNqyZ7N1BWkgBScAWt7B6kBsM4RDhhhztSE+0O6xw
clJtccj4DQ42jq43Znc3s3v+FLO7S2a5w1gGnVNOUS3qthLKWknuP1XTh3vc
p45pJ0bBZdCYkppgv/Eiik1DktuZoYArgQpeyf2ZgHVkYHgZiWY2BIMZM23Y
x2C2boEHCWarIpiT2I8vCtzu4964EvmBMQnewWeoXOOqqxZMtZTna3Yey6Qj
OepWW82tzmsnyl6eM5w7d7/hwQcfUMe0zL3fXhuQpDf2UFia0jNmHNbJRm5a
luLXpCkxpAOxfhNTDFTuB9YSRWSFNFnK0U6y2aOxbANmDXqRuMnQh/fcyzSQ
dURCex406xqkOXHDvPA5cUt+n+QBzOATThiLVP+sZuMW6NWVJb7/flzwUoHz
3HPM2x/84BctD129yxDQMnmVmemyFbylA2yT9ud1TQgRKDQ8OwaFkLGASAYB
nTSqhA11lrzNqAA4QNURv8MEwHOMiiKEABDKAChmw1ipHRIT1/1igaAyAKMq
VEdApjKtQaYGqbssvxiQMKHajGeeKcXMEy0Dxh19BoyrrnqinmtNUfiakjvV
TqtmdbPULDY+25YZ1+8XG6+99pnSvy+D2USb07un6VBnnhzUBK+pGAtInz2L
/3EZNU5AhTNhTq8Rtvpr2gYT9ibVHKc4wsWRuDHp72Mrs+aMmxdOTYiAsUkl
T/eLgwBBUQSsuqQ5wrVJ0//Rj95fz/TN4vKni9BuuunJv9NUZ2+++ckatC7Z
2cZji7Pz5y+twfl8WaNaSz1/Uw+/gMFdx7QTowEGUV+5rI/A4lrxCPgO/WdB
EGSpuAgSLyY+3gEZPtL1ZNFnflPd+A0PgoicNxxIAT+aZrhXn+B4lCHJNZEN
vZndStk4nP0CrmvKkUwjZEAKOiRfgmPZqOicRFp4Vuc6x/3dk/kRN9THPmZ7
2N8Xzk8N5PFcIy32muOK1NHkDTc8XYR8bxkVexee2onhNtvsXcJw/+GBBx7Y
3AYHNhnwO78EY+yEXeCIDOku7Eu/YV0mEDLGrnDSB/ItmYyTJZaJZQzIs2RL
gBdcs9adaszGA+kmms/v4IvE/TYVUWBLQRgP8pOy8oypXMAMRL7Zzeg7z+cZ
6GHPHUyNvzCFVEZxPrnbpbm7pVm43VbE009ffvIoDItA5xp5osx7rdmA/BNr
ind/WGLgi1+UnewLX/iXIpRnvQdHt3aiyPz7RbQveNd5Wlu1n7cPb1xc9IEd
ODiTY5anxzU0o8Jub2iUi1pRFAEAdcyaHDp67xyOMT3E4FBClbQVweo31G4/
CW23Q4lGxLn+RwlG3r1oISPPlwBZvyOkqWsjSBP5TTIMEBxGjtY0r6EgcBTh
jsrDgYS+6+FsQodwufHGe6fm/j2pz5Jy4YWPV+eWljb4bCF5wgmfaQT96SKJ
v2kiZP0iWoLk29/+1ojI/3uHbjcnW2+0WgjS0VaVN4wKyyUzTrb3e2TEiAkQ
eZb+GZngS20ELjXn+j1m1o3xaRlDM4HySeVNeCWlkWMxDEEIPpARbs6hvzAB
QWiICQbzGgLEkBkev0miGtdJBXavm2++v2WfueQSkF58cUFaTVv+kqPpH2pK
sl/Bt912+7SJyT7DHXecN3ztaw+uY9qpG5NeBlKkhfHruaY1D88bRvHUKZqK
kvA5E4FMIDe5X8mZ5PjCk841/0jYl+9ARHaQMa7LvnIdstRQZcY67k3zXVJz
J9Ny1gep3PFIDZCSUZgP/O9973tHEbY4iGwiJ2I2kBXJFjWqWHnyqGKljQsr
6r2y0NF2+7/ku/jUp0TW3Hrrc206/FyN8dPepSq1EyXEVL993rt+q7Xc9oM2
/4H2/HWh95xeJTSmobOCPvIDhWZ6Rvw9329H5KBFkSiHxyt1BEFpCIhSni0w
oiZChiUWjxjBE+94zGCjHyeC3/ttdjw7N8VmDGk2tlIJ4M8mV0zpf2I6WVuz
4d3vLGPhrD/5E0WL76vhUdbunHNWchOt3LJVs5tobsiPfESZmVsLa6216E/W
U9/RyjGv39qJZr+GpKesr000sPoAzD4aaKLRYx8Y23txutp/oT3fExHA8TeL
zQmtAHY8uegJqFielEwoBtB02nGgJm8cGwDd07cGBF0SSwYYfQIZwHIrThs9
730lea3ZPd4yu61U0xUtnn/+4/WDbxSzz6vOFbPXsVe9ap/hXnvtPzzooIPq
mHbqnoNxfKZBbnp/FxzZF2jpUdmiPXESdmdap9dIJXu1CYxoXz0mDZIxKnW/
REC1XR+pHwcOtIA+QAzaVBV18SR6cyxpMlpRouLXetbzzrupNP+ivu7XiSd+
76K+QrPwjVNOWVnvVdX7979/dZuCr65rrqnJ0HBwddf7lNFlLfYp23q0t27s
kTwMbu3xcCdSTwYuvyGFWD8UAymW8p1YhVShB+ln+FSnpxGVNZNASDiLgPPT
5OPGLeFgnHHttQtb8iK+yZa86MJR8iJFCR8ZvvvdnypbUGuAP1kQfaaxw/SW
gHmiiYa1Br3r9gajcDiP77E9g9EgECFdRN3DsXMT1qnInfgio8I0MZ/AXPqR
VH7JvkMaJJE7OLIEwQPsOAzi0AIbY9vr2mvvbf3uEoeVHLhwJAweK8y/UWS+
b/Vxm23m9cS+4477Dl/zmoPr2MEHd/rtt16+33ObDk1VFExpWPUh+Y+TttQr
OWqS0iCZgjP3TJ7qZB3xF8WiaFIzvkT9RCopUA07z+DYuBI699ybSlnZZtvV
6Lmor9Fzwgkri5We8C6K1kpg+ERda/U4Re/SyzGeapRLpiT4iE70GIYgsTQU
gLkX/1oSLxk235u9GXa/YZbgfteiaAQa0vmG3bXD8WQiGJg1SHj+fA6fRX1d
zQ996NELNIOuruYHPvBQyfG/Ljv5qKP+eqBU+l8Vtl9p0TwzWzuVfC+cyrXc
AGC28Ty1W3FabAiyN0kDkGXCPkgrz82SJYcdNwQcX/6mBLr+628ScBoecj4p
0bO6hoxyHwrNa/78Ra3fp53Wh+RcMArJWVm0c3+R7Lzq49Zbz2uLO/sM5807
cHjIIa+pY1o7qo95+X7PbVa6+6XeLDFBj9BJSdGExJBaXOjJ8JtAXjRg/LEg
8zhpmLLA41p0pnG16Vl/6brYYNGL5l1ZXIIPidyniW7+zwt7/+cJJyytbq/w
Hsxo7USds7wwf6YmVfJq3nabadSttz7fTKZ6F5lr6W6BbS94NwvphXbshRrj
5iMbnD4VHpKMJGI9IxF2DAVkKFnYbJT4Kg09kjeMyFsXkbPuhNtRIJ9p6qDi
WrYM+HC388EZyUhipJZ8Mv97YQcTIeUQ1IJRA2F+XwhhPMvmpn2WzXPOsS4l
wfonCwqtMPFP1nN92pCVoNNO5ZBTp0KBUkkAUJjrxeNN2PB+gMcjUwCMJ4+c
DQa8kSghCQtdywt8uEC3kzmT1W+ypds40qwfN/EwoA7UYu6JwhIoduON902B
4qM9FBddtKaMma+XMbNvm7/s2+Yv+w532mm/4atf/erqttbCynFrd7vt2anW
tJNqtmihm4SVxzfzJotTEzBM4VHpIL8xYaDuMQ7dRU57fCgbcdNdxloZbdMI
+MFm7ZLZ9MRm9Jd/Cmp4lHx16STwZsfJV3zOOU+0Gs6r1HDOiJ9//pPeReha
x9bUsz87TuhdN/duMtsIQdQEIbyOyEFAzvnfyOBl3SefMEjcg+OLA1Sc47pK
RRpNRjyofAcmv/HZNdMf1AQ+1EVOOJcsmD//z8qUWVJW0b9XP1es+OknNAPV
dn/akkKs06cN2zO6hpcFjWT0pU+89LGeP57Y5DoQObhhOzZ9ypqI/x944DtF
/MtHx4Zbjt9yeiPwsTDepkLqFrG60W3PYqN8SuJB0LjiLZv2x2iLPrXvYPJe
3d7y3iP0//KkpGv6v57kKn3Ry3VPmjxw7P/HA4P/8n8A4lN0sg==\
\>"],ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],

Cell["\<\
As we can see, there is not much variance between cities, in terms of Tweets \
sentiment.\[LineSeparator]Lets compile multiple rankings together, assuming \
that they have had a more complete model for estimating the quality of life \
and satisfaction.\
\>", "Text",
 CellChangeTimes->{{3.7711983003938007`*^9, 3.771198312367927*^9}, {
  3.771198345411821*^9, 3.771198357701936*^9}, {3.771251296055133*^9, 
  3.77125134665545*^9}},ExpressionUUID->"04da58f6-384a-4c46-83b1-\
c68f03702b2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"citiesPositivness", " ", "=", " ", 
   RowBox[{"RescaleIntoInterval", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"N", "[", 
         RowBox[{"1", "/", "#"}], "]"}], ")"}], " ", "&"}], ",", " ", 
      RowBox[{"citiesWRanks", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "]"}], 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771251573041683*^9, 3.7712516427852497`*^9}, {
   3.771251681036207*^9, 3.771251704933464*^9}, {3.771251831632875*^9, 
   3.77125183346624*^9}, {3.7712518687265863`*^9, 3.771251890924746*^9}, {
   3.7712520171157627`*^9, 3.7712520210598516`*^9}, {3.7712523024216223`*^9, 
   3.771252313036442*^9}, {3.771252358229828*^9, 3.771252384365079*^9}, 
   3.771254209551516*^9, {3.771326746956266*^9, 3.771326771914145*^9}, {
   3.771352572620476*^9, 3.7713525747253933`*^9}, {3.771356329990806*^9, 
   3.771356345784625*^9}, 3.7715403486804132`*^9, 3.7716033338055563`*^9, 
   3.771704761287937*^9},
 CellLabel->"In[61]:=",ExpressionUUID->"a58ae607-e3f4-479d-9dc6-6664faa1cf71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Are there any correlations at all?", "Subtitle"]], \
"Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017049214983`*^9}},ExpressionUUID->"8a65fa07-75ab-4cd8-9e92-\
75fdfaaad169"],

Cell["wew", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.7711017038951178`*^9}, {3.771101737640126*^9, 
  3.771101738955223*^9}, {3.771102348054689*^9, 
  3.771102348771636*^9}},ExpressionUUID->"1e314e11-051b-4643-8db0-\
01d456f6b7b3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NormalizeFeatures", "[", "rowsPerSample_List", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rowsPerFeature", ",", " ", "rowsPerFeatureNormalized"}], "}"}],
      ",", "\n", "\t", 
     RowBox[{
      RowBox[{"rowsPerFeature", " ", "=", " ", 
       RowBox[{"Transpose", "[", "rowsPerSample", "]"}]}], ";", "\n", "\t", 
      RowBox[{"rowsPerFeatureNormalized", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"RescaleIntoInterval", ",", " ", "rowsPerFeature"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"Transpose", "[", "rowsPerFeatureNormalized", "]"}]}]}], "\n", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionRect", "[", 
    RowBox[{"rowsPerSample_", ",", " ", "predictionsVals_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "inputNormalized", ",", " ", "p", ",", " ", "pLinearLayer", ",", " ", 
       "pWeights"}], "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"Predict", "[", 
        RowBox[{
         RowBox[{"rowsPerSample", "\[Rule]", "predictionsVals"}], ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<LinearRegression\>\""}]}], "]"}]}],
       ";", "\n", "\t", 
      RowBox[{"pLinearLayer", " ", "=", " ", 
       RowBox[{"p", "\[LeftDoubleBracket]", 
        RowBox[{
        "1", ",", " ", "\"\<Model\>\"", ",", " ", "\"\<MeanFunction\>\""}], 
        "\[RightDoubleBracket]"}]}], ";", "\n", "\t", 
      RowBox[{"pWeights", " ", "=", " ", 
       RowBox[{"Normal", " ", "@", " ", 
        RowBox[{
         RowBox[{
         "pLinearLayer", "\[LeftDoubleBracket]", "\"\<Arrays\>\"", 
          "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
         "\"\<Weights\>\"", "\[RightDoubleBracket]"}]}]}], ";", "\n", "\t", 
      "pWeights"}]}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegressionSquare", "[", 
    RowBox[{"rowsPerSample_List", ",", " ", "predictionsVals_List"}], "]"}], 
   " ", ":=", " ", 
   RowBox[{
    RowBox[{"Inverse", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
      "rowsPerSample"}], "]"}], ".", 
    RowBox[{"Transpose", "[", "rowsPerSample", "]"}], ".", 
    "predictionsVals"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"RunRegression", "[", 
    RowBox[{"weights_List", ",", " ", "rowOfSample_List"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{"Total", "[", 
    RowBox[{"Dot", "[", 
     RowBox[{"weights", ",", " ", "rowOfSample"}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "rowsPerSample_", ",", " ", "estimatesPerSample_", ",", " ", 
     "featuresNames_List"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{
      "inputTrain", ",", " ", "inputValidate", ",", " ", "outputTrain", ",", 
       " ", "outputValidate", ",", " ", "outputEstimated", ",", " ", "\n", 
       "\t\t", "modelWights", ",", " ", "error", ",", " ", "chart", ",", " ", 
       "result", ",", " ", "trainingCount"}], "\n", "\t", "}"}], ",", "\n", 
     "\t", 
     RowBox[{
      RowBox[{"trainingCount", " ", "=", " ", 
       RowBox[{"Length", "[", "featuresNames", "]"}]}], ";", "\n", "\t", 
      RowBox[{"inputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputTrain", " ", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"inputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"rowsPerSample", ",", " ", "trainingCount"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"outputValidate", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{"estimatesPerSample", ",", " ", "trainingCount"}], "]"}]}], 
      ";", "\n", "\t", 
      RowBox[{"modelWights", " ", "=", " ", 
       RowBox[{"FitRegressionSquare", "[", 
        RowBox[{"inputTrain", ",", " ", "outputTrain"}], "]"}]}], ";", "\n", 
      "\t", 
      RowBox[{"outputEstimated", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"RunRegression", "[", 
            RowBox[{"modelWights", ",", " ", "#"}], "]"}], ")"}], " ", "&"}], 
         ",", " ", "inputValidate"}], "]"}]}], ";", "\n", "\t", 
      RowBox[{"error", " ", "=", " ", 
       RowBox[{
        RowBox[{"Norm", "[", 
         RowBox[{
          RowBox[{"outputValidate", "-", "outputEstimated"}], ",", " ", "1"}],
          "]"}], " ", "/", " ", 
        RowBox[{"Length", "[", "outputValidate", "]"}]}]}], ";", "\n", "\t", 
      RowBox[{"chart", " ", "=", " ", 
       RowBox[{"BarChart", "[", 
        RowBox[{"modelWights", ",", " ", 
         RowBox[{"ChartLabels", "\[Rule]", "featuresNames"}], ",", " ", 
         RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]}], ";", "\n", "\n",
       "\t", 
      RowBox[{"{", 
       RowBox[{"error", ",", " ", "chart", ",", " ", "modelWights"}], 
       "}"}]}]}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.7711662130281467`*^9, 3.771166215352922*^9}, {
   3.771197303426878*^9, 3.771197321169957*^9}, 3.7711979403664637`*^9, {
   3.7712530800287*^9, 3.771253141824217*^9}, {3.771254232616996*^9, 
   3.771254234573873*^9}, {3.771254814339655*^9, 3.771254823206771*^9}, 
   3.7712553544971323`*^9, {3.771328798359071*^9, 3.77132888435972*^9}, {
   3.7713291571827993`*^9, 3.771329174673594*^9}, 3.7713293391980677`*^9, 
   3.771331075460321*^9, {3.771331205881012*^9, 3.771331248469551*^9}, {
   3.771331393724903*^9, 3.771331454273843*^9}, {3.771331858875564*^9, 
   3.771331859310504*^9}, {3.771350065960774*^9, 3.771350191065762*^9}, {
   3.77135028904036*^9, 3.77135038946412*^9}, {3.771350481018968*^9, 
   3.7713505263093023`*^9}, {3.771350558816463*^9, 3.771350563948971*^9}, {
   3.7713506446320753`*^9, 3.7713507842900333`*^9}, {3.771350817906404*^9, 
   3.771350846145687*^9}, {3.771350876488069*^9, 3.7713508841268377`*^9}, {
   3.7713509316696663`*^9, 3.7713509342461567`*^9}, {3.771350984109829*^9, 
   3.771350998574337*^9}, {3.771351055424478*^9, 3.7713510624171057`*^9}, {
   3.771351101585807*^9, 3.7713511911911087`*^9}, {3.7713512369373617`*^9, 
   3.771351250335422*^9}, {3.7713513310208883`*^9, 3.77135133335221*^9}, {
   3.771351380363995*^9, 3.7713515293458843`*^9}, {3.771351774107162*^9, 
   3.7713517906407347`*^9}, {3.7713520499554853`*^9, 3.771352315025916*^9}, {
   3.771352349303665*^9, 3.7713523510083237`*^9}, {3.7713560430968847`*^9, 
   3.7713560435384607`*^9}, {3.771356193141917*^9, 3.771356209902203*^9}, {
   3.771356247076288*^9, 3.771356263584107*^9}, {3.7713563852974243`*^9, 
   3.7713564696868773`*^9}, {3.771356591772225*^9, 3.7713566103639402`*^9}, {
   3.7713566444034557`*^9, 3.771356701197536*^9}, {3.7713567502401333`*^9, 
   3.7713567575500526`*^9}, 3.771356823846187*^9, {3.771358873740418*^9, 
   3.7713588807112637`*^9}, {3.7713590285376263`*^9, 3.771359057644163*^9}, {
   3.771359109388794*^9, 3.771359112790992*^9}, {3.7713591431612787`*^9, 
   3.77135922756713*^9}, {3.7713592619363203`*^9, 3.771359292243853*^9}, {
   3.771359372067912*^9, 3.771359374741563*^9}, {3.771360895901122*^9, 
   3.771360899433941*^9}, {3.7713610810330563`*^9, 3.77136111925381*^9}, {
   3.77136401463911*^9, 3.7713640164404716`*^9}, {3.771446660355817*^9, 
   3.771446727670577*^9}, {3.771446873632465*^9, 3.7714469866514874`*^9}, {
   3.771447225288508*^9, 3.771447245418425*^9}, {3.771447572405847*^9, 
   3.7714476354199877`*^9}, {3.7714477162181168`*^9, 3.771447722343709*^9}, {
   3.771448126328205*^9, 3.771448131249926*^9}, {3.7714481648627768`*^9, 
   3.7714481686175623`*^9}, {3.771448253260311*^9, 3.7714482857993307`*^9}, {
   3.77144844007451*^9, 3.771448451243819*^9}, {3.771448558866544*^9, 
   3.771448563297144*^9}, {3.771448764648456*^9, 3.77144876860842*^9}, {
   3.771449067102228*^9, 3.771449080131538*^9}, {3.771494289253888*^9, 
   3.771494327853054*^9}, {3.771494615217038*^9, 3.7714947103326817`*^9}, {
   3.7714948502019863`*^9, 3.771494852978088*^9}, {3.77149494734484*^9, 
   3.7714949614652967`*^9}, {3.771495406943359*^9, 3.7714954693078527`*^9}, 
   3.771495540516691*^9, {3.771495803706192*^9, 3.7714958676028767`*^9}, {
   3.771691861212635*^9, 3.771691862651863*^9}, {3.771694375623562*^9, 
   3.771694390529674*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"d54f38e5-c079-43b6-a6e9-599471a76047"],

Cell[BoxData[
 RowBox[{
  RowBox[{"citiesFeatures", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImportAllFeaturesClean", "[", "#", "]"}], " ", "&"}], ",", 
      " ", "citiesPopular"}], "]"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.7713559939252043`*^9}, {3.771358910281856*^9, 3.771358911513682*^9}, {
   3.7714488592558928`*^9, 3.771448865106896*^9}, 3.771690417560025*^9, {
   3.7716917617024937`*^9, 3.771691765072441*^9}, {3.771691812559931*^9, 
   3.771691826176497*^9}, {3.771691943131898*^9, 3.771691964958601*^9}, {
   3.771692100326106*^9, 3.771692166683044*^9}, 3.771694060071576*^9, 
   3.771694175211544*^9, {3.771694365496614*^9, 3.771694371469736*^9}, {
   3.771709660968775*^9, 3.771709665364229*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"citiesFeaturesValues", " ", "=", " ", 
    RowBox[{"NormalizeFeatures", "[", 
     RowBox[{"Values", "[", 
      RowBox[{
      "citiesFeatures", "\[LeftDoubleBracket]", "All", 
       "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Transform", " ", "units", " ", "into", " ", "raw", " ", 
    RowBox[{"numbers", "."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"citiesFeaturesNames", " ", "=", " ", 
   RowBox[{"First", "[", 
    RowBox[{"Keys", "[", 
     RowBox[{
     "citiesFeatures", "\[LeftDoubleBracket]", "All", 
      "\[RightDoubleBracket]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.7713559939252043`*^9}, {3.771358910281856*^9, 3.771358911513682*^9}, {
   3.7714488592558928`*^9, 3.771448865106896*^9}, 3.771690417560025*^9, {
   3.7716917617024937`*^9, 3.771691765072441*^9}, {3.771691812559931*^9, 
   3.771691826176497*^9}, {3.771691943131898*^9, 3.771691964958601*^9}, {
   3.771692100326106*^9, 3.771692166683044*^9}, 3.771694060071576*^9, 
   3.771694175211544*^9, {3.771694365496614*^9, 3.771694371469736*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"be32058e-de7f-49c4-9930-e83a1bd14d48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"citiesFeaturesValues", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{"#", ",", " ", "40"}], "]"}], " ", "&"}], ",", " ", 
     "citiesFeaturesValues"}], "]"}]}], ";", " ", 
  RowBox[{"(*", 
   RowBox[{"Some", " ", "features", " ", "were", " ", "not", " ", 
    RowBox[{"recognized", "."}]}], "*)"}]}]], "Code",
 CellChangeTimes->{{3.771694585964344*^9, 3.7716946321829357`*^9}, {
  3.771709512918837*^9, 3.771709514486185*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"796626e7-9229-4ab3-b59e-8111135ac5f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matCovs", " ", "=", " ", 
   RowBox[{"Covariance", "[", "citiesFeaturesValues", "]"}]}], ";"}]], "Code",\

 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQfaXg6wN3yTeODZI9j0C0XnTfCxA98eoPMO1Uqf0f
RFfIiDJ6AOkn1p2aIHrS7Ylgeq+73hIQ/aVAfB2IDt2okuAFpN1m22aD6O8s
J697A2nRgg9g2s0g43A5kN6YrXwERO96bbjtLZAOK14Ipu/YZF8A0SfseK+D
6AR9Z/53QPpZO6cAiM4SUREF0Xe4X4qBaAVTOTkQzXTUDUxHMcbrgugtRgr6
IHrZFl5LEC126qU1iO79d9sJRG8PlnYBmxtzcc57IH1sMec8EB12NHoliG56
fh5MzzlvcRhEO/IFgGkAWOiTCA==
  "],
 CellLabel->"In[81]:=",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"Abs", "[", "matCovs", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.771691374454886*^9, 3.771691375723896*^9}, {
  3.77169441948938*^9, 3.771694436092937*^9}, {3.771694877613312*^9, 
  3.771694879872117*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJx0XHdcTf//r+wSyUooZaVJGZV4Fg2SCMkIqdBQn0QKUVHKFiIkGS00VHal
KO2097773nMOSRmh3/v7ePz+PX94PHIfde+557xfz/Faas7/bdo3TEpKSuP/
//3v59oE42WDegwMp869y/lKoXRI/ellKyE6t46NLllKQ6pG2fO1mQhZOrrD
O3zboWyeuKdcjYZd/eREhifE29xVm1vGtGHm2C//zQ5jcMvfZEyKPoN7Z7T8
L12UoHTRpKIXkTT2SMRxNXfEWOJx8OAXgx7smT/G/stuCptWuswsjOSh4773
vb3cCpiaHLn22IZGYtpJfn2UCO2Tvp/RUu7E6Yfa8ePFFNT/KLzS+ybAJ69O
V611TTgqbOzyWULh4ob+0g1tXERYdEj/2ViMI0ZH5heXUXDLUD1W6CVAmvLb
DbtWNcDgzO1kFWsaJ1ZEaa+/KELP7Jb/rgk7cD331uHFe2j8a6of9btVhLff
NhiEr+5C8v2kf4dCKFTxIw3SNfhY8VI7uHB1NaoGj1wqO88g8oDbVPk1DP7I
1ObNK5BA4/Ud6fZHNIxbD27w7BQjMM3QwpHfA67o/CllEQ2hQ/vu8TwJzu70
1hVd5uHXgaLxcXfJ3w+UN8SHM/hqcG/vNXcKYQsWDO6kaSxXK181p1+CwP3/
Rea85iF0IpVsdZkB1vjOM7Rn4LJYpHmAL0HYraRgldsUzksVXll2lY+FR12v
D7TUYNy0pjGHf9F4LFWUVqtOQe+e2OmaHh+clYZqdjE0mrKYlYIPYngc89Re
GNOD0duzb+e9o/Fiv2dkupEEzp+0Di2o5uD9hMrjZ+IY6DpYxancYTD8oN6u
WPJ5K5y+KK00oPFh2+maZfoiBBTvGclb0g697/wvvxVpbK98eVwtXohHa79J
Dcq2oqNN/C9yOI2v48otZ+4XwqraTlptYgtGPixwGVBlYD03/tHOLAo7VZ5v
mvFEAL/6KFnb6zToS+o7muPEMB7S0o1Z3YOPd68ZqjnQuCYIDjqaI0K0/tKj
dsJOPJow41zTbxqpUheuK2tQ8Nn6XsNmBR/0Z6fWK9002nIV/l4pliCFH7G6
xJyHhTWK8rb/0VgV9fFUlZIYRvqZbwq7uzDRl2Pk6shAbvEk7axoGpLU/opx
f0Tg1f64c2gvBaeNyq05MTyY/3TpSTOuxITTeYYLcmj4VpisHgYJtnTH0tKd
HCSUuW0s82QQtt11irCGhuqtTwW+18XQPDtvwQYXBhdsZk1qyqDx0/f5KHlT
MRZkTKyaYcZA3tAk4f4iGg1qDoNfvggx8/aDvqByCfTc1JRdJ3AgNbl+xJBX
FkKX1z6ZuotB0s1vy3fcpdH47WrwNxkxMs/JXQiZy+Bw+Foz2xIKDvJfv0V3
CWDgOWe2+RgG659eXBhN4m/YAjvb0WV8dKU45ypuZXCkwVS1LpiGbkJj/Xdy
X+cLY4P8DjJY8DhFy7OehltNzonB22I4TS6aNl+WhgZ9hDl7SoiAj6npcw+3
YPG8vzYPFjMw8b/+4IgMDb3156vhJ8QXQVB0/hcafr85ffr/JHgp8U6zqeLh
lXyl8amxNDy+eQx9iBAiwkk7d//dFthfqJ/G3CfvX2h37HKVGPtrZl/NfN8D
DwfLBRpzGJQZWs5dUkChIG4RttYKoP+SN2mrBYMv4/wCo8xo7Jp7NPrwNBFK
5wmvlKrScJ5bnD6/XYjw6yNztghaUaRxePjvtzSKDV21PyyVYJ5Bw+1zJRx8
SLHv3rmMQeUWNecCcl0b592TVbwqRLXvwrIJfiQ+58Y8/N5P7o9p+Ox7jBhT
pOSy549lkNo/9OU0iVvVotg0LwEfMfuyBEfOMWg0itr4bxWJG/ND9L+XEmhX
J7n2SDO4Er/YPnMVhU/X9mw6fpqPRG9NheRVNK6PmGg900eEBrtBja/2HYh7
39/r8B+DVcfHXbProtE+t/mS/Usx1t6tyf8vlMGboMWKIxcy+Gtq7ZkYJsHR
I6+k6iIZ7PSJC49zZtCRtmyy1RgKG64lFGbsZJBfezh28k0a3jstHq3sF2F7
Q73WBHcG5z8v+nO7mEZL/dqGxwFiLJ68ZO1pbQbVb1MiCzgURr6ddNZrrhCv
jHLOGSgzeJrbdOlmLIXd788g8JAAx9t3zdzvwSBiRuKmhxU03m+dJX4XJsYV
pdrjz6tp7Lu1d8NtwgczVNxrq5K4eBd8eUv2KQbXlQssTpD3a29r6YtdL8Gi
grQJ1nsJrkasU136lEa331CsvjZ5/md/WZzeTeJR1OGVFUfj2489QR0KYlR6
P9Wuu8kg+fb8n2Hk+STEq6V6GVOQsx33djp5/c4Bjb/lvgysLql92mZAofxe
l7FpAw33uhcaNfckqCwxvh9Tz0VBv7p2SQfB7Q83TinmSkDtpsYHL+DB9vKG
C9sIzm7f+Chs0ikaMVb/XlS+FMEW75Yb7mFwccV2GVeC90z9576WqWKYSlR6
QhIoeMevpz+W8iHO8X+1Ir+WNa45tmc1Fx5jEEjtaAgdwaBEa7ur0lQJLD13
7xpFcGGiTqvzt0kSaKZ/nXfrEAerjLoN/OUYNFj4dAj2U/CcZhGV0MWH9NW5
vsv2k7gr8zpfR3Doevm5wDhHMb4ebvIyNWHwQD/okBmJA92aE7MX5AlhM7J5
5hQSJ9ypPkmaHiKcj7TSGlraAbm//8n3fqARePvhgtYtEkiNWthbM5ULj0zp
Rd29NFwvJI43Gkkh4bfBbS0eD8O/OZnFLKRxr61h5It5IowrDRHEjm5Hr5vd
0MY0GtGf+BczZCX4YG66hdnKQWH58q8eUuQcKn2P0lhBIaCvcozCET5OrPaX
91VksPGvrdiK8O3wG+0mZnMFEG/Q2XrTiUZuj7+FQbcIno53js+068KHY64b
XHtoZI9wLssoI+d+1T7vXhuiI+zGvm1fR+PS/voz/GsiFJxtS+HLdqI0PLaR
JudMNz3v4tYHFB7uqdv/KECAho6+a833GaSUPoqOucXgTHC0i9J1oifW+a2L
y6QhE5ccN6gsQdPITX7WIRzkdbaNTZzO4OflxQcUH1O4uaWq6H2QAI6HQ9a+
8aAxRixFBY8SY9OVFTW5WV2A81FpITl/J8IshxUTPjfapzl2R7MYN/efMJmd
QuOvrbb4qIwEJpkcvVAzDt4+dHz2bAqDAu6qtlWRFB6Xh8yusRWAqVMdHttG
Y3P63cyuFxK4ZCaH6U3ioc9g9tWP9xjYK7/PenuFgU7uh9RbpwguHvixe7Y/
+T4PAwsL/9Kokl1t/o18zozCD43njzMwO8JteChLfl9heM2BORLcsqOlFhH+
1W2/VXDoOYXgYzsQ8VCAi9PnXNxnyqDi2291iS6NbakbMvhCIcrazWtOF9DQ
1xi9rWSHBLnzitown4u8PM6heII71Fzlgq3pNCbfz5REGInxdGnKiFGV5PyN
+6Dy/pQEeQttu4tDufA9fV/wS4OBJFNjrmcDhSfuh09nyQhxYcepz9+2EF4s
jHIzfCGCzthz7j45nXjWVzHv5noGQ1MvHflAzkV16sfi8+T8/nkaanZ0I4Nm
+2nScZ6E/xeb1lecFSHC11mQLk1jwuuo7rDtQtxqvTB4p7sZQ51DNV3/KMTW
/u42XC+Ez7Er14yeN7PGNRtfB/Us1OYFM8i8um7TY3UGn4Rv3zc5k/t8/GSN
8zMaDxW4dfeHxCgy0BmcZczBiuZix1fk9zJf5l/8mEvBZJa9s06hAGE/y4MV
iE5odLXUmVdFA4Z7H1peFCO27MKaK7oMAjYu3R8qoWA7esajKCMh7m2L9Tm4
lcaND357yt6K8L1d8e1/LZ34V7Qv3TubvL56z4FVJhJ8Xn0tvKmRA2mP9rJF
wwlvDrZN9V5H4XuLzSy923x4pmqpz7ejUWTYmd6VIELQb7mQWt9O7IvLeytd
R8N6+m9zhygJvJ39+y6952Km5iXFBiUG8dsDhnkT/ZdXE+E2wVWAkJIlsk8I
D90a/sIwoI/C83en/pjbClHsnF3GOU4jLnvBmlvmYigr6l94tLkbh1WnT6sn
7+/6ZfJvv2gJRsWt9HtaxIWFTKmeHonf1U8m/Np0VQTFE+lxQX87IFliscHf
iEGIe/T7t5NobIo3li5+LIRY92xbS/T/dOnC7zonCV+l1RU42FLA17oX8ak0
jsb8tNEaLcEzzZZPOzZyMG//ji8D4xgsG30gZtYRCtt8Cm7KDhMgUjpY7eYJ
Ghc6/i0wshLDJPvC7sAd3ViUs3nRldsMvo2evrcxiHy/P0rLzO0pzFrtIchI
ovFgV5v0814x3jtN3MWZzEG9RUlS4CQGv+/qvvwXQUHKxr/FzkiA9rXHnzrU
0njWvzup7poEpwL3Hx35hounhrUPF1xkUN4V8mMZOdf3L0Y8uVUtgW9he96u
q+R5fdm/VZnou1tGt+KFvyU4Z/d56skLDJT+3P751JrwpqCr4EepBNX6j+VV
yHPJ/T0s8eVNCrLbyl5K7RJg0K8+xNOBQbGaDE8cRvT4Gn+/RWUiWCXucfpM
+H6PweC40Z4SzM9LHBNix8WEwIqhTB8GKjVSRUd4NCzNjMMyPhKeHbk8rJPo
D/2xwUn9hRIsv1g0afhKHipb5zy0X8KgvrZmvMoIGs1Z5lbagUI8/PcSETto
xK7x5diVisDdUSq5PbkLXZNH+K05QvBfS6Zh8BsNhwsyJj18MU5kPiyRbGZw
LdzTICOA8OwtjRsVSUR/fjGd2ixF40dGlHKDvRDdb27+Ua5tZo1rNr5m0+Ee
42sUvxB+nNy1dG898bWmmknp7Z+ESNxeURB/kUZN0pxtz8PFeLPRWFNHpgeD
4/QSkrk0ns/976xVHdH5NVp2q114GH2n3EeXnEMV1zDPhwRfB7XfKL6xomC5
Or9i/WkG0eE58j/mM1h52dD+uY8EDf6Wxq4vKIjlN8u2ygngX3ClBfl1EPYp
pPx8TONX7HOjuxwxnnn8cTft7YH+q8yhwjIaf9zPZhgfleDktVvuD7yJ3y2P
Hr3rOYmv7Y/eeytKYG5Q/m+sJwfmzJ91dv9oJJsN/jIk/jh9KC/ecw/xr8f6
Sl5YMgj22hz0yZKG3L4u/++Et+2UJUO98xh8mP7mcm4lhaJjcb65jAC+lnMM
L34nfvT70+dys8hz9ZpreH6oCcdXRu94aEV03Umzt8LTIuz+u23qy1cd6JDK
ri0nvDN3j6myJeH5zjdZNYfHSMC97pz0SYtB6bqhyKEuCvXdO3caqRC9//OT
ezc5/0GlDe7MBgbe2TaD8U0SyH25lK/zgIHRgdPjHsaQ51YaPDg/jvCtrL+K
22wGl3WT/ffkUxj/TCZjoEyABU6HAsufUZikGrLOis/Hyrg/2kd06mBSVNSm
SXRLgIPBlIhhFJbdWBGq1cHD+bNhhYURDPpDssPdCL+5JcZGWqRLsOxVW3LA
URolXlNG8gzEeDnvaN0SjW50PDg5uNuK8KaDfIPFWhqzgy4cOqwjwk5XVa1N
R2hw3PWaCrTEKExMVZ44sRs1ESUffNaT+IpadLw5mviQ0A2uzQs6kVTRdLrc
kMHS1yu3LSH+eJOuvJlRrBCP/z5LHPO/uIuYPrWX6Jr0MTNMNHLESAoa51lM
+EZDOqunjOjCkaJbj6WOceBzeF73ZeLHFFNXDRnclWC2cPqxikoubMNOR5T7
0hhLu5wZPk+Ma9p3D80c3o1pZ7XmbwqkYT4/P2ForRjp+SfcsvZ2Y8s9L2aI
8E2Vtv/+3+ckcF1v8W7oARdWr73lfpFzqxA8Vu2UJtE7vZe8zf0liJH49tdl
U3ARTn3qqi0AX2bBViOzeqxQ0EpvI7ica55i4pgiBGM6bt52rVbWuGbjazYd
zuavtav+XR35ifCI5raI005EzztU9aov5eKex4oPsW4U3qUu71fN5uHSkhFa
lxd9hvXYTM85xM/s10iiaeIbI7/GLNesa8T0AxqhJ66R537ue13OPaKb+54P
nF3eg59Tsq0XRFE4eXLGE+EpPg6efb2Oc7MGjiovnO/akPsQvTgwf2Y3nG/G
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
+QFHEWy5sxfG3SDnPMf8sz6Jp/S1sds/zaHQ/934huI2opcCtcJH5ouQ35o+
1Py7Eyule903EJzdttP3aZ6NCHf3PJq/KrYdSYlHf3sEUbizaP3xGlU+thx7
78KfVY0A8du3uQcozCjjwuY1D/yGhxGHJ36G447CE9vdaKwbprcw4p8IrneS
qt3udeH1dIVqtzYKpyo2uAa+FECv1m+uo1MjZhwaL3BdSSOU82jdvz0irNa9
WKso04FFG1JllwdTKNHfv8tpNh8bJ6+Z2q1bDYXBd1stiV+Vneq8vN5TDM2b
o+kXb7oxKSBjmMYj4oM+hLi8bxNj3qrWLe6dPdjSfzVomzz5/V1BZ05eFGLc
1JhfCk9aINHX6RhxnMbrLPtnG83EaJ8ub6qyrhvH/3sqeL6JRm3SGu+sZyK8
nVlROjuyE0YJseC/pTCTL7Oid7YALZuKrP+o1iPUafqwfWrER6nnBMWHcqEy
YaSJy/1CjFs6+9HHdgm2v+j+ynHk4PFCa+fSCW9Y45qNr9l0OJu/ZsubseXD
2epcB1VaHKjlNBLMZw9P2iqCt4q7bnB1O6QunrLd3klBNeurqsNHAbRnzhgu
udaIRzJJjNpDEo+PHqx4+IqP8f39p/751eLu6/KabRU0LGYs7NAOlOCmT9QL
pVNc3Ep8V26qQOMmzftv8W0h+htdpCa2tSAzPy2sTSTB0sEi6bJIDiKav3yc
tCkb/ioOQ7ECCs/Ob5IPFQhQ/Tnbw0CtCboTE9S9nSn8HXnGYNwDHnY/6OyN
dayEFmdFhvtoCrzpeoP7pnLRtUQvYZj5B6zcf3/SxhsUsOdeof4JPkyj/bEu
ogbC+VtuqE5ksOJtd1zjGQo34jkVYi0B/qt2ztUgeHd//oE1/WKCu22zNGVq
xOg7OiZnUSvxhX10e4IdB1Qdr+y302uci+6NGf2DRvQYpipjGrkfs5R/107l
w6x23yDtTqOfOzcteDjh37pbkV+fdWF+lttw9WIauvtP/w5wk2Cvq4VKszXx
71o3mzp0GCywnpEuElL4bJt49LO+EAum7Z+sQ3zmg+lmG7IjROh2ab88oqED
h8ctbN6hT3RL77PRW3VFyGvGlrh57ZD99+FS1HoKmdvNkrkWPPwYpvH1zJUy
aJfs6j15mNy3zBdaTyU83F+ZI/1pcxWm6+VFLr1PfKzHpe9NFWLsyLVJTnzd
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
D2IwMsg=
   "], {{0, 0}, {40, 40}}, {0, 1}],
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{39.5, 
       FormBox["1", TraditionalForm]}, {30.5, 
       FormBox["10", TraditionalForm]}, {20.5, 
       FormBox["20", TraditionalForm]}, {10.5, 
       FormBox["30", TraditionalForm]}, {0.5, 
       FormBox["40", TraditionalForm]}}, {{39.5, 
       FormBox["1", TraditionalForm]}, {30.5, 
       FormBox["10", TraditionalForm]}, {20.5, 
       FormBox["20", TraditionalForm]}, {10.5, 
       FormBox["30", TraditionalForm]}, {0.5, 
       FormBox["40", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {9.5, 
       FormBox["10", TraditionalForm]}, {19.5, 
       FormBox["20", TraditionalForm]}, {29.5, 
       FormBox["30", TraditionalForm]}, {39.5, 
       FormBox["40", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{524.58984375, Automatic},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.771694421784465*^9, 3.771694436839675*^9}, 
   3.771694614094281*^9, 3.771694880734344*^9, 3.771703749525962*^9, 
   3.7717090247043657`*^9, 3.771709521020454*^9, 3.77170967253463*^9},
 CellLabel->"Out[82]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
OtnXGs2S587AJtGIVl5bMg3Hl5Eokeeh9avDLYfk9dmMm6C0DzEqHpBR7C/X
uhxDo687LNddtUYdaS2X8zvSWib7jrSWqiPyetnkeWhlX3OJRO1+bDIMaLGv
SLVWLFexRZfJ82LpvbEOWHipqt+k003gw8HVXp+nWqrWqRYZ/wBbOU2Jgtq8
V1RNdh85zZrtT8i+mm2PqZqtj2KT56GVfVseVq01W1S7XIiA2XIQx5NLaSye
qOryh8hp1u0bilARCCuX/EqF034mxwvPO4OvfUzFdz2r4jkD0GXS+lVs/V0q
tvY22W7HJUrrV+G5p6mK6d9XFTNOlX1o/Sq64hpVlXmjbDfIPrRyvO1P4iiy
9efx+mMIdr8g24vY5PzQyr5dsr5eepmqXHy+7KtcfIGEnvwu53eJaq3dpdrb
yuVSWkt5KQdVo/BfLzlGGGY41h8QhkvnqibJGkG2wqtEg7xCliKVsq+9PYLX
CjBNFYu9583n8xbJMUvkueXoLum0FPyu2poK5JKuk1O4VM5o6a9wRksvVdHl
V6nGUgneivQgjsUjLFR1BSNV3YER6NwDyHB1kvXqJavUF02QQUXr5+NGidPD
bRWIUTmvFPnQHlXtzcWqZsczGFhJVNl90W/ZfVT15gexydhIK83Ge+U/qjfc
I8P8mGquzESWjK5G7EfXqObIClW3f7g8uW7/MA7uu9Kpz2FDJ0uLTh7IAGqq
WCTPM+cueYE9VzoXmU5a2SeX1ygs1ua9hkwnrV/V5r6M46vWulx5X7TCYf1e
eX2GikjoBKX9ueyLpJ0uA3mFXCu4NtddKNd9aJZqE2Jkyd+4D1w3ymRdvwcb
uK7fwzyRK4G7FZu8L1o/8ohk6ImqdGRQnlc6+tP4IPHep1TVokv/Gl/2v8wq
yTz6AOYa9oA0cAbmpBXmhKO6PW+o+I6nMAHtfAbduP0JFc/uiw1dy/GKb3tc
tca32SBiumhvKZXhnqLq9w1DV3Diq5fUGF12pYrM/6UcL7LgbL72CVUrTNTu
el6eh1aGeeN9qnr972W7S/ahla6dd6YKz/qxCs/+iexDK6lm1fUqtvq3st0K
NqWV4+3sh6PI9hyP95wZvtrcV7BhSKWVfbtfVlUZV6nokktkX3TJpRKO8ruc
3xUywLsBi+bBpo/JqqFgDObXgrHI9AXjwBE4A0vS6miSVwhtUTJXSebCqim8
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
oufWyS7jvkv+H2vq0Nw=\
\>"],ExpressionUUID->"90d29e60-a92f-4ead-8c0f-11a2a03cfab0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"m", " ", "=", " ", 
   RowBox[{"FitRegression", "[", 
    RowBox[{
    "citiesFeaturesValues", ",", " ", "citiesPositivness", ",", " ", 
     "citiesFeaturesNames"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771350791670023*^9, 3.771350804378113*^9}, {
   3.7713508524486303`*^9, 3.77135085577607*^9}, {3.771351033358552*^9, 
   3.771351048659725*^9}, {3.771351372288561*^9, 3.771351372558053*^9}, {
   3.771352353446257*^9, 3.771352432732538*^9}, {3.771355905146647*^9, 
   3.77135590634321*^9}, {3.771356050440531*^9, 3.7713560527164516`*^9}, {
   3.771356736256961*^9, 3.771356737540874*^9}, 3.771359010755967*^9, 
   3.771359171546298*^9, {3.771359211263359*^9, 3.771359234237255*^9}, {
   3.771359390294793*^9, 3.771359390770022*^9}, 3.771364051902135*^9, {
   3.771446959970146*^9, 3.771446960419052*^9}, {3.771447256988364*^9, 
   3.7714472578383904`*^9}, {3.7714486141367292`*^9, 3.771448616059444*^9}, 
   3.771448980094249*^9, {3.771494342712265*^9, 3.771494344069911*^9}, 
   3.771494429235093*^9, {3.771494529067401*^9, 3.771494544179295*^9}, 
   3.771495565394459*^9, 3.7714956915890503`*^9, 3.7716944908173656`*^9},
 CellLabel->"In[83]:=",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],

Cell[BoxData[
 TemplateBox[{
  "Inverse","luc",
   "\"Result for \\!\\(\\*RowBox[{\\\"Inverse\\\"}]\\) of badly conditioned \
matrix \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"16.42398418097838`\\\", \\\",\\\", \\\"23.477389396541174`\\\", \
\\\",\\\", \\\"20.52254232107295`\\\", \\\",\\\", \\\"15.38245427249953`\\\", \
\\\",\\\", \\\"22.420399630867113`\\\", \\\",\\\", \
\\\"17.68174108783373`\\\", \\\",\\\", \\\"23.341914951431477`\\\", \
\\\",\\\", \\\"19.02309631099394`\\\", \\\",\\\", \
\\\"17.594675033165878`\\\", \\\",\\\", \\\"16.261066467178722`\\\", \
\\\",\\\", \\\"15.779874807574505`\\\", \\\",\\\", \
\\\"15.620175750047192`\\\", \\\",\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \
\\\"17\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
\\\"18.830828625015442`\\\", \\\",\\\", \\\"21.974273279033305`\\\", \
\\\",\\\", \\\"21.112173999681225`\\\", \\\",\\\", \
\\\"20.302105522605256`\\\", \\\",\\\", \\\"25.776746606541725`\\\", \
\\\",\\\", \\\"20.06701283582868`\\\", \\\",\\\", \\\"16.83560215564803`\\\", \
\\\",\\\", \\\"15.40254968171752`\\\", \\\",\\\", \
\\\"15.401773175955485`\\\", \\\",\\\", \\\"15.394058666004657`\\\", \
\\\",\\\", \\\"15.504067688495683`\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"38\\\", \\\"\[RightSkeleton]\\\"}], \
\\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \
\\\"\[RightSkeleton]\\\"}], \\\"}\\\"}]}], \\\"}\\\"}]\\) may contain \
significant numerical errors.\"",2,83,2,18189172859146562179,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.77169114345396*^9, 3.771694491300901*^9, 
  3.771694645932941*^9, 3.771703749629182*^9, 3.771709024934712*^9, 
  3.7717095289809637`*^9, 3.771709674616291*^9},
 CellLabel->
  "During evaluation of \
In[83]:=",ExpressionUUID->"108d07a4-702a-43ad-9c79-05b4a557e6f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"m", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", "citiesFeaturesNames"}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{
  3.7716944999393044`*^9, {3.7717095425263433`*^9, 3.771709543809411*^9}, {
   3.771709574086865*^9, 3.7717095878774652`*^9}, {3.771709626755397*^9, 
   3.771709631337878*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0., -0.16510280115910025`}, {0., 40.37029115496067}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 0.6297088450393267}, {-0.22437380927985762`, 
             1.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{288.1268068295454, 326.34927656473496`}, {
            190.73409326790267`, 198.88142164846857`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.22437380927985762`]& ,
         TagBoxNote->"-0.22437380927985762"],
        StyleBox[
         RowBox[{"-", "0.22437380927985762`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.22437380927985762`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 1.629708845039327}, {0.6195858175043725, 
             2.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 430.5161012229975}, {
            180.4079913908836, 188.55531977144955`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6195858175043725]& ,
         TagBoxNote->"0.6195858175043725"],
        StyleBox["0.6195858175043725`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6195858175043725, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 2.629708845039327}, {0.0052028548259075436`, 
             3.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 327.2239977914985}, {
            170.08188951386455`, 178.2292178944305}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.0052028548259075436`]& ,
         TagBoxNote->"0.0052028548259075436"],
        StyleBox["0.0052028548259075436`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.0052028548259075436`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 3.629708845039327}, {0.8311511562692785, 
             4.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 466.08516837120476`}, {
            159.75578763684553`, 167.90311601741143`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.8311511562692785]& ,
         TagBoxNote->"0.8311511562692785"],
        StyleBox["0.8311511562692785`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.8311511562692785, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 4.6297088450393264`}, {-0.9154581307209906, 
             5.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{171.93941631503475`, 326.34927656473496`}, {
            149.42968575982647`, 157.57701414039238`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.9154581307209906]& ,
         TagBoxNote->"-0.9154581307209906"],
        StyleBox[
         RowBox[{"-", "0.9154581307209906`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.9154581307209906, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 5.6297088450393264`}, {0.6372986449992926, 
             6.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 433.4940405878739}, {
            139.1035838828074, 147.25091226337332`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6372986449992926]& ,
         TagBoxNote->"0.6372986449992926"],
        StyleBox["0.6372986449992926`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6372986449992926, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 6.6297088450393264`}, {-0.044078719013442846`, 
             7.3702911549606736`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{318.43861598323815`, 326.34927656473496`}, {
            128.77748200578836`, 136.9248103863543}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.044078719013442846`]& ,
         TagBoxNote->"-0.044078719013442846"],
        StyleBox[
         RowBox[{"-", "0.044078719013442846`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.044078719013442846`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 7.6297088450393264`}, {1.0522009891285542`, 
             8.370291154960674}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 503.2488001549938}, {
            118.4513801287693, 126.59870850933524`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.0522009891285542`]& ,
         TagBoxNote->"1.0522009891285542"],
        StyleBox["1.0522009891285542`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.0522009891285542`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 8.629708845039326}, {-0.08359890473942988, 
             9.370291154960674}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{311.7943511523186, 326.34927656473496`}, {
            108.12527825175026`, 116.27260663231618`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.08359890473942988]& ,
         TagBoxNote->"-0.08359890473942988"],
        StyleBox[
         RowBox[{"-", "0.08359890473942988`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.08359890473942988, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 9.629708845039326}, {-1.7226616098230139`, 
             10.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{36.22968750000007, 326.34927656473496`}, {
            97.7991763747312, 105.94650475529713`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.7226616098230139`]& ,
         TagBoxNote->"-1.7226616098230139"],
        StyleBox[
         RowBox[{"-", "1.7226616098230139`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.7226616098230139`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 10.629708845039326`}, {0.04599281831038127, 
             11.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 334.08174187482575`}, {
            87.47307449771216, 95.62040287827809}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.04599281831038127]& ,
         TagBoxNote->"0.04599281831038127"],
        StyleBox["0.04599281831038127`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.04599281831038127, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 11.629708845039326`}, {2.1294772548753045`, 
             12.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 684.3640625}, {
            77.1469726206931, 85.29430100125903}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 2.1294772548753045`]& ,
         TagBoxNote->"2.1294772548753045"],
        StyleBox["2.1294772548753045`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[2.1294772548753045`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 12.629708845039326`}, {0.7403421320530388, 
             13.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 450.81805373481427`}, {
            66.82087074367405, 74.96819912423999}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.7403421320530388]& ,
         TagBoxNote->"0.7403421320530388"],
        StyleBox["0.7403421320530388`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.7403421320530388, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 13.629708845039326`}, {-0.3868809595945608, 
             14.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{260.8055651963375, 326.34927656473496`}, {
            56.494768866654994`, 64.64209724722093}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.3868809595945608]& ,
         TagBoxNote->"-0.3868809595945608"],
        StyleBox[
         RowBox[{"-", "0.3868809595945608`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.3868809595945608, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 14.629708845039326`}, {0.24336686579581368`, 
             15.370291154960674`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 367.2649220181665}, {
            46.168666989635966`, 54.315995370201875`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.24336686579581368`]& ,
         TagBoxNote->"0.24336686579581368"],
        StyleBox["0.24336686579581368`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.24336686579581368`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 15.629708845039326`}, {0.14178676370944743`, 
             16.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 350.1869380103672}, {
            35.84256511261691, 43.98989349318282}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.14178676370944743`]& ,
         TagBoxNote->"0.14178676370944743"],
        StyleBox["0.14178676370944743`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.14178676370944743`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 16.629708845039325`}, {0.0022799840165343976`, 
             17.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 326.7325950471215}, {
            25.516463235597882`, 33.66379161616379}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.0022799840165343976`]& ,
         TagBoxNote->"0.0022799840165343976"],
        StyleBox["0.0022799840165343976`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.0022799840165343976`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 17.629708845039325`}, {-0.32737568805558315`, 
             18.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{270.809789004445, 326.34927656473496`}, {
            15.190361358578826`, 23.337689739144736`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.32737568805558315`]& ,
         TagBoxNote->"-0.32737568805558315"],
        StyleBox[
         RowBox[{"-", "0.32737568805558315`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.32737568805558315`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 18.629708845039325`}, {-0.021060721865505894`, 
             19.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{322.308478083296, 326.34927656473496`}, {
            4.86425948155977, 13.011587862125708`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.021060721865505894`]& ,
         TagBoxNote->"-0.021060721865505894"],
        StyleBox[
         RowBox[{"-", "0.021060721865505894`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.021060721865505894`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 19.629708845039325`}, {-0.11522165717993194`, 
             20.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{306.4778290247633, 
            326.34927656473496`}, {-5.461842395459286, 2.685485985106652}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.11522165717993194`]& ,
         TagBoxNote->"-0.11522165717993194"],
        StyleBox[
         RowBox[{"-", "0.11522165717993194`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.11522165717993194`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 20.629708845039325`}, {0.14251177350084676`, 
             21.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            350.3088290635234}, {-15.787944272478342`, -7.640615891912404}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.14251177350084676`]& ,
         TagBoxNote->"0.14251177350084676"],
        StyleBox["0.14251177350084676`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.14251177350084676`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 21.629708845039325`}, {-0.68708157824849, 
             22.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{210.3348405248434, 
            326.34927656473496`}, {-26.114046149497398`, -17.96671776893146}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.68708157824849]& ,
         TagBoxNote->"-0.68708157824849"],
        StyleBox[
         RowBox[{"-", "0.68708157824849`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.68708157824849, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 22.629708845039325`}, {-0.5277984916680127, 
             23.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{237.1140418591902, 
            326.34927656473496`}, {-36.440148026516425`, \
-28.292819645950516`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.5277984916680127]& ,
         TagBoxNote->"-0.5277984916680127"],
        StyleBox[
         RowBox[{"-", "0.5277984916680127`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.5277984916680127, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 23.629708845039325`}, {0.1056804311142523, 
             24.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            344.1166215017585}, {-46.76624990353548, -38.61892152296957}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.1056804311142523]& ,
         TagBoxNote->"0.1056804311142523"],
        StyleBox["0.1056804311142523`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.1056804311142523, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 24.629708845039325`}, {0.6440856716015784, 
             25.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            434.6350980331184}, {-57.09235178055454, -48.9450233999886}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.6440856716015784]& ,
         TagBoxNote->"0.6440856716015784"],
        StyleBox["0.6440856716015784`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.6440856716015784, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 25.629708845039325`}, {-0.3226280687204186, 
             26.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{271.60797452912703`, 
            326.34927656473496`}, {-67.41845365757356, -59.271125277007656`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.3226280687204186]& ,
         TagBoxNote->"-0.3226280687204186"],
        StyleBox[
         RowBox[{"-", "0.3226280687204186`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.3226280687204186, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 26.629708845039325`}, {-0.10678619688283142`, 
             27.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{307.89602661556535`, 
            326.34927656473496`}, {-77.74455553459265, -69.59722715402668}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.10678619688283142`]& ,
         TagBoxNote->"-0.10678619688283142"],
        StyleBox[
         RowBox[{"-", "0.10678619688283142`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.10678619688283142`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 27.629708845039325`}, {-0.6568969852298299, 
             28.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{215.40957451572206`, 
            326.34927656473496`}, {-88.07065741161168, -79.92332903104577}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.6568969852298299]& ,
         TagBoxNote->"-0.6568969852298299"],
        StyleBox[
         RowBox[{"-", "0.6568969852298299`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.6568969852298299, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 28.629708845039325`}, {-0.18175509897195274`, 
             29.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{295.2920059002512, 
            326.34927656473496`}, {-98.39675928863076, -90.2494309080648}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.18175509897195274`]& ,
         TagBoxNote->"-0.18175509897195274"],
        StyleBox[
         RowBox[{"-", "0.18175509897195274`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.18175509897195274`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 29.629708845039325`}, {0.11489623753415312`, 
             30.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            345.66601347346796`}, {-108.72286116564979`, \
-100.57553278508388`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.11489623753415312`]& ,
         TagBoxNote->"0.11489623753415312"],
        StyleBox["0.11489623753415312`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.11489623753415312`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 30.629708845039325`}, {-0.17321642422046057`, 
             31.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{296.7275562477966, 
            326.34927656473496`}, {-119.04896304266882`, \
-110.90163466210291`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.17321642422046057`]& ,
         TagBoxNote->"-0.17321642422046057"],
        StyleBox[
         RowBox[{"-", "0.17321642422046057`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.17321642422046057`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 31.629708845039325`}, {-0.5100704761573542, 
             32.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{240.0945346836966, 
            326.34927656473496`}, {-129.37506491968784`, \
-121.22773653912199`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.5100704761573542]& ,
         TagBoxNote->"-0.5100704761573542"],
        StyleBox[
         RowBox[{"-", "0.5100704761573542`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.5100704761573542, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 32.629708845039325`}, {0.28557178644070946`, 
             33.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            374.3605533969492}, {-139.70116679670693`, -131.55383841614102`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.28557178644070946`]& ,
         TagBoxNote->"0.28557178644070946"],
        StyleBox["0.28557178644070946`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.28557178644070946`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 33.629708845039325`}, {0.28393815975074155`, 
             34.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            374.0859026542056}, {-150.02726867372596`, -141.87994029316005`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.28393815975074155`]& ,
         TagBoxNote->"0.28393815975074155"],
        StyleBox["0.28393815975074155`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.28393815975074155`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 34.629708845039325`}, {-0.02371445989492904, 
             35.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{321.86232283540267`, 
            326.34927656473496`}, {-160.35337055074498`, \
-152.20604217017913`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.02371445989492904]& ,
         TagBoxNote->"-0.02371445989492904"],
        StyleBox[
         RowBox[{"-", "0.02371445989492904`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.02371445989492904, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 35.629708845039325`}, {-0.19700723976843637`, 
             36.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{292.727765352574, 
            326.34927656473496`}, {-170.67947242776407`, \
-162.53214404719816`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -0.19700723976843637`]& ,
         TagBoxNote->"-0.19700723976843637"],
        StyleBox[
         RowBox[{"-", "0.19700723976843637`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-0.19700723976843637`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 36.629708845039325`}, {1.5110711455942756`, 
             37.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            580.3955743048668}, {-181.0055743047831, -172.85824592421724`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 1.5110711455942756`]& ,
         TagBoxNote->"1.5110711455942756"],
        StyleBox["1.5110711455942756`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[1.5110711455942756`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 37.629708845039325`}, {-1.1444170460302416`, 
             38.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{133.44608333167216`, 
            326.34927656473496`}, {-191.33167618180218`, \
-183.18434780123627`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, -1.1444170460302416`]& ,
         TagBoxNote->"-1.1444170460302416"],
        StyleBox[
         RowBox[{"-", "1.1444170460302416`"}], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[-1.1444170460302416`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0., 38.629708845039325`}, {0.004435891894309429, 
             39.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            327.09505343712806`}, {-201.6577780588212, -193.5104496782553}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.004435891894309429]& ,
         TagBoxNote->"0.004435891894309429"],
        StyleBox["0.004435891894309429`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.004435891894309429, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.42], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0., 39.629708845039325`}, {0.00031625987912753395`, 
             40.37029115496067}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{325.84927656473496`, 
            326.4024472255939}, {-211.98387993584024`, -203.83655155527438`}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.00031625987912753395`]& ,
         TagBoxNote->"0.00031625987912753395"],
        StyleBox["0.00031625987912753395`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.00031625987912753395`, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0., -0.16510280115910025`}, {0., 41.18099903408306}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0., 0.6297088450393267}, 
           Offset[{-6., 0.}, {0., 0.6297088450393267}]}], 
         LineBox[{{0., 40.37029115496066}, 
           Offset[{-6., 0.}, {0., 
            40.37029115496066}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
           LineBox[{{0., 1.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 1.3702911549606736`}]}], 
           LineBox[{{0., 1.6297088450393267`}, 
             Offset[{-4., 0.}, {0., 1.6297088450393267`}]}], 
           LineBox[{{0., 2.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 2.3702911549606736`}]}], 
           LineBox[{{0., 2.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 2.6297088450393264`}]}], 
           LineBox[{{0., 3.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 3.3702911549606736`}]}], 
           LineBox[{{0., 3.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 3.6297088450393264`}]}], 
           LineBox[{{0., 4.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 4.3702911549606736`}]}], 
           LineBox[{{0., 4.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 4.6297088450393264`}]}], 
           LineBox[{{0., 5.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 5.3702911549606736`}]}], 
           LineBox[{{0., 5.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 5.6297088450393264`}]}], 
           LineBox[{{0., 6.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 6.3702911549606736`}]}], 
           LineBox[{{0., 6.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 6.6297088450393264`}]}], 
           LineBox[{{0., 7.3702911549606736`}, 
             Offset[{-4., 0.}, {0., 7.3702911549606736`}]}], 
           LineBox[{{0., 7.6297088450393264`}, 
             Offset[{-4., 0.}, {0., 7.6297088450393264`}]}], 
           LineBox[{{0., 8.370291154960674}, 
             Offset[{-4., 0.}, {0., 8.370291154960674}]}], 
           LineBox[{{0., 8.629708845039326}, 
             Offset[{-4., 0.}, {0., 8.629708845039326}]}], 
           LineBox[{{0., 9.370291154960674}, 
             Offset[{-4., 0.}, {0., 9.370291154960674}]}], 
           LineBox[{{0., 9.629708845039326}, 
             Offset[{-4., 0.}, {0., 9.629708845039326}]}], 
           LineBox[{{0., 10.370291154960674`}, 
             Offset[{-4., 0.}, {0., 10.370291154960674`}]}], 
           LineBox[{{0., 10.629708845039326`}, 
             Offset[{-4., 0.}, {0., 10.629708845039326`}]}], 
           LineBox[{{0., 11.370291154960674`}, 
             Offset[{-4., 0.}, {0., 11.370291154960674`}]}], 
           LineBox[{{0., 11.629708845039326`}, 
             Offset[{-4., 0.}, {0., 11.629708845039326`}]}], 
           LineBox[{{0., 12.370291154960674`}, 
             Offset[{-4., 0.}, {0., 12.370291154960674`}]}], 
           LineBox[{{0., 12.629708845039326`}, 
             Offset[{-4., 0.}, {0., 12.629708845039326`}]}], 
           LineBox[{{0., 13.370291154960674`}, 
             Offset[{-4., 0.}, {0., 13.370291154960674`}]}], 
           LineBox[{{0., 13.629708845039326`}, 
             Offset[{-4., 0.}, {0., 13.629708845039326`}]}], 
           LineBox[{{0., 14.370291154960674`}, 
             Offset[{-4., 0.}, {0., 14.370291154960674`}]}], 
           LineBox[{{0., 14.629708845039326`}, 
             Offset[{-4., 0.}, {0., 14.629708845039326`}]}], 
           LineBox[{{0., 15.370291154960674`}, 
             Offset[{-4., 0.}, {0., 15.370291154960674`}]}], 
           LineBox[{{0., 15.629708845039326`}, 
             Offset[{-4., 0.}, {0., 15.629708845039326`}]}], 
           LineBox[{{0., 16.37029115496067}, 
             Offset[{-4., 0.}, {0., 16.37029115496067}]}], 
           LineBox[{{0., 16.629708845039325`}, 
             Offset[{-4., 0.}, {0., 16.629708845039325`}]}], 
           LineBox[{{0., 17.37029115496067}, 
             Offset[{-4., 0.}, {0., 17.37029115496067}]}], 
           LineBox[{{0., 17.629708845039325`}, 
             Offset[{-4., 0.}, {0., 17.629708845039325`}]}], 
           LineBox[{{0., 18.37029115496067}, 
             Offset[{-4., 0.}, {0., 18.37029115496067}]}], 
           LineBox[{{0., 18.629708845039325`}, 
             Offset[{-4., 0.}, {0., 18.629708845039325`}]}], 
           LineBox[{{0., 19.37029115496067}, 
             Offset[{-4., 0.}, {0., 19.37029115496067}]}], 
           LineBox[{{0., 19.629708845039325`}, 
             Offset[{-4., 0.}, {0., 19.629708845039325`}]}], 
           LineBox[{{0., 20.37029115496067}, 
             Offset[{-4., 0.}, {0., 20.37029115496067}]}], 
           LineBox[{{0., 20.629708845039325`}, 
             Offset[{-4., 0.}, {0., 20.629708845039325`}]}], 
           LineBox[{{0., 21.37029115496067}, 
             Offset[{-4., 0.}, {0., 21.37029115496067}]}], 
           LineBox[{{0., 21.629708845039325`}, 
             Offset[{-4., 0.}, {0., 21.629708845039325`}]}], 
           LineBox[{{0., 22.37029115496067}, 
             Offset[{-4., 0.}, {0., 22.37029115496067}]}], 
           LineBox[{{0., 22.629708845039325`}, 
             Offset[{-4., 0.}, {0., 22.629708845039325`}]}], 
           LineBox[{{0., 23.37029115496067}, 
             Offset[{-4., 0.}, {0., 23.37029115496067}]}], 
           LineBox[{{0., 23.629708845039325`}, 
             Offset[{-4., 0.}, {0., 23.629708845039325`}]}], 
           LineBox[{{0., 24.37029115496067}, 
             Offset[{-4., 0.}, {0., 24.37029115496067}]}], 
           LineBox[{{0., 24.629708845039325`}, 
             Offset[{-4., 0.}, {0., 24.629708845039325`}]}], 
           LineBox[{{0., 25.37029115496067}, 
             Offset[{-4., 0.}, {0., 25.37029115496067}]}], 
           LineBox[{{0., 25.629708845039325`}, 
             Offset[{-4., 0.}, {0., 25.629708845039325`}]}], 
           LineBox[{{0., 26.37029115496067}, 
             Offset[{-4., 0.}, {0., 26.37029115496067}]}], 
           LineBox[{{0., 26.629708845039325`}, 
             Offset[{-4., 0.}, {0., 26.629708845039325`}]}], 
           LineBox[{{0., 27.37029115496067}, 
             Offset[{-4., 0.}, {0., 27.37029115496067}]}], 
           LineBox[{{0., 27.629708845039325`}, 
             Offset[{-4., 0.}, {0., 27.629708845039325`}]}], 
           LineBox[{{0., 28.37029115496067}, 
             Offset[{-4., 0.}, {0., 28.37029115496067}]}], 
           LineBox[{{0., 28.629708845039325`}, 
             Offset[{-4., 0.}, {0., 28.629708845039325`}]}], 
           LineBox[{{0., 29.37029115496067}, 
             Offset[{-4., 0.}, {0., 29.37029115496067}]}], 
           LineBox[{{0., 29.629708845039325`}, 
             Offset[{-4., 0.}, {0., 29.629708845039325`}]}], 
           LineBox[{{0., 30.37029115496067}, 
             Offset[{-4., 0.}, {0., 30.37029115496067}]}], 
           LineBox[{{0., 30.629708845039325`}, 
             Offset[{-4., 0.}, {0., 30.629708845039325`}]}], 
           LineBox[{{0., 31.37029115496067}, 
             Offset[{-4., 0.}, {0., 31.37029115496067}]}], 
           LineBox[{{0., 31.629708845039325`}, 
             Offset[{-4., 0.}, {0., 31.629708845039325`}]}], 
           LineBox[{{0., 32.37029115496067}, 
             Offset[{-4., 0.}, {0., 32.37029115496067}]}], 
           LineBox[{{0., 32.62970884503932}, 
             Offset[{-4., 0.}, {0., 32.62970884503932}]}], 
           LineBox[{{0., 33.37029115496066}, 
             Offset[{-4., 0.}, {0., 33.37029115496066}]}], 
           LineBox[{{0., 33.62970884503932}, 
             Offset[{-4., 0.}, {0., 33.62970884503932}]}], 
           LineBox[{{0., 34.37029115496066}, 
             Offset[{-4., 0.}, {0., 34.37029115496066}]}], 
           LineBox[{{0., 34.62970884503932}, 
             Offset[{-4., 0.}, {0., 34.62970884503932}]}], 
           LineBox[{{0., 35.37029115496066}, 
             Offset[{-4., 0.}, {0., 35.37029115496066}]}], 
           LineBox[{{0., 35.62970884503932}, 
             Offset[{-4., 0.}, {0., 35.62970884503932}]}], 
           LineBox[{{0., 36.37029115496066}, 
             Offset[{-4., 0.}, {0., 36.37029115496066}]}], 
           LineBox[{{0., 36.62970884503932}, 
             Offset[{-4., 0.}, {0., 36.62970884503932}]}], 
           LineBox[{{0., 37.37029115496066}, 
             Offset[{-4., 0.}, {0., 37.37029115496066}]}], 
           LineBox[{{0., 37.62970884503932}, 
             Offset[{-4., 0.}, {0., 37.62970884503932}]}], 
           LineBox[{{0., 38.37029115496066}, 
             Offset[{-4., 0.}, {0., 38.37029115496066}]}], 
           LineBox[{{0., 38.62970884503932}, 
             Offset[{-4., 0.}, {0., 38.62970884503932}]}], 
           LineBox[{{0., 39.37029115496066}, 
             Offset[{-4., 0.}, {0., 39.37029115496066}]}], 
           LineBox[{{0., 39.62970884503932}, 
             Offset[{-4., 0.}, {0., 39.62970884503932}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], 
          InsetBox["\<\"Population\"\>", Offset[{-2, 0}, {0., 1.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Latitude\"\>", Offset[{-2, 0}, {0., 2.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Longitude\"\>", Offset[{-2, 0}, {0., 3.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"Elevation\"\>", Offset[{-2, 0}, {0., 4.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"MagneticFieldStrength\"\>", 
           Offset[{-2, 0}, {0., 5.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPopulation\"\>", Offset[{-2, 0}, {0., 6.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLatitude\"\>", Offset[{-2, 0}, {0., 7.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryLongitude\"\>", Offset[{-2, 0}, {0., 8.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryArea\"\>", Offset[{-2, 0}, {0., 9.}], {1, 0}, 
           Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterArea\"\>", Offset[{-2, 0}, {0., 10.}], {1, 0},
            Automatic, {1, 0}], 
          InsetBox["\<\"CountryBoundaryLength\"\>", 
           Offset[{-2, 0}, {0., 11.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryCoastlineLength\"\>", 
           Offset[{-2, 0}, {0., 12.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryWaterwayLength\"\>", 
           Offset[{-2, 0}, {0., 13.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryContributingFamilyWorkers\"\>", 
           Offset[{-2, 0}, {0., 14.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGDPPerPersonEmployed\"\>", 
           Offset[{-2, 0}, {0., 15.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryGiniIndex\"\>", 
           Offset[{-2, 0}, {0., 15.999999999999998}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryInterestRateSpread\"\>", 
           Offset[{-2, 0}, {0., 17.}], {1, 0}, Automatic, {1, 0}], 
          InsetBox["\<\"CountryPovertyHeadcount\"\>", 
           Offset[{-2, 0}, {0., 17.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryUnemploymentRate\"\>", 
           Offset[{-2, 0}, {0., 18.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryBookTitles\"\>", 
           Offset[{-2, 0}, {0., 19.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryIlliteracyFraction\"\>", 
           Offset[{-2, 0}, {0., 20.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryMaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 21.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryMaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 22.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryFemaleLifeExpectancy\"\>", 
           Offset[{-2, 0}, {0., 23.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryFemaleMedianAge\"\>", 
           Offset[{-2, 0}, {0., 24.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryHospitalBedsPer10000Population\"\>", 
           Offset[{-2, 0}, {0., 25.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryArmy\"\>", 
           Offset[{-2, 0}, {0., 26.999999999999996}], {1, 0}, Automatic, {1, 
           0}], 
          InsetBox["\<\"CountryHIVAIDSPopulation\"\>", 
           Offset[{-2, 0}, {0., 27.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryElectricityTotal\"\>", 
           Offset[{-2, 0}, {0., 28.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryChildPopulation\"\>", 
           Offset[{-2, 0}, {0., 29.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryElderlyPopulation\"\>", 
           Offset[{-2, 0}, {0., 30.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryAnnualMarriages\"\>", 
           Offset[{-2, 0}, {0., 31.999999999999996}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryAnnualDivorces\"\>", 
           Offset[{-2, 0}, {0., 32.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryNetIncomeFromAbroad\"\>", 
           Offset[{-2, 0}, {0., 33.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryGovernmentDebt\"\>", 
           Offset[{-2, 0}, {0., 34.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryGovernmentSurplus\"\>", 
           Offset[{-2, 0}, {0., 35.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryImportsValue\"\>", 
           Offset[{-2, 0}, {0., 36.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryExportsValue\"\>", 
           Offset[{-2, 0}, {0., 37.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryLeisureArrivals\"\>", 
           Offset[{-2, 0}, {0., 38.99999999999999}], {1, 0}, Automatic, {1, 
           0}], InsetBox["\<\"CountryNewspaperTitles\"\>", 
           Offset[{-2, 0}, {0., 39.99999999999999}], {1, 0}, Automatic, {1, 
           0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, False},
  AxesLabel->{None, None},
  AxesOrigin->{0., -0.16510280115910025`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{721.59375, Automatic},
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, None}]], "Output",
 CellChangeTimes->{
  3.771694500664877*^9, 3.77169465172803*^9, 3.771703750504766*^9, 
   3.77170902625204*^9, {3.771709533678793*^9, 3.771709544454525*^9}, 
   3.771709632180335*^9, 3.7717096772392263`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"b9fb4a3f-58eb-49ac-877a-0bb7ec1cf522"]
}, Open  ]],

Cell["Lets compare the land use across region", "Text",
 CellChangeTimes->{{3.7716230389171543`*^9, 
  3.7716230649283113`*^9}},ExpressionUUID->"13ca92df-031f-49fc-8d35-\
f0d7e45c8ee7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", " ", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.7716230389171543`*^9, 3.771623065802146*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],

Cell[BoxData[
 TemplateBox[{
  "$IterationLimit","itlim",
   "\"Iteration limit of \\!\\(\\*RowBox[{\\\"4096\\\"}]\\) exceeded.\"",2,81,
   10,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709026833088*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],

Cell[BoxData[
 TemplateBox[{
  "Import","chtype",
   "\"First argument \\!\\(\\*RowBox[{\\\"Hold\\\", \\\"[\\\", \
RowBox[{\\\"CityDataPath\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"/Users/ashvardanian/CodeMine/WolframSummer19/Data/\
Features\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"CityName\\\", \\\"[\\\", \
RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\
\"EntityValue\\\", \\\"[\\\", RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"EntityValue\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \
\\\"]\\\"}], \\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \
\\\",\\\", \\\"\\\\\\\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\",\\\", \\\"\\\\\\\
\"Name\\\\\\\"\\\"}], \\\"]\\\"}], \\\"]\\\"}]}], \\\"]\\\"}], \\\"]\\\"}]\\) \
is not a valid file, directory, or URL specification.\"",2,81,11,
   18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027006002*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,12,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027041771*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],

Cell[BoxData[
 TemplateBox[{
  "Lookup","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"$Failed\\\"}]\\) is not a valid \
Association or a list of rules.\"",2,81,13,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027103318*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],

Cell[BoxData[
 TemplateBox[{
  "Keys","invrl",
   "\"The argument \\!\\(\\*RowBox[{\\\"statsAreaShareByPurpose\\\"}]\\) is \
not a valid Association or a list of rules.\"",2,81,14,18189169431609201810,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.77170902715431*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,15,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027267667*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,16,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.7717090273824177`*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],

Cell[BoxData[
 TemplateBox[{
  "BarChart","ldata",
   "\"\\!\\(\\*RowBox[{\\\"Lookup\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"ImportAllFeatures\\\", \\\"[\\\", \\\"city\\\", \
\\\"]\\\"}], \\\",\\\", RowBox[{\\\"Keys\\\", \\\"[\\\", \
\\\"statsAreaShareByPurpose\\\", \\\"]\\\"}]}], \\\"]\\\"}]\\) is not a valid \
dataset or list of datasets.\"",2,81,17,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027626474*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"BarChart\\\", \
\\\"::\\\", \\\"ldata\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"",2,81,18,18189169431609201810,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.771671001046298*^9, 3.771703750903798*^9, 
  3.771709027778895*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Lookup", "[", 
    RowBox[{
     RowBox[{"ImportAllFeatures", "[", "city", "]"}], ",", 
     RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Keys", "[", "statsAreaShareByPurpose", "]"}]}], ",", 
   RowBox[{"BarOrigin", "\[Rule]", "Left"}]}], "]"}]], "Output",
 CellChangeTimes->{3.771671001693563*^9, 3.771703751554764*^9, 
  3.771709027824383*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Are there correlations between cities topology and \
quality of life?", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 
  3.7711017028966513`*^9}},ExpressionUUID->"6c1bcee3-7d57-470c-83c9-\
d43fb7fc74bf"],

Cell["wewe", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.77110170100001*^9}, {3.771101741395993*^9, 
  3.7711017424741297`*^9}},ExpressionUUID->"3283bbee-62a9-4fc6-b5fd-\
8bd09809fc32"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Are there correlations between known features and \
quality of life?", "Subtitle"]], "Chapter",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
   3.771101487741495*^9, 3.771101697078874*^9}, 
   3.771101745126054*^9},ExpressionUUID->"ab3308a3-abcb-4b85-978f-\
770e36f58aa0"],

Cell["wewe", "Text",
 CellChangeTimes->{{3.771101273954318*^9, 3.7711014398267927`*^9}, {
  3.771101487741495*^9, 3.771101697078874*^9}, {3.7711017481709642`*^9, 
  3.7711017524833117`*^9}, {3.77160336959536*^9, 
  3.771603372464587*^9}},ExpressionUUID->"5e201699-c7fa-4448-9db3-\
a409c7f2831f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildDataset", "[", 
    RowBox[{"city_", ",", " ", "rating_Real", ",", " ", "imgs_"}], "]"}], " ",
    ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ratings", "}"}], ",", "\n", "\t", 
     RowBox[{
      RowBox[{"ratings", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"rating", ",", " ", 
         RowBox[{"Length", "[", "imgs", "]"}]}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "Same", " ", "for", " ", "all", " ", "images", " ", "within", " ", 
        "city"}], "*)"}], "\n", "\t", 
      RowBox[{"AssociationsFromPair", "[", 
       RowBox[{"imgs", ",", " ", "ratings"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695092612587*^9}, {
  3.771695420377442*^9, 3.7716954240693274`*^9}, {3.771695525490217*^9, 
  3.7716955427053223`*^9}, {3.77169557475178*^9, 3.771695608141577*^9}, {
  3.7717013125325403`*^9, 3.771701315713105*^9}, {3.7717013958100977`*^9, 
  3.771701472688505*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetMaps", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportMaps", "[", "#1", "]"}]}], "]"}], " ", "&"}], ",", 
       " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetSatellites", " ", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BuildDataset", "[", 
         RowBox[{"#1", ",", " ", "#2", ",", " ", 
          RowBox[{"ImportSatellites", "[", "#1", "]"}]}], "]"}], " ", "&"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"citiesPopular", ",", " ", "citiesPositivness"}], "}"}]}], 
      "]"}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.771695131022481*^9}, {
   3.771695179577177*^9, 3.771695215558429*^9}, {3.7716953433989143`*^9, 
   3.7716953529173613`*^9}, {3.771695495691889*^9, 3.771695521620345*^9}, {
   3.771695563051428*^9, 3.771695563864685*^9}, 3.7716969865035973`*^9, {
   3.771701456371614*^9, 3.771701489783415*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetMaps", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetMaps", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9, {3.77170385339028*^9, 3.771703857527769*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelMapsANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Panel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.771701051706173*^9}, {3.771701577001584*^9, 
   3.771701581530403*^9}, {3.771701613310336*^9, 3.771701614358871*^9}, 
   3.771702026850885*^9},ExpressionUUID->"fa821b18-598d-4969-a5ce-\
d0cc2bc295df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 3.771702025299842*^9, 
   3.771702128773827*^9, {3.771702475598556*^9, 3.771702475949767*^9}, {
   3.771703862173395*^9, 3.7717038631782417`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"modelSatellitesANN", " ", "=", " ", 
   RowBox[{"Predict", "[", 
    RowBox[{"datasetTrain", ",", " ", 
     RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}], ",", " ", 
     RowBox[{"ValidationSet", "\[Rule]", "datasetValidate"}], ",", " ", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", "\"\<Pwanel\>\""}]}], 
    "]"}]}], ";"}]], "Code",
 Evaluatable->False,
 CellChangeTimes->{{3.771695084462446*^9, 3.7716951066201973`*^9}, {
   3.771701050881578*^9, 3.77170106832066*^9}, {3.7717015871684303`*^9, 
   3.771701628612402*^9}, 3.771701836007718*^9, 
   3.771702025299842*^9},ExpressionUUID->"b52d97d1-1f12-4f4e-927c-\
7e474525430d"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{{3.771701055607881*^9, 3.771701069093855*^9}, 
   3.7717017566127987`*^9},
 CellLabel->
  "Out[656]=",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "model", "]"}]], "Code",
 CellChangeTimes->{3.771696127001232*^9},
 CellLabel->"In[89]:=",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`model\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`model\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "Global`model", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`model"], True]]], "Output",
 CellChangeTimes->{3.7716961291480513`*^9, 3.771703764701326*^9, 
  3.7717090480979567`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cnnFull", " ", "=", " ", 
   RowBox[{
   "NetModel", "[", "\"\<ResNet-101 Trained on YFCC100m Geotagged Data\>\"", 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.771697076399399*^9, 3.771697086936078*^9}, {
  3.771701157745332*^9, 3.771701163246292*^9}, {3.771701236513834*^9, 
  3.7717012371068773`*^9}, {3.771701284764735*^9, 3.77170128529869*^9}, {
  3.77170207100424*^9, 3.771702074100959*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetFlatten", "[", 
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NetTake", "[", 
        RowBox[{"cnnFull", ",", " ", "\"\<pool1\>\""}], "]"}], ",", " ", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", " ", "LogisticSigmoid"}], "}"}], 
     "]"}], ",", " ", "1"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771701679489496*^9, 3.771701725723916*^9}, {
   3.771701952576314*^9, 3.771701958218424*^9}, 3.771702088913781*^9, {
   3.7717023018480253`*^9, 3.771702412505938*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["43", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{3}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{3}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 3,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 3, 7, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{3, 3}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 1,
                     1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit1", "Outputs", "Output"]}], 
                    "7" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit2", "Outputs", "Output"]}], 
                    "8" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 64, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "_plus_stage1_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage1_unit3", "Outputs", "Output"]}], 
                    "9" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit1", "Outputs", "Output"]}], 
                    "10" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit2", "Outputs", "Output"]}], 
                    "11" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit3", "Outputs", "Output"]}], 
                    "12" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 128, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "_plus_stage2_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage2_unit4", "Outputs", "Output"]}], 
                    "13" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 512, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit1", "Outputs", "Output"]}], 
                    "14" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit2", "Outputs", "Output"]}], 
                    "15" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit3", "Outputs", "Output"]}], 
                    "16" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit4" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit4", "Outputs", "Output"]}], 
                    "17" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit5" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit5", "Outputs", "Output"]}], 
                    "18" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit6" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit6", "Outputs", "Output"]}], 
                    "19" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit7" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit7", "Outputs", "Output"]}], 
                    "20" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit8" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit8", "Outputs", "Output"]}], 
                    "21" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit9" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit9", "Outputs", "Output"]}], 
                    "22" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit10" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit10", "Outputs", "Output"]}], 
                    "23" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit11" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit11", "Outputs", "Output"]}], 
                    "24" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit12" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit12", "Outputs", "Output"]}], 
                    "25" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit13" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit13", "Outputs", "Output"]}], 
                    "26" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit14" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit14", "Outputs", "Output"]}], 
                    "27" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit15" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit15", "Outputs", "Output"]}], 
                    "28" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit16" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit16", "Outputs", "Output"]}], 
                    "29" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit17" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit17", "Outputs", "Output"]}], 
                    "30" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit18" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit18", "Outputs", "Output"]}], 
                    "31" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit19" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit19", "Outputs", "Output"]}], 
                    "32" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit20" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit20", "Outputs", "Output"]}], 
                    "33" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit21" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit21", "Outputs", "Output"]}], 
                    "34" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit22" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit22", "Outputs", "Output"]}], 
                    "35" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{256, 256, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{256}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1024, 256,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "_plus_stage3_unit23" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage3_unit23", "Outputs", "Output"]}], 
                    "36" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1024}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 1024,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "sc" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 
                    1024, 1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "ChannelGroups" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1024],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit1" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "sc", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "sc", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit1", "Outputs", "Output"]}], 
                    "37" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit2", "Outputs", "Output"]}], 
                    "38" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn1" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{512, 512, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{512}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2048, 512,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "ChannelGroups" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 512], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "_plus_stage4_unit3" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus_stage4_unit3", "Outputs", "Output"]}], 
                    "39" -> Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{2048}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{2048}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00002, "$Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "40" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "41" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "42" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 2048}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], "43" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "43", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10", "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"512\"", 
                    "\"28\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"25\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"26\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"27\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"28\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"29\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"30\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "30"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"31\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "31"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"32\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "32"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"33\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "33"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"34\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "34"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"35\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "35"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"36\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "36"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"37\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "37"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"38\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "38"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"39\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "39"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"40\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "40"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"41\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "41"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"42\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "42"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"43\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "43"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771703769226363*^9, 3.771709054798896*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetTrain", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"datasetValidate", " ", "=", " ", 
   RowBox[{"Drop", "[", 
    RowBox[{"datasetSatellites", ",", " ", 
     RowBox[{"constantShareTraining", " ", "*", " ", 
      RowBox[{"Length", "[", "datasetSatellites", "]"}]}]}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703899626437*^9, 
   3.771703916305149*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],

Cell[BoxData[
 RowBox[{"modelGeoCNN", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"modelGeoCNN", ",", " ", 
    RowBox[{"Association", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Input\>\"", "\[Rule]", 
        RowBox[{"Keys", "[", "datasetTrain", "]"}]}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"Values", "[", "datasetTrain", "]"}]}]}], "}"}], "]"}], ",", 
    " ", "All"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.771702051691362*^9, 3.771702057357749*^9}, {
   3.7717020944380827`*^9, 3.771702100249503*^9}, {3.77170219270057*^9, 
   3.7717022120480337`*^9}, 3.771703475495027*^9, {3.771703646880005*^9, 
   3.771703704613678*^9}, {3.771703777811902*^9, 3.771703807402351*^9}, 
   3.7717038433808413`*^9, {3.771703926567396*^9, 3.7717039384147387`*^9}, {
   3.7717041901368637`*^9, 3.771704193396693*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{1113, 832},
WindowMargins->{{Automatic, 131}, {Automatic, 50}},
TaggingRules->{"Salvaged" -> True},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 184, 3, 98, "Title",ExpressionUUID->"112c77e2-f45b-4372-906b-a938d28da3f8"],
Cell[CellGroupData[{
Cell[789, 29, 182, 3, 62, "Section",ExpressionUUID->"2f1f3b8e-3200-48b9-b773-a77a1c396b17"],
Cell[974, 34, 538, 8, 81, "Text",ExpressionUUID->"c6307c66-135d-4af1-918e-b52e229fb589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1549, 47, 254, 4, 56, "Chapter",ExpressionUUID->"ac13fabb-576a-4a4b-8847-2bb61f653aef"],
Cell[1806, 53, 472, 8, 58, "Text",ExpressionUUID->"d7112578-2f96-4683-9976-1d246abd738b"],
Cell[2281, 63, 13501, 334, 984, "Code",ExpressionUUID->"20961709-7c7a-45d4-a981-9ac2574c6877"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15819, 402, 270, 5, 56, "Chapter",ExpressionUUID->"684ffadd-38af-4be8-83bf-99937c2f50b6"],
Cell[16092, 409, 346, 6, 35, "Text",ExpressionUUID->"2c0225ee-0b7c-4924-8b64-a72ab5040bfe"],
Cell[16441, 417, 7925, 196, 642, "Code",ExpressionUUID->"acdb5163-89af-4011-8610-a985ea22ddfc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24403, 618, 294, 4, 56, "Chapter",ExpressionUUID->"f13af7f9-8d60-4430-b05b-364fe3261edc"],
Cell[24700, 624, 1895, 39, 91, "Code",ExpressionUUID->"4c25a172-1f5e-4ece-a2a0-a28dcc91de33"],
Cell[26598, 665, 5819, 133, 395, "Code",ExpressionUUID->"28b7f604-9d20-43ee-9c76-9f66715d0077"],
Cell[32420, 800, 4116, 90, 395, "Code",ExpressionUUID->"2be1d42f-5581-456f-be78-898b6ec8f702"],
Cell[36539, 892, 17387, 372, 1383, "Code",ExpressionUUID->"ce916f56-0286-4291-9303-f08a2c807b22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53963, 1269, 369, 5, 56, "Chapter",ExpressionUUID->"31ec80d6-775d-4599-a9dc-de5307132f4f"],
Cell[54335, 1276, 2349, 55, 167, "Code",ExpressionUUID->"b390a3c8-0279-4919-a9b9-ecf0cf3957f6"],
Cell[56687, 1333, 834, 18, 91, "Code",ExpressionUUID->"c766c488-b0f2-40dd-b6b0-55ce54d425cf"],
Cell[57524, 1353, 263, 6, 35, "Text",ExpressionUUID->"13349771-2cbd-4640-86e0-2a496adaad4a"],
Cell[57790, 1361, 2520, 44, 91, "Code",ExpressionUUID->"1ba0fedf-ebcf-47e3-8705-8f2f4c11ea50"],
Cell[CellGroupData[{
Cell[60335, 1409, 2593, 45, 91, "Code",ExpressionUUID->"dd94b0a0-2b74-462f-8d54-573d698ec4b3"],
Cell[62931, 1456, 123857, 2205, 362, 65665, 1251, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"5fc06c8b-7df8-4361-b65a-14355bb32230"]
}, Open  ]],
Cell[186803, 3664, 498, 9, 58, "Text",ExpressionUUID->"04da58f6-384a-4c46-83b1-c68f03702b2d"],
Cell[187304, 3675, 1137, 22, 52, "Code",ExpressionUUID->"a58ae607-e3f4-479d-9dc6-6664faa1cf71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188478, 3702, 266, 5, 56, "Chapter",ExpressionUUID->"8a65fa07-75ab-4cd8-9e92-75fdfaaad169"],
Cell[188747, 3709, 293, 5, 35, "Text",ExpressionUUID->"1e314e11-051b-4643-8db0-01d456f6b7b3"],
Cell[189043, 3716, 8708, 178, 585, "Code",ExpressionUUID->"d54f38e5-c079-43b6-a6e9-599471a76047"],
Cell[197754, 3896, 1148, 20, 52, "Code",ExpressionUUID->"7b906042-07a2-4091-9985-37c02a3bdd1a"],
Cell[198905, 3918, 1492, 29, 72, "Code",ExpressionUUID->"be32058e-de7f-49c4-9930-e83a1bd14d48"],
Cell[200400, 3949, 605, 14, 52, "Code",ExpressionUUID->"796626e7-9229-4ab3-b59e-8111135ac5f3"],
Cell[201008, 3965, 597, 13, 52, "Code",ExpressionUUID->"8be1f01a-8445-4672-9c86-0e6bc45bdd45"],
Cell[CellGroupData[{
Cell[201630, 3982, 340, 6, 52, "Code",ExpressionUUID->"a1ee4fab-ca0a-476a-939e-0d3ea134d579"],
Cell[201973, 3990, 112576, 1857, 545, 30351, 509, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"90d29e60-a92f-4ead-8c0f-11a2a03cfab0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314586, 5852, 1249, 20, 52, "Code",ExpressionUUID->"13fa3c08-5018-4d4d-92b5-cbbee4254ed2"],
Cell[315838, 5874, 1861, 31, 59, "Message",ExpressionUUID->"108d07a4-702a-43ad-9c79-05b4a557e6f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317736, 5910, 536, 10, 52, "Code",ExpressionUUID->"96017ae7-f811-4369-84f3-ccf0a0254f5b"],
Cell[318275, 5922, 54892, 1323, 470, "Output",ExpressionUUID->"b9fb4a3f-58eb-49ac-877a-0bb7ec1cf522"]
}, Open  ]],
Cell[373182, 7248, 185, 3, 35, "Text",ExpressionUUID->"13ca92df-031f-49fc-8d35-f0d7e45c8ee7"],
Cell[CellGroupData[{
Cell[373392, 7255, 546, 11, 52, "Code",ExpressionUUID->"daeaff8c-13a2-42a2-89c0-cc2fb636c1af"],
Cell[373941, 7268, 408, 10, 24, "Message",ExpressionUUID->"fea36d2f-a6d7-443f-a4e4-94836f11fbb5"],
Cell[374352, 7280, 1342, 23, 59, "Message",ExpressionUUID->"f80ffec1-06cd-46fc-bbf4-149266e4eb38"],
Cell[375697, 7305, 449, 11, 24, "Message",ExpressionUUID->"5febf425-0465-4f0f-9c71-fb9c09961a63"],
Cell[376149, 7318, 431, 10, 24, "Message",ExpressionUUID->"bd95b5a3-38c6-4b18-b27b-986f35124f07"],
Cell[376583, 7330, 448, 11, 24, "Message",ExpressionUUID->"945f6734-83b6-4098-8373-1c94362e567f"],
Cell[377034, 7343, 617, 13, 24, "Message",ExpressionUUID->"087195d7-64a9-4ccd-b76b-a6eb523ef3a9"],
Cell[377654, 7358, 619, 13, 24, "Message",ExpressionUUID->"53764db8-e1a5-4cfd-a52b-6421cb572b22"],
Cell[378276, 7373, 617, 13, 24, "Message",ExpressionUUID->"ec5d81bb-79c3-4b05-95bf-47b7d22a9cc7"],
Cell[378896, 7388, 494, 11, 24, "Message",ExpressionUUID->"1cca381e-bdd0-4764-b689-736b0f13df9e"],
Cell[379393, 7401, 564, 12, 56, "Output",ExpressionUUID->"adde70da-eb68-4a37-8a9e-f8fe9ec048a4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[380006, 7419, 299, 5, 56, "Chapter",ExpressionUUID->"6c1bcee3-7d57-470c-83c9-d43fb7fc74bf"],
Cell[380308, 7426, 244, 4, 35, "Text",ExpressionUUID->"3283bbee-62a9-4fc6-b5fd-8bd09809fc32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380589, 7435, 320, 5, 56, "Chapter",ExpressionUUID->"ab3308a3-abcb-4b85-978f-770e36f58aa0"],
Cell[380912, 7442, 295, 5, 35, "Text",ExpressionUUID->"5e201699-c7fa-4448-9db3-a409c7f2831f"],
Cell[381210, 7449, 1122, 26, 110, "Code",ExpressionUUID->"b3ef612e-213d-4424-ab69-0f6a32ff097c"],
Cell[382335, 7477, 1436, 34, 72, "Code",ExpressionUUID->"3dc86f4f-ab41-4a3b-a7fc-d050a07843dd"],
Cell[383774, 7513, 881, 18, 72, "Code",ExpressionUUID->"c345457d-adc3-4886-82ee-570b19476758"],
Cell[384658, 7533, 699, 14, 36, "Code",ExpressionUUID->"fa821b18-598d-4969-a5ce-d0cc2bc295df",
 Evaluatable->False],
Cell[385360, 7549, 960, 20, 72, "Code",ExpressionUUID->"dca30a8c-da2c-4c72-a317-5b189a17c869"],
Cell[CellGroupData[{
Cell[386345, 7573, 683, 14, 36, "Code",ExpressionUUID->"b52d97d1-1f12-4f4e-927c-7e474525430d",
 Evaluatable->False],
Cell[387031, 7589, 212, 4, 34, "Output",ExpressionUUID->"ce3936bf-979f-4a74-ae40-f19f41eb0104"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387280, 7598, 188, 3, 52, "Code",ExpressionUUID->"a63cf4cf-2c05-410c-a7b7-f80e746dc6a5"],
Cell[387471, 7603, 8170, 206, 130, "Output",ExpressionUUID->"895c3674-dbe1-4378-9535-a9f881e03948"]
}, Open  ]],
Cell[395656, 7812, 517, 10, 52, "Code",ExpressionUUID->"8eb4279a-1f74-4ac8-9b4d-7a561e752984"],
Cell[CellGroupData[{
Cell[396198, 7826, 691, 15, 52, "Code",ExpressionUUID->"b8a763af-5bba-4ece-b071-a8d0de5d0cb1"],
Cell[396892, 7843, 569441, 10426, 75, "Output",ExpressionUUID->"852a8ecc-2c1b-4f07-b637-9308c09b0413"]
}, Open  ]],
Cell[966348, 18272, 864, 19, 72, "Code",ExpressionUUID->"8a88b223-04b4-4d6c-a5e4-69fd1d284c5d"],
Cell[967215, 18293, 942, 18, 52, "Code",ExpressionUUID->"cb560b9a-b394-468c-a7ba-e55eca9218e1"]
}, Open  ]]
}, Open  ]]
}
]
*)

